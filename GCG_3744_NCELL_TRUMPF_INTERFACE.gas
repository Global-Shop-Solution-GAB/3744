Program.Sub.ScreenSU.Start
gui.SS_Form1..create
gui.SS_Form1..caption("Process Drops")
gui.SS_Form1..size(2250,2250)
gui.SS_Form1..minx(0)
gui.SS_Form1..miny(0)
gui.SS_Form1..position(0,0)
gui.SS_Form1..alwaysontop(False)
gui.SS_Form1..fontname("Arial")
gui.SS_Form1..fontsize(8)
gui.SS_Form1..forecolor(0)
gui.SS_Form1..fontstyle(,,,,)
gui.SS_Form1..BackColor(-2147483633)
gui.SS_Form1..controlbox(True)
gui.SS_Form1..maxbutton(False)
gui.SS_Form1..minbutton(False)
gui.SS_Form1..mousepointer(0)
gui.SS_Form1..moveable(True)
gui.SS_Form1..sizeable(False)
gui.SS_Form1..ShowInTaskBar(True)
gui.SS_Form1..titlebar(True)
gui.SS_Form1.lbl_ddlDropBin.create(label,"Select Drop Bin",True,1800,200,1,100,135,True,0,Arial,8,-2147483633,0)
gui.SS_Form1.lbl_ddlDropBin.defaultvalue("")
gui.SS_Form1.lbl_ddlDropBin.controlgroup(0)
gui.SS_Form1.ddlDropBin.create(dropdownlist)
gui.SS_Form1.ddlDropBin.visible(True)
gui.SS_Form1.ddlDropBin.size(1800,330)
gui.SS_Form1.ddlDropBin.zorder(0)
gui.SS_Form1.ddlDropBin.position(100,335)
gui.SS_Form1.ddlDropBin.enabled(True)
gui.SS_Form1.ddlDropBin.fontname("Arial")
gui.SS_Form1.ddlDropBin.fontsize(8)
gui.SS_Form1.ddlDropBin.defaultvalue("")
gui.SS_Form1.ddlDropBin.controlgroup(0)
gui.SS_Form1.lblPart.create(label,"Part#",True,1800,200,1,100,750,True,0,Arial,8,-2147483633,0)
gui.SS_Form1.lblPart.defaultvalue("")
gui.SS_Form1.lblPart.controlgroup(0)
gui.SS_Form1.cmdOk.create(button)
gui.SS_Form1.cmdOk.caption("Ok")
gui.SS_Form1.cmdOk.visible(True)
gui.SS_Form1.cmdOk.size(1000,360)
gui.SS_Form1.cmdOk.zorder(0)
gui.SS_Form1.cmdOk.position(100,950)
gui.SS_Form1.cmdOk.enabled(True)
gui.SS_Form1.cmdOk.fontname("Arial")
gui.SS_Form1.cmdOk.fontsize(8)
gui.SS_Form1.cmdOk.event(click,cmdok_click)
gui.SS_Form1.cmdOk.defaultvalue("")
gui.SS_Form1.cmdOk.controlgroup(0)
gui.SS_Form1.chkLabels.create(checkbox)
gui.SS_Form1.chkLabels.caption("Print Labels")
gui.SS_Form1.chkLabels.visible(True)
gui.SS_Form1.chkLabels.size(1800,300)
gui.SS_Form1.chkLabels.zorder(0)
gui.SS_Form1.chkLabels.position(100,1395)
gui.SS_Form1.chkLabels.enabled(True)
gui.SS_Form1.chkLabels.alignment(0)
gui.SS_Form1.chkLabels.fontname("Arial")
gui.SS_Form1.chkLabels.fontsize(8)
gui.SS_Form1.chkLabels.defaultvalue("")
gui.SS_Form1.chkLabels.controlgroup(0)


gui.Ncell_Trumpf_Interface..create
gui.Ncell_Trumpf_Interface..caption("Ncell / Trumpf Interface to GSS")
gui.Ncell_Trumpf_Interface..size(7650,7845)
gui.Ncell_Trumpf_Interface..minx(0)
gui.Ncell_Trumpf_Interface..miny(0)
gui.Ncell_Trumpf_Interface..position(0,0)
gui.Ncell_Trumpf_Interface..event(unload,Unload)
gui.Ncell_Trumpf_Interface..alwaysontop(False)
gui.Ncell_Trumpf_Interface..fontname("Arial")
gui.Ncell_Trumpf_Interface..fontsize(7)
gui.Ncell_Trumpf_Interface..forecolor(0)
gui.Ncell_Trumpf_Interface..fontstyle(,,,,)
gui.Ncell_Trumpf_Interface..BackColor(-2147483633)
gui.Ncell_Trumpf_Interface..controlbox(True)
gui.Ncell_Trumpf_Interface..maxbutton(False)
gui.Ncell_Trumpf_Interface..minbutton(False)
gui.Ncell_Trumpf_Interface..mousepointer(0)
gui.Ncell_Trumpf_Interface..moveable(True)
gui.Ncell_Trumpf_Interface..sizeable(False)
gui.Ncell_Trumpf_Interface..ShowInTaskBar(True)
gui.Ncell_Trumpf_Interface..titlebar(True)
gui.Ncell_Trumpf_Interface.TabNest.create(tab)
gui.Ncell_Trumpf_Interface.TabNest.tabs(2)
gui.Ncell_Trumpf_Interface.TabNest.tabsperrow(2)
gui.Ncell_Trumpf_Interface.TabNest.settab(0)
gui.Ncell_Trumpf_Interface.TabNest.caption("Trumpf")
gui.Ncell_Trumpf_Interface.TabNest.settab(1)
gui.Ncell_Trumpf_Interface.TabNest.caption("Ncell")
gui.Ncell_Trumpf_Interface.TabNest.size(7425,6830)
gui.Ncell_Trumpf_Interface.TabNest.position(0,0)
gui.Ncell_Trumpf_Interface.TabNest.visible(True)
gui.Ncell_Trumpf_Interface.TabNest.fontname("Arial")
gui.Ncell_Trumpf_Interface.TabNest.fontsize(7)
gui.Ncell_Trumpf_Interface.TabNest.event(click,tabnest_click)
gui.Ncell_Trumpf_Interface.gsfgTTime.create(gsflexgrid)
gui.Ncell_Trumpf_Interface.gsfgTTime.FixedRows(0)
gui.Ncell_Trumpf_Interface.gsfgTTime.FixedCols(0)
gui.Ncell_Trumpf_Interface.gsfgTTime.visible(True)
gui.Ncell_Trumpf_Interface.gsfgTTime.size(7035,1600)
gui.Ncell_Trumpf_Interface.gsfgTTime.zorder(0)
gui.Ncell_Trumpf_Interface.gsfgTTime.position(50,940)
gui.Ncell_Trumpf_Interface.gsfgTTime.enabled(True)
gui.Ncell_Trumpf_Interface.gsfgTTime.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.gsfgTTime.event(mousedown,gsfgTimeMouseDown)
gui.Ncell_Trumpf_Interface.gsfgTTime.event(posttextmatrix,gsfgTimePostText)
gui.Ncell_Trumpf_Interface.gsfgTTime.event(lostfocus,gsfgTimePostText)
gui.Ncell_Trumpf_Interface.gsfgTTime.event(listexit,gsfgListExit)
gui.Ncell_Trumpf_Interface.lbl3.create(label,"Trumpf Nest ID:",True,1065,300,1,50,210,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl3.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.lbl3.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl3.controlgroup(0)
gui.Ncell_Trumpf_Interface.cmboTNestID.create(combobox)
gui.Ncell_Trumpf_Interface.cmboTNestID.text("")
gui.Ncell_Trumpf_Interface.cmboTNestID.visible(True)
gui.Ncell_Trumpf_Interface.cmboTNestID.size(1815,330)
gui.Ncell_Trumpf_Interface.cmboTNestID.zorder(0)
gui.Ncell_Trumpf_Interface.cmboTNestID.position(50,440)
gui.Ncell_Trumpf_Interface.cmboTNestID.enabled(False)
gui.Ncell_Trumpf_Interface.cmboTNestID.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.cmboTNestID.fontname("Arial")
gui.Ncell_Trumpf_Interface.cmboTNestID.fontsize(7)
gui.Ncell_Trumpf_Interface.cmboTNestID.event(click,cmbotnestid_click)
gui.Ncell_Trumpf_Interface.cmboTNestID.defaultvalue("")
gui.Ncell_Trumpf_Interface.cmboTNestID.controlgroup(0)
gui.Ncell_Trumpf_Interface.lbl5.create(label,"Time",True,495,300,1,50,760,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl5.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.lbl5.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl5.controlgroup(0)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.create(gsflexgrid)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.FixedRows(0)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.FixedCols(0)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.visible(True)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.size(7035,1600)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.zorder(0)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.position(50,2840)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.enabled(True)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.event(lostfocus,gsfgLostFocus)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.event(listexit,gsfgListExit)
gui.Ncell_Trumpf_Interface.gsfgTMaterial.event(commandclick,gsfgCmd_Click)
gui.Ncell_Trumpf_Interface.gsfgTDrop.create(gsflexgrid)
gui.Ncell_Trumpf_Interface.gsfgTDrop.FixedRows(0)
gui.Ncell_Trumpf_Interface.gsfgTDrop.FixedCols(0)
gui.Ncell_Trumpf_Interface.gsfgTDrop.visible(True)
gui.Ncell_Trumpf_Interface.gsfgTDrop.size(7050,1600)
gui.Ncell_Trumpf_Interface.gsfgTDrop.zorder(0)
gui.Ncell_Trumpf_Interface.gsfgTDrop.position(50,4655)
gui.Ncell_Trumpf_Interface.gsfgTDrop.enabled(True)
gui.Ncell_Trumpf_Interface.gsfgTDrop.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.gsfgTDrop.event(posttextmatrix,gsfgtdrop_posttextmatrix)
gui.Ncell_Trumpf_Interface.gsfgTDrop.event(lostfocus,gsfgLostFocus)
gui.Ncell_Trumpf_Interface.gsfgTDrop.event(cellenter,gsfgtdrop_cellenter)
gui.Ncell_Trumpf_Interface.gsfgTDrop.event(listexit,gsfgListExit)
gui.Ncell_Trumpf_Interface.gsfgTDrop.event(commandclick,gsfgCmd_Click)
gui.Ncell_Trumpf_Interface.lbl7.create(label,"Material",True,930,255,1,50,2640,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl7.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.lbl7.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl7.controlgroup(0)
gui.Ncell_Trumpf_Interface.lbl8.create(label,"Drop",True,690,255,1,50,4440,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl8.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.lbl8.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl8.controlgroup(0)
gui.Ncell_Trumpf_Interface.lblTSheets.create(label,"Total Sheets: ",True,1935,255,1,1400,2640,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lblTSheets.parent("tabnest",0)
gui.Ncell_Trumpf_Interface.lblTSheets.defaultvalue("")
gui.Ncell_Trumpf_Interface.lblTSheets.controlgroup(0)
gui.Ncell_Trumpf_Interface.cmdClear.create(button)
gui.Ncell_Trumpf_Interface.cmdClear.caption("Clear")
gui.Ncell_Trumpf_Interface.cmdClear.visible(True)
gui.Ncell_Trumpf_Interface.cmdClear.size(900,375)
gui.Ncell_Trumpf_Interface.cmdClear.zorder(0)
gui.Ncell_Trumpf_Interface.cmdClear.position(100,6900)
gui.Ncell_Trumpf_Interface.cmdClear.enabled(True)
gui.Ncell_Trumpf_Interface.cmdClear.fontname("Arial")
gui.Ncell_Trumpf_Interface.cmdClear.fontsize(7)
gui.Ncell_Trumpf_Interface.cmdClear.event(click,cmdclear_click)
gui.Ncell_Trumpf_Interface.cmdClear.defaultvalue("")
gui.Ncell_Trumpf_Interface.cmdClear.controlgroup(0)
gui.Ncell_Trumpf_Interface.cmdPost.create(button)
gui.Ncell_Trumpf_Interface.cmdPost.caption("Post")
gui.Ncell_Trumpf_Interface.cmdPost.visible(True)
gui.Ncell_Trumpf_Interface.cmdPost.size(900,375)
gui.Ncell_Trumpf_Interface.cmdPost.zorder(0)
gui.Ncell_Trumpf_Interface.cmdPost.position(3175,6900)
gui.Ncell_Trumpf_Interface.cmdPost.enabled(True)
gui.Ncell_Trumpf_Interface.cmdPost.fontname("Arial")
gui.Ncell_Trumpf_Interface.cmdPost.fontsize(7)
gui.Ncell_Trumpf_Interface.cmdPost.event(click,cmdpost_click)
gui.Ncell_Trumpf_Interface.cmdPost.defaultvalue("")
gui.Ncell_Trumpf_Interface.cmdPost.controlgroup(0)
gui.Ncell_Trumpf_Interface.cmdFlexSched.create(button)
gui.Ncell_Trumpf_Interface.cmdFlexSched.caption("Re-Print")
gui.Ncell_Trumpf_Interface.cmdFlexSched.visible(True)
gui.Ncell_Trumpf_Interface.cmdFlexSched.size(900,375)
gui.Ncell_Trumpf_Interface.cmdFlexSched.zorder(0)
gui.Ncell_Trumpf_Interface.cmdFlexSched.position(2160,6900)
gui.Ncell_Trumpf_Interface.cmdFlexSched.enabled(True)
gui.Ncell_Trumpf_Interface.cmdFlexSched.fontname("Arial")
gui.Ncell_Trumpf_Interface.cmdFlexSched.fontsize(7)
gui.Ncell_Trumpf_Interface.cmdFlexSched.event(click,cmdflexsched_click)
gui.Ncell_Trumpf_Interface.cmdFlexSched.defaultvalue("")
gui.Ncell_Trumpf_Interface.cmdFlexSched.controlgroup(0)
gui.Ncell_Trumpf_Interface.lbl6.create(label,"Ncell Nest ID:",True,915,255,1,50,210,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl6.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.lbl6.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl6.controlgroup(0)
gui.Ncell_Trumpf_Interface.cmboNNestID.create(combobox)
gui.Ncell_Trumpf_Interface.cmboNNestID.text("")
gui.Ncell_Trumpf_Interface.cmboNNestID.visible(True)
gui.Ncell_Trumpf_Interface.cmboNNestID.size(1815,330)
gui.Ncell_Trumpf_Interface.cmboNNestID.zorder(0)
gui.Ncell_Trumpf_Interface.cmboNNestID.position(50,440)
gui.Ncell_Trumpf_Interface.cmboNNestID.enabled(True)
gui.Ncell_Trumpf_Interface.cmboNNestID.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.cmboNNestID.fontname("Arial")
gui.Ncell_Trumpf_Interface.cmboNNestID.fontsize(7)
gui.Ncell_Trumpf_Interface.cmboNNestID.event(click,cmbonnestid_click)
gui.Ncell_Trumpf_Interface.cmboNNestID.defaultvalue("")
gui.Ncell_Trumpf_Interface.cmboNNestID.controlgroup(0)
gui.Ncell_Trumpf_Interface.lbl9.create(label,"Time",True,500,255,1,50,760,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl9.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.lbl9.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl9.controlgroup(0)
gui.Ncell_Trumpf_Interface.gsfgNTime.create(gsflexgrid)
gui.Ncell_Trumpf_Interface.gsfgNTime.FixedRows(0)
gui.Ncell_Trumpf_Interface.gsfgNTime.FixedCols(0)
gui.Ncell_Trumpf_Interface.gsfgNTime.visible(True)
gui.Ncell_Trumpf_Interface.gsfgNTime.size(7140,1600)
gui.Ncell_Trumpf_Interface.gsfgNTime.zorder(0)
gui.Ncell_Trumpf_Interface.gsfgNTime.position(50,940)
gui.Ncell_Trumpf_Interface.gsfgNTime.enabled(True)
gui.Ncell_Trumpf_Interface.gsfgNTime.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.gsfgNTime.event(mousedown,gsfgTimeMouseDown)
gui.Ncell_Trumpf_Interface.gsfgNTime.event(posttextmatrix,gsfgTimePostText)
gui.Ncell_Trumpf_Interface.gsfgNTime.event(lostfocus,gsfgTimePostText)
gui.Ncell_Trumpf_Interface.gsfgNTime.event(listexit,gsfgListExit)
gui.Ncell_Trumpf_Interface.lbl10.create(label,"Material",True,1000,255,1,95,2745,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl10.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.lbl10.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl10.controlgroup(0)
gui.Ncell_Trumpf_Interface.lblNSheets.create(label,"Total Sheets: ",True,1965,255,1,1320,2740,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lblNSheets.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.lblNSheets.defaultvalue("")
gui.Ncell_Trumpf_Interface.lblNSheets.controlgroup(0)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.create(gsflexgrid)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.FixedRows(0)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.FixedCols(0)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.visible(True)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.size(7155,1435)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.zorder(0)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.position(50,3005)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.enabled(True)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(posttextmatrix,gsfgtmaterial_posttextmatrix)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(lostfocus,gsfgLostFocus)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(listexit,gsfgListExit)
gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(commandclick,gsfgCmd_Click)
gui.Ncell_Trumpf_Interface.lbl12.create(label,"Drop",True,1000,255,1,50,4440,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl12.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.lbl12.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl12.controlgroup(0)
gui.Ncell_Trumpf_Interface.gsfgNDrop.create(gsflexgrid)
gui.Ncell_Trumpf_Interface.gsfgNDrop.FixedRows(0)
gui.Ncell_Trumpf_Interface.gsfgNDrop.FixedCols(0)
gui.Ncell_Trumpf_Interface.gsfgNDrop.visible(True)
gui.Ncell_Trumpf_Interface.gsfgNDrop.size(7170,1600)
gui.Ncell_Trumpf_Interface.gsfgNDrop.zorder(0)
gui.Ncell_Trumpf_Interface.gsfgNDrop.position(50,4655)
gui.Ncell_Trumpf_Interface.gsfgNDrop.enabled(True)
gui.Ncell_Trumpf_Interface.gsfgNDrop.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.gsfgNDrop.event(posttextmatrix,gsfgndrop_posttextmatrix)
gui.Ncell_Trumpf_Interface.gsfgNDrop.event(lostfocus,gsfgLostFocus)
gui.Ncell_Trumpf_Interface.gsfgNDrop.event(cellenter,gsfgndrop_cellenter)
gui.Ncell_Trumpf_Interface.gsfgNDrop.event(listexit,gsfgListExit)
gui.Ncell_Trumpf_Interface.gsfgNDrop.event(commandclick,gsfgCmd_Click)
gui.Ncell_Trumpf_Interface.cmdRefresh.create(button)
gui.Ncell_Trumpf_Interface.cmdRefresh.caption("Refresh")
gui.Ncell_Trumpf_Interface.cmdRefresh.visible(True)
gui.Ncell_Trumpf_Interface.cmdRefresh.size(900,375)
gui.Ncell_Trumpf_Interface.cmdRefresh.zorder(0)
gui.Ncell_Trumpf_Interface.cmdRefresh.position(1145,6900)
gui.Ncell_Trumpf_Interface.cmdRefresh.enabled(True)
gui.Ncell_Trumpf_Interface.cmdRefresh.fontname("Arial")
gui.Ncell_Trumpf_Interface.cmdRefresh.fontsize(7)
gui.Ncell_Trumpf_Interface.cmdRefresh.event(click,cmdrefresh_click)
gui.Ncell_Trumpf_Interface.cmdRefresh.defaultvalue("")
gui.Ncell_Trumpf_Interface.cmdRefresh.controlgroup(0)
gui.Ncell_Trumpf_Interface.txtLotMaterial.create(textbox,"",True,1800,300,0,3890,2640,True,0,Arial,7,-2147483643,1)
gui.Ncell_Trumpf_Interface.txtLotMaterial.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.txtLotMaterial.defaultvalue("")
gui.Ncell_Trumpf_Interface.txtLotMaterial.controlgroup(0)
gui.Ncell_Trumpf_Interface.lbl11.create(label,"Lot:",True,315,255,1,3560,2670,True,0,Arial,7,-2147483633,0)
gui.Ncell_Trumpf_Interface.lbl11.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.lbl11.defaultvalue("")
gui.Ncell_Trumpf_Interface.lbl11.controlgroup(0)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.create(button)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.caption("View Qty")
gui.Ncell_Trumpf_Interface.cmdViewLotBin.visible(True)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.size(1185,315)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.zorder(0)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.position(5870,2610)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.enabled(True)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.parent("tabnest",1)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.fontname("Arial")
gui.Ncell_Trumpf_Interface.cmdViewLotBin.fontsize(7)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.event(click,cmdviewlotbin_click)
gui.Ncell_Trumpf_Interface.cmdViewLotBin.defaultvalue("")
gui.Ncell_Trumpf_Interface.cmdViewLotBin.controlgroup(0)
gui.Ncell_Trumpf_Interface.cmboTNestID.tabstop(True)
gui.Ncell_Trumpf_Interface.cmboTNestID.tabindex(1)


gui.F_LotQtys..create
gui.F_LotQtys..caption("View Lot Quantities")
gui.F_LotQtys..size(5790,5475)
gui.F_LotQtys..minx(0)
gui.F_LotQtys..miny(0)
gui.F_LotQtys..position(0,0)
gui.F_LotQtys..event(unload,f_lotqtys_unload)
gui.F_LotQtys..alwaysontop(False)
gui.F_LotQtys..fontname("Arial")
gui.F_LotQtys..fontsize(8)
gui.F_LotQtys..forecolor(0)
gui.F_LotQtys..fontstyle(,,,,)
gui.F_LotQtys..BackColor(-2147483633)
gui.F_LotQtys..controlbox(True)
gui.F_LotQtys..maxbutton(False)
gui.F_LotQtys..minbutton(False)
gui.F_LotQtys..mousepointer(0)
gui.F_LotQtys..moveable(True)
gui.F_LotQtys..sizeable(False)
gui.F_LotQtys..ShowInTaskBar(True)
gui.F_LotQtys..titlebar(True)
gui.F_LotQtys.gsflexgrid1.create(gsflexgrid)
gui.F_LotQtys.gsflexgrid1.FixedRows(0)
gui.F_LotQtys.gsflexgrid1.FixedCols(0)
gui.F_LotQtys.gsflexgrid1.visible(True)
gui.F_LotQtys.gsflexgrid1.size(5325,4245)
gui.F_LotQtys.gsflexgrid1.zorder(0)
gui.F_LotQtys.gsflexgrid1.position(100,425)
gui.F_LotQtys.gsflexgrid1.enabled(True)
gui.F_LotQtys.lblPart.create(label,"Part:",True,480,255,1,200,170,True,0,Arial,8,-2147483633,0)
gui.F_LotQtys.lblPart.defaultvalue("")
gui.F_LotQtys.lblPart.controlgroup(0)
gui.F_LotQtys.lbl2.create(label,"",True,2760,255,1,620,170,True,0,Arial,8,15790320,0)
gui.F_LotQtys.lbl2.fontstyle(True,False,False,False)
gui.F_LotQtys.lbl2.defaultvalue("")
gui.F_LotQtys.lbl2.controlgroup(0)


Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start

Variable.UDT.uTime.Define("Job",String,TJOB)
Variable.UDT.uTime.Define("NestID",String,NESTID)
Variable.UDT.uTime.Define("Qty",Float,TQTY)
Variable.UDT.uTime.Define("Time",Float,TTIME)
Variable.UDT.uTime.Define("Issue",Float,TISSUE)
Variable.UDT.uTime.Define("Employee",String,TEMPLOYEE)
Variable.UDT.uTime.Define("ID",Long,ID)
Variable.UDT.uTime.Define("WC",String)
Variable.UDT.uMaterial.Define("NestID",String,NESTID)
Variable.UDT.uMaterial.Define("Material",String,MMATERIAL)
Variable.UDT.uMaterial.Define("Qty",Float,MQTY)
Variable.UDT.uMaterial.Define("Lot",String)
Variable.UDT.uMaterial.Define("ID",Long,ID)
Variable.UDT.uMaterial.Define("Job",String)
Variable.UDT.uMaterial.Define("Area",Float,MAREA)
Variable.UDT.uMaterial.Define("Bin",String)
Variable.UDT.uMaterial.Define("Style",Long)
Variable.UDT.uMaterial.Define("LotDDL",String)
Variable.UDT.uMaterial.Define("Serial",String)
Variable.UDT.uDrop.Define("NestID",String,NESTID)
Variable.UDT.uDrop.Define("Material",String,DMATERIAL)
Variable.UDT.uDrop.Define("Size",String,DSIZE)
Variable.UDT.uDrop.Define("Lot",String)
Variable.UDT.uDrop.Define("ID",Long,ID)
Variable.UDT.uDrop.Define("Job",String,DJOB)
Variable.UDT.uDrop.Define("Bin",String)
Variable.UDT.uDrop.Define("Serial",String)
Variable.UDT.uDrop.Define("Style",Long)
Variable.UDT.uDrop.Define("LotDDL",String)
Variable.uGlobal.uDrop.Declare("uDrop")
Variable.uGlobal.uMaterial.Declare("uMaterial")
Variable.uGlobal.uTime.Declare("uTime")
Variable.UDT.uComplete.Define("DMaterial",String,DMATERIAL)
Variable.UDT.uComplete.Define("DSize",String,DSIZE)
Variable.UDT.uComplete.Define("Job",String,JOB)
Variable.UDT.uComplete.Define("MMaterial",String,MMATERIAL)
Variable.UDT.uComplete.Define("MQty",Float,MQTY)
Variable.UDT.uComplete.Define("NestID",String,NESTID)
Variable.UDT.uComplete.Define("Seq",String,SEQUENCE)
Variable.UDT.uComplete.Define("Suffix",String,SUFFIX)
Variable.UDT.uComplete.Define("TQty",Float,TQTY)
Variable.UDT.uComplete.Define("TTime",Float,TTIME)
Variable.UDT.uComplete.Define("TWorkOrder",String,TJOB)
Variable.UDT.uComplete.Define("DLot",String,DLOT)
Variable.UDT.uComplete.Define("MLot",String,MLOT)
Variable.UDT.uComplete.Define("TEmployee",String,TEMPLOYEE)
Variable.UDT.uComplete.Define("TIssue",Float,TISSUE)
Variable.UDT.uComplete.Define("ID",Long,ID)
Variable.UDT.uComplete.Define("DJob",String,DJob)
Variable.UDT.uComplete.Define("MJob",String,MJOB)
Variable.UDT.uComplete.Define("MArea",Float,MAREA)
Variable.UDT.uComplete.Define("EndTime",String)
Variable.UDT.uComplete.Define("StartTime",String)
Variable.UDT.uComplete.Define("MBin",String,MBIN)
Variable.UDT.uComplete.Define("DBin",String,DBIN)
Variable.UDT.uComplete.Define("TWC",String)
Variable.UDT.uComplete.Define("MSerial",String,MSERIAL)
Variable.UDT.uComplete.Define("DSerial",String,DSERIAL)
Variable.uGlobal.uComplete.Declare("uComplete")
Variable.Global.sReadPath.Declare(String)
Variable.Global.iRow.Declare(Long,-1)
Variable.Global.iColumn.Declare(Long,-1)
Variable.Global.sControlName.Declare(String)
Variable.UDT.uIssue.Define("Material",String)
Variable.UDT.uIssue.Define("Job",String)
Variable.UDT.uIssue.Define("Suffix",String)
Variable.UDT.uIssue.Define("Seq",String)
Variable.UDT.uIssue.Define("Issue",Float)
Variable.UDT.uIssue.Define("Lot",String)
Variable.UDT.uIssue.Define("Qty",Float)
Variable.UDT.uIssue.Define("Bin",String)
Variable.UDT.uIssue.Define("Serial",String)
Variable.uGlobal.uIssue.Declare("uIssue")
Variable.Global.bRead.Declare(Boolean,False)
Variable.UDT.uIssueDrop.Define("Material",String,"Material")
Variable.UDT.uIssueDrop.Define("Lot",String,"Lot")
Variable.UDT.uIssueDrop.Define("Bin",String,"Bin")
Variable.UDT.uIssueDrop.Define("Qty",Float,"Qty_On_Label")
Variable.UDT.uIssueDrop.Define("Job",String,"Job")
Variable.UDT.uIssueDrop.Define("Suffix",String,"Suffix")
Variable.UDT.uIssueDrop.Define("Seq",String,"Seq")
Variable.UDT.uIssueDrop.Define("Size",String,"Size")
Variable.UDT.uIssueDrop.Define("Serial",String,"Serial")
Variable.UDT.uIssueDrop.Define("Inv_UM",String,"Inv_UM")
Variable.UDT.uIssueDrop.Define("User_ID",String,"User_ID")
Variable.UDT.uIssueDrop.Define("BirunID",Long,"BirunID")
Variable.UDT.uIssueDrop.Define("Lbl_Create_Date",Date,"Lbl_Create_Date")
Variable.uGlobal.uIssueDrop.Declare("uIssueDrop")
Variable.UDT.uIssueJob.Define("Job",String)
Variable.UDT.uIssueJob.Define("Suffix",String)
Variable.UDT.uIssueJob.Define("IssueAmt",Float)
Variable.UDT.uIssueJob.Define("Lot",String)
Variable.UDT.uIssueJob.Define("Bin",String)
Variable.UDT.uIssueJob.Define("Material",String)
Variable.UDT.uIssueJob.Define("Seq",String)
Variable.UDT.uIssueJob.Define("Serial",String)
Variable.uGlobal.uIssueJob.Declare("uIssueJob")
Variable.Global.sTBackup.Declare(String)
Variable.Global.sNBackup.Declare(String)
Variable.Global.iPrevDropSize.Declare(String)
Variable.Global.bCont.Declare(Boolean,False)
Variable.Global.sDropBin.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sCCC.Declare(String)

F.Intrinsic.String.Build("GLOBAL_{0}",V.Caller.CompanyCode,V.Local.sCCC)
F.ODBC.Connection!Con.OpenConnection(V.Local.sCCC,"Master","master")


'F.ODBC.Connection!Con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)

'sets the first tab as the open tab on startup
Gui.Ncell_Trumpf_Interface.TabNest.SetTab(0)
'Gui.Ncell_Trumpf_Interface.TabNest.TabVisible(0,False)


'call sub to read where Trumpf and Ncell locations are from Global\\Files\\GSS_TRUMPF.dat and Global\\Files\\Ncell.dat
'READPATH is to get the export files
F.Intrinsic.Control.CallSub(Filepath,"DAT","Trumpf")

'call sub to load the Trumpf data
F.Intrinsic.Control.CallSub(Filelist)

'call sub to read where Ncelll locations are
F.Intrinsic.Control.CallSub(Filepath,"DAT","Ncell")

'call sub to load the Ncell data
F.Intrinsic.Control.CallSub(Filelist)

'populate the Trumpf drop down list
F.Intrinsic.Control.CallSub(Popdropdown)


Gui.Ncell_Trumpf_Interface.TabNest.SetTab(1)

Gui.Ncell_Trumpf_Interface..Show


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.Main.End

Program.Sub.Unload.Start
F.Intrinsic.Control.SetErrorHandler("Form1_Unload_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.ODBC.Connection!Con.Close
F.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Form1_Unload_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End

Function.Intrinsic.Control.EndIf

Program.Sub.Unload.End

Program.Sub.FilePath.Start
F.Intrinsic.Control.SetErrorHandler("FilePath_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sFilePath.Declare(String)
V.Local.sDATFile.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sReadPath.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sLine.Declare(String)
V.Local.sBackup.Declare(String)
V.Local.sHold.Declare(String)

F.Intrinsic.Control.If(V.Args.DAT,=,"Trumpf")
	F.Intrinsic.String.Build("{0}\GSS_TRUMPF.dat",V.Caller.FilesDir,V.Local.sFilePath)
F.Intrinsic.Control.ElseIf(V.Args.DAT,=,"Ncell")
	F.Intrinsic.String.Build("{0}\NCELL.dat",V.Caller.FilesDir,V.Local.sFilePath)
F.Intrinsic.Control.EndIf
F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,False)
	F.Intrinsic.UI.Msgbox("File Save Path Not Found.")
	F.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.Else
	F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sDATFile)
F.Intrinsic.Control.EndIf


F.Intrinsic.String.Split(V.Local.sDATFile,V.Ambient.NewLine,V.Local.sLine)
F.Intrinsic.Control.For(V.Local.iFor,V.Local.sLine.LBound,V.Local.sLine.UBound,1)
	F.Intrinsic.String.Split(V.Local.sLine(v.Local.iFor),"::",V.Local.sHold)
	V.Local.sHold.RedimPreserve(0,1)
	F.Intrinsic.Control.SelectCase(V.Local.sHold(0))
	F.Intrinsic.Control.Case("READ")
		V.Local.sReadPath.Set(V.Local.sHold(1))
		F.Intrinsic.Control.ExitFor(V.Local.iFor)
	F.Intrinsic.Control.Case("COMPLETE")
		V.Local.sReadPath.Set(V.Local.sHold(1))
		F.Intrinsic.Control.ExitFor(V.Local.iFor)
	F.Intrinsic.Control.EndSelect
F.Intrinsic.Control.Next(V.Local.iFor)

F.Intrinsic.Control.If(V.Local.sReadPath.right1,<>,"\")
	F.Intrinsic.String.Concat(V.Local.sReadPath,"\",V.Local.sReadPath)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Concat(V.Local.sReadPath,"Backup",V.Local.sBackup)
F.Intrinsic.File.Exists(V.Local.sBackup,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,False)
	F.Intrinsic.File.CreateDir(V.Local.sBackup)
F.Intrinsic.Control.EndIf

'set global backkup for trump and ncell
F.Intrinsic.Control.If(V.Args.DAT,=,"Trumpf")
	V.Global.sTBackup.Set(V.Local.sBackup)
F.Intrinsic.Control.Else
	V.Global.sNBackup.Set(V.Local.sBackup)
F.Intrinsic.Control.EndIf

V.Global.sReadPath.Set(V.Local.sReadPath)


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("FilePath_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.FilePath.End

Program.Sub.FileList.Start
F.Intrinsic.Control.SetErrorHandler("FileList_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sBckpPath.Declare(String)
V.Local.bState.Declare(Boolean)
V.Local.sFileList.Declare(String)
V.Local.sBysoftFile.Declare(String)
V.Local.sAttributes.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.iTimer.Declare(Long)
V.Local.sFileType.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.sFullName.Declare(String)
V.Local.sBackUp.Declare(String)
V.Local.sMsg.Declare(String)
V.Local.bContains.Declare(Boolean)

' path to move processed files
F.Intrinsic.String.Build("{0}Processed\",V.Global.sReadPath,V.Local.sBckpPath)
F.Intrinsic.File.DirExists(V.Local.sBckpPath,V.Local.bState)
F.Intrinsic.Control.If(V.Local.bState,=,False)
	F.Intrinsic.File.CreateDir(V.Local.sBckpPath)
F.Intrinsic.Control.EndIf

' check for files in read path
F.Intrinsic.File.GetFileList(V.Global.sReadPath,0,V.Local.sFileList)
F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sBysoftFile)

' if no files are found, alert user and exit
F.Intrinsic.Control.If(V.Local.sBysoftFile.Trim,=,"")
'	F.Intrinsic.UI.Msgbox("No Files To Load")
'	F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.ExitSub

' could have multiple feedback files.  move file before reading.
F.Intrinsic.Control.Else
	V.Local.bState.Set(True)
	F.Intrinsic.Control.For(V.Local.iFor,V.Local.sBysoftFile.LBound,V.Local.sBysoftFile.UBound,1)
		' look for the xml file and make sure it is not locked
		F.Intrinsic.String.Split(V.Local.sBysoftFile(v.Local.iFor),".",V.Local.sFileType)

		F.Intrinsic.Control.If(V.Local.sFileType(v.Local.sFileType.UBound).UCase,=,"XML")
			F.Intrinsic.Control.DoUntil(V.Local.bState,=,False)
				F.Intrinsic.File.IsFileLocked(V.Local.sBysoftFile(v.Local.iFor),V.Local.bState)
				F.Intrinsic.UI.Sleep(1)
				F.Intrinsic.Math.Add(V.Local.iTimer,1,V.Local.iTimer)
				' give the file 10 seconds to be released, then alert user and move to next file.
				F.Intrinsic.Control.If(V.Local.iTimer,=,11)
					F.Intrinsic.String.Build("File {0} is in use.{1}Unable to read file.",V.Local.sBysoftFile(v.Local.iFor),V.Ambient.NewLine,V.Local.sMsg)
					F.Intrinsic.UI.Msgbox(V.Local.sMsg)
'					f.Intrinsic.Control.CallSub(ss_form1_unload)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Loop

			' didn't unload, move file
			F.Intrinsic.String.Build("{0}{1}",V.Global.sReadPath,V.Local.sBysoftFile(v.Local.iFor),V.Local.sFullName)

			'read xml file
			F.Intrinsic.Control.CallSub(Readxml,"ERPFILE",V.Local.sFullName)

			'checks to see if the file was read
			'if it was then move the file to backup
			F.Intrinsic.Control.If(V.Global.bRead,=,True)
		

				' append file with processed date and time
				F.Intrinsic.String.Build("{0}_{1}.bkp",V.Local.sFileType(0),V.Ambient.Now,V.Local.sBackUp)
				f.Intrinsic.File.MakeFilenameFriendly(v.Local.sBackUp,v.Local.sBackUp)
				F.Intrinsic.String.Build("{0}{1}",V.Local.sBckpPath,V.Local.sBackUp,V.Local.sBackUp)
				F.Intrinsic.File.MoveFile(V.Local.sFullName,V.Local.sBackUp,V.Local.iRet)

				' make sure move was successful
				F.Intrinsic.Control.If(V.Local.iRet,=,0)
					V.Local.bState.Set(False)
					' if unable to move the file, alert user and unload
					F.Intrinsic.UI.Msgbox("Unable to read or move file")
					F.Intrinsic.Debug.SetLA(V.Local.sBysoftFile(v.Local.iFor))
					F.Intrinsic.Debug.SetLA(V.Local.sBckpPath)
					F.Intrinsic.Control.GoTo("NEXT")
'					f.Intrinsic.Control.ExitFor(v.Local.iFor)
				F.Intrinsic.Control.Else
					' make sure a file was found, if not alert user and unload
					F.Intrinsic.Control.If(V.Local.sBackUp.Trim,=,"")
						F.Intrinsic.UI.Msgbox("File not found")
						F.Intrinsic.Control.GoTo("NEXT")
						'f.Intrinsic.Control.CallSub(ss_form1_unload)
					F.Intrinsic.Control.EndIf
	
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf

		'its a csv so read ncell
		F.Intrinsic.Control.Else

			F.Intrinsic.Control.DoUntil(V.Local.bState,=,False)
				F.Intrinsic.File.IsFileLocked(V.Local.sBysoftFile(v.Local.iFor),V.Local.bState)
				F.Intrinsic.UI.Sleep(1)
				F.Intrinsic.Math.Add(V.Local.iTimer,1,V.Local.iTimer)
				' give the file 10 seconds to be released, then alert user and move to next file.
				F.Intrinsic.Control.If(V.Local.iTimer,=,11)
					F.Intrinsic.String.Build("File {0} is in use.{1}Unable to read file.",V.Local.sBysoftFile(v.Local.iFor),V.Ambient.NewLine,V.Local.sMsg)
					F.Intrinsic.UI.Msgbox(V.Local.sMsg)
'					f.Intrinsic.Control.CallSub(ss_form1_unload)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Loop

			'make sure it is an Export file and not a Commit file
			F.Intrinsic.String.IsInString(V.Local.sBysoftFile(v.Local.iFor),"Export",True,V.Local.bContains)
			F.Intrinsic.Control.If(V.Local.bContains,=,True)
				F.Intrinsic.String.Build("{0}{1}",V.Global.sReadPath,V.Local.sBysoftFile(v.Local.iFor),V.Local.sFullName)
				'read ncell csv file
				F.Intrinsic.Control.CallSub(Readncell,"ERPFILE",V.Local.sFullName)
			
				' append file with processed date and time
				F.Intrinsic.String.Build("{0}_{1}.bkp",V.Local.sFileType(0),V.Ambient.Now,V.Local.sBackUp)
				f.Intrinsic.File.MakeFilenameFriendly(v.Local.sBackUp,v.Local.sBackUp)
				F.Intrinsic.String.Build("{0}{1}",V.Local.sBckpPath,V.Local.sBackUp,V.Local.sBackUp)
				F.Intrinsic.File.MoveFile(V.Local.sFullName,V.Local.sBackUp,V.Local.iRet)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.Label("NEXT")
	F.Intrinsic.Control.Next(V.Local.iFor)
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("FileList_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.FileList.End

Program.Sub.ReadXML.Start
F.Intrinsic.Control.SetErrorHandler("ReadXML_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sDoc.Declare(String)
V.Local.bEOF.Declare(Boolean)
V.Local.sValue.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sNestID.Declare(String)
V.Local.sJob.Declare(String)
V.Local.iCountTime.Declare(Long)
V.Local.iCountMaterial.Declare(Long)
V.Local.iCountDrop.Declare(Long)
V.Local.iCount.Declare(Long)
V.Local.fTime.Declare(Float)
V.Local.fRemLength.Declare(Float)
V.Local.fRemWidth.Declare(Float)
V.Local.fQty.Declare(Float)
V.Local.sTemp.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sOrderName.Declare(String)
V.Local.fRuns.Declare(Float)
V.Local.sMaterial.Declare(String)
V.Local.sOrdinal.Declare(String)
V.Local.sSize.Declare(String)
V.Local.sType.Declare(String)
V.Local.sBound.Declare(String)
V.Local.fTotalSheets.Declare(Float)
V.Local.fDropQty.Declare(Float)
V.Local.sJobSplit.Declare(String)
V.Local.sPart.Declare(String)
V.Local.fPartLength.Declare(Float)
V.Local.fPartWidth.Declare(Float)
V.Local.fIssueTotal.Declare(Float)
V.Local.sIssueTotal.Declare(String)
V.Local.fLength.Declare(Float)
V.Local.fWidth.Declare(Float)
V.Local.fArea.Declare(Float)
V.Local.fTemp.Declare(Float)
V.Local.fTotalArea.Declare(Float)
V.Static.iCount.Declare(Long)
V.Local.iDrop.Declare(Long)

V.uGlobal.uTime.Redim(-1,-1)
V.uGlobal.uMaterial.Redim(-1,-1)
V.uGlobal.uDrop.Redim(-1,-1)
V.uGlobal.uComplete.Redim(-1,-1)

V.uGlobal.uTime.Redim(0,0)
V.uGlobal.uMaterial.Redim(0,0)
V.uGlobal.uDrop.Redim(0,0)
V.uGlobal.uComplete.Redim(0,0)

F.Intrinsic.Math.Add(V.Static.iCount,1,V.Static.iCount)
F.Intrinsic.String.Build("Trumpf{0}",V.Static.iCount,V.Local.sDoc)
'V.Local.sDoc.Set("Trumpf")
'loads the xml document
F.Global.XML.LoadDocument(V.Local.sDoc,V.Args.ERPFILE,False,False,False,False)

'checks to see what the tag after PPSExport is and runs based on the file.
F.Global.XML.Query(V.Local.sDoc,"Type","/*/*",False)
F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Type","nodeName",V.Local.sType)

F.Intrinsic.Control.If(V.Local.sType,=,"JobFeedback")
	'set variable to true so it will process it
	V.Global.bRead.Set(True)
	'Reads JobExp#.xml
	'runs query on xml to grab all of the NestIDs in Jobname attribute of JobFeedback
	F.Global.XML.Query(V.Local.sDoc,"NestID","//JobFeedback/@Jobname",False)
	F.Intrinsic.Control.DoUntil(V.Local.bEOF,=,True)
		'loop through all of the nestids
		'read the value of Jobname and set it as NestID
		F.Global.xml.ReadNodeSetValue(V.Local.sDoc,"NestID","text",V.Local.sNestID)
		'using NestID create a new query to find all of the ManufacturingOrderNames
		F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder/@ManufacturingOrderName",V.Local.sNestID,V.Local.sSQL)
		F.Global.XML.Query(V.Local.sDoc,"OrderName",V.Local.sSQL,False)
		F.Intrinsic.Control.DoUntil(V.Local.bEOF,=,True)
			'loop through all of the ManufacturingOrderNames and grab the fields inside of each
			F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"OrderName","text",V.Local.sOrderName)

			'using the ManufacturingOrderName select the information for that single order
			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/NoOfRuns",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)
			F.Global.XML.Query(V.Local.sDoc,"Runs",V.Local.sSQL,True)
			'checks to see if there is a bound
			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Runs",V.Local.sBound)
			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
			F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
				'gets the number of runs for the jobs, this number will be multiplied by the quantity and time below
				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Runs","text",V.Local.fRuns)
				F.Intrinsic.Math.Add(V.Local.fTotalSheets,V.Local.fRuns,V.Local.fTotalSheets)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CloseSet(V.Local.sDoc,"Runs")

			'select Material
			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/Sheet/@SheetIdentNo",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)
			F.Global.XML.Query(V.Local.sDoc,"Sheet",V.Local.sSQL,True)
			'checks to see if there is a bound
			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Sheet",V.Local.sBound)
			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
			F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
				'gets the sheet name will be used for all material name later
				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Sheet","text",V.Local.sMaterial)
				F.Intrinsic.String.Split(V.Local.sMaterial,"_",V.Local.sMaterial)
				V.Local.sMaterial.RedimPreserve(0,0)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CloseSet(V.Local.sDoc,"Sheet")

			'select Material Length
			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/Sheet[@SheetIdentNo='{2}']/Dimensions/Length",V.Local.sNestID,V.Local.sOrderName,V.Local.sMaterial,V.Local.sSQL)
			F.Global.XML.Query(V.Local.sDoc,"MLength",V.Local.sSQL,True)
			'checks to see if there is a bound
			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"MLength",V.Local.sBound)
			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
			F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
				'gets the sheet name will be used for all material name later
				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"MLength","text",V.Local.fLength)
'				F.Intrinsic.String.Format(V.Local.fLength,"#.0000",V.Local.fLength)
'				F.Intrinsic.Math.Round(V.Local.fLength,4,V.Local.fLength)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CloseSet(V.Local.sDoc,"MLength")

			'select Material Width
			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/Sheet[@SheetIdentNo='{2}']/Dimensions/Width",V.Local.sNestID,V.Local.sOrderName,V.Local.sMaterial,V.Local.sSQL)
			F.Global.XML.Query(V.Local.sDoc,"MWidth",V.Local.sSQL,True)
			'checks to see if there is a bound
			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"MWidth",V.Local.sBound)
			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
			F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
				'gets the sheet name will be used for all material name later
				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"MWidth","text",V.Local.fWidth)
'				F.Intrinsic.String.Format(V.Local.fWidth,"#.0000",V.Local.fWidth)
'				F.Intrinsic.Math.Round(V.Local.fWidth,4,V.Local.fWidth)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CloseSet(V.Local.sDoc,"MWidth")

			'select remaining Length
			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/RemainingSheets/RemainingSheet/Dimensions/Length",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)
			F.Global.XML.Query(V.Local.sDoc,"RemLength",V.Local.sSQL)
			V.Local.fRemLength.Set(0)
			'checks to see if there is a bound
			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"RemLength",V.Local.sBound)
			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
			F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
				'gets the length of the remaining for that order
				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"RemLength","text",V.Local.fRemLength)
				F.Intrinsic.Math.Div(V.Local.fRemLength,25.4,V.Local.fRemLength)
'				F.Intrinsic.String.Format(V.Local.fRemLength,"#.0000",V.Local.fRemLength)
'				F.Intrinsic.Math.Round(V.Local.fRemLength,4,V.Local.fRemLength)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CloseSet(V.Local.sDoc,"RemLength")

			'select remaining Width
			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/RemainingSheets/RemainingSheet/Dimensions/Width",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)
			F.Global.XML.Query(V.Local.sDoc,"RemWidth",V.Local.sSQL)
			V.Local.fRemWidth.Set(0)
			'checks to see if there is a bound
			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"RemWidth",V.Local.sBound)
			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
			F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
				'gets the length of the remaining for that order
				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"RemWidth","text",V.Local.fRemWidth)
				F.Intrinsic.Math.Div(V.Local.fRemWidth,25.4,V.Local.fRemWidth)
'				F.Intrinsic.String.Format(V.Local.fRemWidth,"#.0000",V.Local.fRemWidth)
'				F.Intrinsic.Math.Round(V.Local.fRemWidth,4,V.Local.fRemWidth)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CloseSet(V.Local.sDoc,"RemWidth")
			
			'reset and set drop count this breakts it out of the loop
			V.Local.iDrop.Set(0)

			'select the jobs within this order and the part number
			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part/@OrderNo",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)
			F.Global.XML.Query(V.Local.sDoc,"Job",V.Local.sSQL,False)
			F.Intrinsic.Control.DoUntil(V.Local.bEOF,=,True)
				'loop through all of the Jobs on this ManufacturingOrder
				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Job","text",V.Local.sJob)
				
				'PART
'				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/@PartNo",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)
'				F.Global.XML.Query(V.Local.sDoc,"Part",V.Local.sSQL,True)
'				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Part","text",V.Local.sPart)
'				F.Global.XML.CloseSet(V.Local.sDoc,"Part")

				'using job get Time and Quantity
				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/TargetProcessingTimePerPiece",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)
				F.Global.XML.Query(V.Local.sDoc,"Time",V.Local.sSQL,True)
				V.Local.fTime.Set(0)
				'checks to see if there is a bound
				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Time",V.Local.sBound)
				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
				F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
					'get the time to process per piece time passed in minutes
					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Time","text",V.Local.fTime)
					'divide by 60 to get time in hours
					F.Intrinsic.Math.Div(V.Local.fTime,60,V.Local.fTime)
				F.Intrinsic.Control.EndIf
				F.Global.XML.CloseSet(V.Local.sDoc,"Time")
				
				'get the part Length
				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/PartLength",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)
				F.Global.XML.Query(V.Local.sDoc,"PartLength",V.Local.sSQL,True)
				'checks to see if there is a bound
				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"PartLength",V.Local.sBound)
				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
				F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
					'get the part length for the job
					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"PartLength","text",V.Local.fPartLength)
					F.Intrinsic.Math.Div(V.Local.fPartLength,25.4,V.Local.fPartLength)
'					F.Intrinsic.String.Format(V.Local.fPartLength,"#.0000",V.Local.fPartLength)
'					F.Intrinsic.Math.Round(V.Local.fPartLength,4,V.Local.fPartLength)
				F.Intrinsic.Control.EndIf
				F.Global.XML.CloseSet(V.Local.sDoc,"PartLength")

				'get the part Width
				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/PartWidth",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)
				F.Global.XML.Query(V.Local.sDoc,"PartWidth",V.Local.sSQL,True)
				'checks to see if there is a bound
				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"PartWidth",V.Local.sBound)
				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
				F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
					'get the part length for the job
					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"PartWidth","text",V.Local.fPartWidth)
					F.Intrinsic.Math.Div(V.Local.fPartWidth,25.4,V.Local.fPartWidth)
'					F.Intrinsic.String.Format(V.Local.fPartWidth,"#.0000",V.Local.fPartWidth)
'					F.Intrinsic.Math.Round(V.Local.fPartWidth,4,V.Local.fPartWidth)
				F.Intrinsic.Control.EndIf
				F.Global.XML.CloseSet(V.Local.sDoc,"PartWidth")
		
				'get the Quantity
				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/Quantity",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)
				F.Global.XML.Query(V.Local.sDoc,"Quantity",V.Local.sSQL,True)
				V.Local.fQty.Set(0)
				'checks to see if there is a bound
				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Quantity",V.Local.sBound)
				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)
				F.Intrinsic.Control.If(V.Local.sBound(1),>,-1)
					'get the quantity
					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Quantity","text",V.Local.fQty)
				F.Intrinsic.Control.EndIf
				F.Global.XML.CloseSet(V.Local.sDoc,"Quantity")


					'gets the area of the part
					F.Intrinsic.Math.Mult(V.Local.fLength,V.Local.fWidth,V.Local.fArea)

					'keeps a total of the area
					F.Intrinsic.Math.Mult(V.Local.fArea,V.Local.fRuns,V.Local.fTemp)
					F.Intrinsic.Math.Add(V.Local.fTemp,V.Local.fTotalArea,V.Local.fTotalArea)

					'add everything to the udts
					'check to see if it is already in the udt
					'seek for job
					F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uTime!Job,V.Local.sJob,V.Local.sOrdinal)
					F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")
						V.uGlobal.uTime.RedimPreserve(0,V.Local.iCountTime)
						V.uGlobal.uTime(v.Local.iCountTime)!NestID.Set(V.Local.sNestID)
						V.uGlobal.uTime(v.Local.iCountTime)!Job.Set(V.Local.sJob)
						'multiply quantity by the amount of runs it did
						F.Intrinsic.Math.Mult(V.Local.fQty,V.Local.fRuns,V.Local.fQty)
'						F.Intrinsic.String.Format(V.Local.fQty,"#.0000",V.Local.fQty)
						V.uGlobal.uTime(v.Local.iCountTime)!Qty.Set(V.Local.fQty)
						'multiply the time by the quantity and run which is already in fqty
						F.Intrinsic.Math.Mult(V.Local.fTime,V.Local.fQty,V.Local.fTime)
'						F.Intrinsic.String.Format(V.Local.fTime,"#.0000",V.Local.fTime)
						V.uGlobal.uTime(v.Local.iCountTime)!Time.Set(V.Local.fTime)
						'add the issue material to employee field to hold it
						F.Intrinsic.Math.Mult(V.Local.fPartLength,V.Local.fPartWidth,V.Local.fIssueTotal)
						F.Intrinsic.Math.Mult(V.Local.fIssueTotal,V.Local.fQty,V.Local.fIssueTotal)
'						F.Intrinsic.String.Format(V.Local.fIssueTotal,"#.0000",V.Local.fIssueTotal)
						F.Intrinsic.Math.Round(V.Local.fIssueTotal,4,V.Local.fIssueTotal)
						V.uGlobal.uTime(v.Local.iCountTime)!Issue.Set(V.Local.fIssueTotal)
						F.Intrinsic.Math.Add(V.Local.iCountTime,1,V.Local.iCountTime)
					F.Intrinsic.Control.Else
						'there is already a job
						F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
						'should only be one ordinal
						
						'calculate the quantity on the job
						F.Intrinsic.Math.Mult(V.Local.fQty,V.Local.fRuns,V.Local.fQty)

						'caculate the time on the job
						F.Intrinsic.Math.Mult(V.Local.fTime,V.Local.fQty,V.Local.fTime)

						'calculate the issue quantity for the job
						'employee is being used to store the issue material until it has been processed
						F.Intrinsic.Math.Mult(V.Local.fPartLength,V.Local.fPartWidth,V.Local.fIssueTotal)
						F.Intrinsic.Math.Mult(V.Local.fIssueTotal,V.Local.fQty,V.Local.fIssueTotal)
						F.Intrinsic.Math.Add(V.Local.fIssueTotal,V.uGlobal.uTime(v.Local.sOrdinal)!Issue,V.Local.fIssueTotal)
'						F.Intrinsic.String.Format(V.Local.fIssueTotal,"#.0000",V.Local.fIssueTotal)
						F.Intrinsic.Math.Round(V.Local.fIssueTotal,4,V.Local.fIssueTotal)
						V.uGlobal.uTime(v.Local.sOrdinal)!Issue.Set(V.Local.fIssueTotal)

						'add the qty to the existing qty				
						F.Intrinsic.Math.Add(V.Local.fQty,V.uGlobal.uTime(v.Local.sOrdinal)!Qty,V.Local.fQty)
'						F.Intrinsic.String.Format(V.Local.fQty,"#.0000",V.Local.fQty)
						V.uGlobal.uTime(v.Local.sOrdinal)!Qty.Set(V.Local.fQty)

						'add the time to the existing time
						F.Intrinsic.Math.Add(V.Local.fTime,V.uGlobal.uTime(v.Local.sOrdinal)!Time,V.Local.fTime)
'						F.Intrinsic.String.Format(V.Local.fTime,"#.0000",V.Local.fTime)
						V.uGlobal.uTime(v.Local.sOrdinal)!Time.Set(V.Local.fTime)
					F.Intrinsic.Control.EndIf

					'Material udt
					'total sheets is how many runs in total
						'display total sheets v.local.fTotalSheets
'					F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sMaterial,V.uGlobal.uMaterial!Job,V.Local.sJob.Trim,V.Local.sOrdinal)
'					F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")
'						'no material found add it
'						V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iCountMaterial)
'						V.uGlobal.uMaterial(v.Local.iCountMaterial)!NestID.Set(V.Local.sNestID)
'						V.uGlobal.uMaterial(v.Local.iCountMaterial)!Material.Set(V.Local.sMaterial)
''						V.uGlobal.uMaterial(V.Local.iCountMaterial)!Job.Set(V.Local.sJob.Trim)
'						V.uGlobal.uMaterial(v.Local.iCountMaterial)!Area.Set(V.Local.fArea)
'						F.Intrinsic.Math.Add(V.Local.iCountMaterial,1,V.Local.iCountMaterial)
'					F.Intrinsic.Control.EndIf

					'Drop UDT
					F.Intrinsic.Math.Add(V.Local.iDrop,1,V.Local.iDrop)
					F.Intrinsic.Control.If(V.Local.iDrop,=,1)
						F.Intrinsic.Control.If(V.Local.fRemLength,<>,0)
							F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.fRuns,1)
								V.uGlobal.uDrop.RedimPreserve(0,V.Local.iCountDrop)
								V.uGlobal.uDrop(v.Local.iCountDrop)!NestID.set(V.Local.sNestID)
								V.uGlobal.uDrop(v.Local.iCountDrop)!Material.Set(V.Local.sMaterial)

								F.Intrinsic.String.Build("{0}x{1}",V.Local.fRemLength,V.Local.fRemWidth,V.Local.sSize)
								V.uGlobal.uDrop(v.Local.iCountDrop)!Size.Set(V.Local.sSize)
	'							V.uGlobal.uDrop(V.Local.iCountDrop)!Part.Set(V.Local.sPart)
								F.Intrinsic.Math.Add(V.Local.iCountDrop,1,V.Local.iCountDrop)
							F.Intrinsic.Control.Next(V.Local.iCount)
						F.Intrinsic.Control.EndIf

						'consolidate the same material into one
						F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sMaterial,V.Local.sOrdinal)
						F.Intrinsic.Control.If(V.Local.sOrdinal.Trim,=,"")
							V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iCountMaterial)
							V.uGlobal.uMaterial(v.Local.iCountMaterial)!NestID.Set(V.Local.sNestID)
							V.uGlobal.uMaterial(v.Local.iCountMaterial)!Material.Set(V.Local.sMaterial)
	'						V.uGlobal.uMaterial(V.Local.iCountMaterial)!Job.Set(V.Local.sJob.Trim)
							V.uGlobal.uMaterial(v.Local.iCountMaterial)!Area.Set(V.Local.fArea)
							V.uGlobal.uMaterial(v.Local.iCountMaterial)!Qty.Set(V.Local.fRuns)
							F.Intrinsic.Math.Add(V.Local.iCountMaterial,1,V.Local.iCountMaterial)
						F.Intrinsic.Control.Else
							F.Intrinsic.Math.Add(V.uGlobal.uMaterial(v.Local.sOrdinal.Long)!Qty,V.Local.fRuns,V.uGlobal.uMaterial(v.Local.sOrdinal.Long)!Qty)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf

				F.Global.XML.Next(V.Local.sDoc,"Job",V.Local.bEOF)
			F.Intrinsic.Control.Loop
			F.Global.XML.CloseSet(V.Local.sDoc,"Job")
				

			F.Global.XML.Next(V.Local.sDoc,"OrderName",V.Local.bEOF)
		F.Intrinsic.Control.Loop
		F.Global.XML.CloseSet(V.Local.sDoc,"OrderName")
		F.Global.XML.Next(V.Local.sDoc,"NestID",V.Local.bEOF)
	F.Intrinsic.Control.Loop
	F.Global.XML.CloseSet(V.Local.sDoc,"NestID")
F.Intrinsic.Control.Else
	V.Global.bRead.Set(False)
	'close xml
	F.Global.XML.CloseDocument(V.Local.sDoc)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'close type
F.Global.XML.CloseSet(V.Local.sDoc,"Type")
'close xml
F.Global.XML.CloseDocument(V.Local.sDoc)
''add the total sheets to material qty
'V.uGlobal.uMaterial!Qty.Set(V.Local.fTotalSheets)

F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uTime!Job,False)

'loop through the time udt to fix all of the time because it was passed in minutes

'adds all the udts into one and adds it to the table
F.Intrinsic.Control.CallSub(Consolidate,"Type","Load","Area",V.Local.fArea,"TotalArea",V.Local.fTotalArea,"Qty",V.Local.fTotalSheets)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("ReadXML_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.ReadXML.End

Program.Sub.TrumpfBuildstyle.Start
F.Intrinsic.Control.SetErrorHandler("TrumpfBuildstyle_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sEmployee.Declare(String)
V.Local.sLots.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iStyle.Declare(Long)
V.Local.sOrdinal.Declare(String)
V.Local.iCount2.Declare(Long)


Gui.Ncell_Trumpf_Interface.gsfgTTime.Cols(4)
Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(2)
Gui.Ncell_Trumpf_Interface.gsfgTTime.FixedRows(1)
Gui.Ncell_Trumpf_Interface.gsfgTTime.SetColumnPercentages(".3:.19:.19:.319")

'Trumpf Time buildstyle
'Col 0 Work Order Header
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,0,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,0,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(0,0,"Work Order")


'Col 0 Work Order Line
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,0,"Format","Alignment",2)

'Col 1 Qty Header
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,1,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,1,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(1,0,"Qty")

'Col 1 Qty Line
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,1,"Format","Alignment",6)

'Col 2 Time Header
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,2,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,2,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(2,0,"Time")

'Col 2 Time Line
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,2,"Format","Alignment",6)

'Col 3 Employee Header
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,3,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,3,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.RowHeight(0,400)
F.Intrinsic.String.Build("Employee{0}Number",V.Ambient.NewLine,V.Local.sEmployee)
Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(3,0,V.Local.sEmployee)

'Col 3 Employee Line
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,3,"Format","Alignment",6)
'employee style 3 so we can lock all cells besides the first later
Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(3,3,"Type","Locked",False)

Gui.Ncell_Trumpf_Interface.gsfgTTime.ApplyStyle(0,1)




'Trumpf Material Buildstyle
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Cols(8)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(2)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.FixedRows(1)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.SetColumnPercentages(".25:.0:.25:.25:.25:.149:.05:.05")
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.SetColumnPercentages(".249:.0:.205:.205:.205:.075:.03:.03")


'Col 0 Material Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,0,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,0,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(0,0,"Material")

''Col 0 Material Line
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,0,"Type","Locked",True)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,0,"Format","Alignment",2)

'Col 1 Job Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,1,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,1,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(1,0,"Work Order")

''Col 1 Job Line
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,1,"Type","Dropdownlist",V.Args.JOBS)

'Col 2 Lot Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,2,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,2,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(2,0,"Lot")

''Col 2 Lot Line
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)

'Col 3 Bin Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,3,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,3,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(3,0,"Bin")

''Col 3 Bin Line
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,3,"Type","Dropdownlist","")
''locked until they pick a lot
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,3,"Type","Locked",True)

'Col 4 Serial Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,4,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,4,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,4,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(4,0,"Serial")

'Col 5 Qty Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,5,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,5,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,5,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(5,0,"Qty")

''Col 5 Qty Line
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,4,"Type","Locked",False)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,4,"Format","Alignment",6)

'Col 6 Add Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,6,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,6,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,6,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(6,0,"+")

''Col 6 Add Line
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,5,"Color","Fore",V.Color.Green)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,5,"Format","Alignment",4)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,5,"Type","Command","+")

'Col 7 Delete Header
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,7,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,7,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,7,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(7,0,"-")

''Col 7 Delete Line
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,6,"Color","Fore",V.Color.Red)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,6,"Format","Alignment",4)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,6,"Type","Command","-")



Gui.Ncell_Trumpf_Interface.gsfgTMaterial.ApplyStyle(0,1)

'Trumpf Drop Buildstyle
Gui.Ncell_Trumpf_Interface.gsfgTDrop.Cols(6)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(2)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.FixedRows(1)
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.SetColumnPercentages(".26:.0:.25:.25:.25:.239")
Gui.Ncell_Trumpf_Interface.gsfgTDrop.SetColumnPercentages(".249:.0:.1875:.1875:.1875:.1875")


'Col 0 Material Header
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,0,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,0,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(0,0,"Material")

''Col 0 Material Line
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,0,"Type","Locked",True)
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,0,"Format","Alignment",2)

'Col 1 Job Header
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,1,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,1,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(1,0,"Work Order")

''Col 1 Job Line
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,1,"Type","Dropdownlist",V.Args.JOBS)

'Col 2 Lot Header
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,2,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,2,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(2,0,"Lot")

''Col 2 Lot Line
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)

'Col 3 Bin Header
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,3,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,3,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(3,0,"Bin")

''Col 3 Bin Line
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,3,"Type","Dropdownlist","")
''this will be locked until lot is picked
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,3,"Type","Locked",True)

'Col 4 Serial Header
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,4,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,4,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,4,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(4,0,"Serial")

'Col 5 Size Header
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,5,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,5,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,5,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(5,0,"Size")

''Col 4 Size Line
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,4,"Type","Locked",True)
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,4,"Format","Alignment",6)

Gui.Ncell_Trumpf_Interface.gsfgTDrop.ApplyStyle(0,1)

V.Local.iStyle.Set(3)
'loop through material buildstyle to create new ones as needed for both material and drop
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)
F.Intrinsic.Debug.Stop

	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,<>,"")
		F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Style,=,"","OR",V.uGlobal.uMaterial(v.Local.iCount)!Style,=,0)
			'Material buildstyle lines
			'Col 0 Material Line
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)
			'Col 2 Lot Line
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)
			'Col 3 Bin Line
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")
			'locked until they pick a lot
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)
			'Col 4 Serial
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")
			'locked until they pick a lot
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)
			'Col 5 Qty Line
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,5,"Type","Locked",False)
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)
			'Col 6 Add Line
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,6,"Type","Command","+")
			'Col 7 Delete Line
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)
			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,7,"Type","Command","-")

			'Drop buildstyle lines
			'Col 0 Material Line
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)
			'Col 2 Lot Line
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)
			'Col 3 Bin Line
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")
			'this will be locked until lot is picked
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)
			'Col 4 Serial
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")
			'this will be locked until lot is picked
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)
			'Col 5 Size Line
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,5,"Type","Locked",True)
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)

			'get all of the materials with this material and set its style
			V.Local.sOrdinal.Redim(0,0)
			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uMaterial(v.Local.iCount)!Material,V.Local.sOrdinal)
			F.Intrinsic.Control.If(V.Local.sOrdinal,<>,"")
				F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
				F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)
					V.uGlobal.uMaterial(v.Local.sOrdinal(v.Local.iCount2))!Style.Set(V.Local.iStyle)
				F.Intrinsic.Control.Next(V.Local.iCount2)
			F.Intrinsic.Control.EndIf

			'add one to the style for the next material type
			F.Intrinsic.Math.Add(V.Local.iStyle,1,V.Local.iStyle)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("TrumpfBuildstyle_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.TrumpfBuildstyle.End

Program.Sub.TrumpfLoadFG.Start
F.Intrinsic.Control.SetErrorHandler("TrumpfLoadFG_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iRows.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sOrdinal.Declare(String)

'load time udt to time flexgrid
'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uTime!Job,False)
Gui.Ncell_Trumpf_Interface.gsfgTTime.LoadFromUDT("uGlobal.uTime","Job::0*!*Qty::1*!*Time::2",2)

'load material udt to material flexgrid
'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uMaterial!Material,0)
'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.LoadFromUDT("uGlobal.uMaterial","Material::0*!*Qty::4",2)
F.Intrinsic.Math.Add(V.uGlobal.uMaterial.UBound,2,V.Local.iRows)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(V.Local.iRows)
V.Local.iRows.Set(1)
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)
	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(0,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)
	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(5,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Qty)
	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Style)
	F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)
F.Intrinsic.Control.Next(V.Local.iCount)

'load drop udt to drop flexgrid
'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uDrop!Material,0)
'Gui.Ncell_Trumpf_Interface.gsfgTDrop.LoadFromUDT("uGlobal.uDrop","Material::0*!*Lot::2*!*Size::4",2)
F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,<>,-1)
	F.Intrinsic.Math.Add(V.uGlobal.uDrop.UBound,2,V.Local.iRows)
	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(V.Local.iRows)
	V.Local.iRows.Set(1)
	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)
		Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(0,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Material.Trim)
		Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(5,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Size.Trim)
		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uDrop(v.Local.iCount)!Material,V.Local.sOrdinal)
		F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
		Gui.Ncell_Trumpf_Interface.gsfgTDrop.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)
		F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf
'F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgTDrop.Rows,1,V.Local.iRows)
'F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)
'	Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(1,V.Local.iCount,V.uGlobal.uTime!Job)
'F.Intrinsic.Control.Next(V.Local.iCount)

Gui.Ncell_Trumpf_Interface.gsfgTTime.ApplyStyle(1,3)

F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,=,-1)
	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("TrumpfLoadFG_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.TrumpfLoadFG.End

Program.Sub.Consolidate.Start
F.Intrinsic.Control.SetErrorHandler("Consolidate_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iUbound.Declare(Long)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sJobSuffix.Declare(String)
V.Local.sNestID.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sTime.Declare(String)
V.Local.sRow.Declare(String)
V.Local.sLine.Declare(String)
V.Local.fIssued.Declare(Float)
V.Local.fTotalDropped.Declare(Float)
V.Local.fDrop.Declare(Float)
V.Local.fTemp.Declare(Float)
V.Local.fTotalIssued.Declare(Float)
V.Local.fAdditional.Declare(Float)
V.Local.fTotalParts.Declare(Float)
V.Local.fTemp1.Declare(Float)

V.Local.iUbound.Redim(0,2)
V.Local.iUbound(0).set(V.uGlobal.uTime.UBound)
V.Local.iUbound(1).Set(V.uGlobal.uMaterial.UBound)
V.Local.iUbound(2).Set(V.uGlobal.uDrop.UBound)
'find the highest ubound
F.Intrinsic.Variable.ArrayMax(V.Local.iUbound,V.Local.iUbound(0))
V.Local.iUbound.RedimPreserve(0,0)
'set all ubounds to highest ubound
V.uGlobal.uComplete.Redim(-1,-1)
V.uGlobal.uComplete.Redim(0,0)
V.uGlobal.uTime.RedimPreserve(0,V.Local.iUbound)
V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iUbound)
F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,<>,-1)
	V.uGlobal.uDrop.RedimPreserve(0,V.Local.iUbound)
F.Intrinsic.Control.Else
	V.uGlobal.uDrop.Redim(0,V.Local.iUbound)
F.Intrinsic.Control.EndIf
V.uGlobal.uComplete.RedimPreserve(0,V.Local.iUbound)

V.Local.sNestID.set(V.uGlobal.uTime!NestID)

F.Intrinsic.Control.For(V.Local.iCount,0,V.Local.iUbound,1)
	'add time udt to complete
	V.uGlobal.uComplete(v.Local.iCount)!NestID.Set(V.Local.sNestID)
	'split out job suf seq
	F.Intrinsic.Control.If(V.Args.Type,=,"Load")
		V.Local.sjob.Set(V.uGlobal.uTime(v.Local.iCount)!Job)
		F.Intrinsic.Control.If(V.Local.sJob,<>,"")
			F.Intrinsic.String.Split(V.Local.sJob,"-",V.Local.sJob)
			V.Local.sJob.RedimPreserve(0,2)
			V.Local.sSuffix.Set(V.Local.sJob(1))
			V.Local.sSeq.Set(V.Local.sjob(2))
			V.Local.sJob.RedimPreserve(0,0)
			F.Intrinsic.String.Build("{0}-{1}",V.Local.sJob,V.Local.sSuffix,V.Local.sJobSuffix)
			V.uGlobal.uComplete(v.Local.iCount)!TWorkOrder.Set(V.Local.sJobSuffix)
		F.Intrinsic.Control.Else
			V.Local.sJob.Set("")
			V.Local.sSuffix.Set("")
			V.Local.sSeq.Set("")
			V.Local.sJobSuffix.Set("")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		V.uGlobal.uComplete(V.Local.iCount)!TWorkOrder.Set(V.uGlobal.uTime(V.Local.iCount)!Job)
		F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
			F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND TJOB = '{1}' ",V.Local.sNestID.Trim,V.uGlobal.uComplete(V.Local.iCount)!TWorkOrder.Trim,V.Local.sSQL)
		F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
			F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND TJOB = '{1}' ",V.Local.sNestID.Trim,V.uGlobal.uComplete(V.Local.iCount)!TWorkOrder.Trim,V.Local.sSQL)
		F.Intrinsic.Control.EndIf
		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)
			V.Local.sJob.Set(V.ODBC.Con!rst.FieldValTrim!JOB)
			V.Local.sSuffix.Set(V.ODBC.Con!rst.FieldValTrim!SUFFIX)
			V.Local.sSeq.Set(V.ODBC.Con!rst.FieldValTrim!SEQUENCE)
		F.Intrinsic.Control.Else
			V.Local.sJob.Set("")
			V.Local.sSuffix.Set("")
			V.Local.sSeq.Set("")
			V.Local.sJobSuffix.Set("")
		F.Intrinsic.Control.EndIf
		F.ODBC.Con!rst.Close
		V.uGlobal.uComplete(V.Local.iCount)!TWC.Set(V.uGlobal.uTime(V.Local.iCount)!WC)
	F.Intrinsic.Control.EndIf

	V.uGlobal.uComplete(v.Local.iCount)!TQty.Set(V.uGlobal.uTime(v.Local.iCount)!Qty)
	V.uGlobal.uComplete(v.Local.iCount)!TTime.Set(V.uGlobal.uTime(v.Local.iCount)!Time)
	V.uGlobal.uComplete(v.Local.iCount)!TEmployee.Set(V.uGlobal.uTime(v.Local.iCount)!Employee)
	V.uGlobal.uComplete(V.Local.iCount)!TIssue.Set(V.uGlobal.uTime(V.Local.iCount)!Issue)
	'add material udt to complete
	V.uGlobal.uComplete(v.Local.iCount)!MMaterial.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material)
	V.uGlobal.uComplete(v.Local.iCount)!MJob.Set(V.uGlobal.uMaterial(v.Local.iCount)!Job.Left10)
	V.uGlobal.uComplete(v.Local.iCount)!MLot.Set(V.uGlobal.uMaterial(v.Local.iCount)!Lot)
	V.uGlobal.uComplete(v.Local.iCount)!MBin.Set(V.uGlobal.uMaterial(v.Local.iCount)!Bin)
	V.uGlobal.uComplete(v.Local.iCount)!MSerial.Set(V.uGlobal.uMaterial(v.Local.iCount)!Serial)
	V.uGlobal.uComplete(v.Local.iCount)!MQty.Set(V.uGlobal.uMaterial(V.Local.iCount)!Qty)
	V.uGlobal.uComplete(v.Local.iCount)!MArea.Set(V.uGlobal.uMaterial(v.Local.iCount)!Area)
F.Intrinsic.Debug.Stop

	'change this to get Area based on inventory_mst2 (length*width)
	F.Intrinsic.String.Build("select Length * Width as MAREA from INVENTORY_MST2 where PART = '{0}'",V.uGlobal.uComplete(v.Local.iCount)!MMaterial.PSQLFriendly,V.Local.sSQL)
	F.ODBC.Connection!Con.OpenRecordsetRO("rstOrigDims",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.Con!rstOrigDims.EOF,<>,True)
		F.Intrinsic.Control.If(V.ODBC.Con!rstOrigDims.FieldValFloat!MAREA,>,V.uGlobal.uComplete(v.Local.iCount)!MArea.Float)
			V.uGlobal.uComplete(v.Local.iCount)!MArea.Set(V.ODBC.Con!rstOrigDims.FieldValFloat!MAREA)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.ODBC.Con!rstOrigDims.Close



	'add drop udt to complete
'	F.Intrinsic.Control.If(V.Args.Type,=,"Load")
		V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Set(V.uGlobal.uDrop(v.Local.iCount)!Material)
'	F.Intrinsic.Control.ElseIf(V.Args.Type,=,"Save")
'		F.Intrinsic.String.Build("\{0\}\{1\}",V.uGlobal.uDrop(v.Local.iCount)!Material,V.uGlobal.uDrop(v.Local.iCount)!Size,V.Local.sRet)
'		V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Set(V.Local.sRet.left20)
'	F.Intrinsic.Control.EndIf
	V.uGlobal.uComplete(v.Local.iCount)!DJob.Set(V.uGlobal.uDrop(v.Local.iCount)!Job)
	V.uGlobal.uComplete(v.Local.iCount)!DLot.Set(V.uGlobal.uDrop(v.Local.iCount)!Lot)
	V.uGlobal.uComplete(v.Local.iCount)!DBin.Set(V.uGlobal.uDrop(v.Local.iCount)!Bin)
	V.uGlobal.uComplete(v.Local.iCount)!DSerial.Set(V.uGlobal.uDrop(v.Local.iCount)!Serial)
	V.uGlobal.uComplete(v.Local.iCount)!DSize.Set(V.uGlobal.uDrop(v.Local.iCount)!Size)
	'add additonal detail to lines
	V.uGlobal.uComplete(v.Local.iCount)!Job.Set(V.Local.sJob)
	V.uGlobal.uComplete(v.Local.iCount)!Suffix.Set(V.Local.sSuffix)
	V.uGlobal.uComplete(v.Local.iCount)!Seq.Set(V.Local.sSeq)
	F.Intrinsic.Control.If(V.Args.Type,=,"Load")
		'gets the total dropped
		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!DSize,<>,"")
			F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize,"x",V.Local.fDrop)
			V.Local.fDrop.RedimPreserve(0,1)
			F.Intrinsic.Math.Mult(V.Local.fDrop(0),V.Local.fDrop(1),V.Local.fDrop)
			V.Local.fDrop.RedimPreserve(0,0)
			F.Intrinsic.Math.Add(V.Local.fTotalDropped,V.Local.fDrop,V.Local.fTotalDropped)
		F.Intrinsic.Control.EndIf
		'get total issued
		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,<>,0)
			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTotalIssued,V.Local.fTotalIssued)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	'add id to udt
	V.uGlobal.uComplete(v.Local.iCount)!ID.Set(V.Local.iCount)

	'get the total parts
	F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTotalParts)

F.Intrinsic.Control.Next(V.Local.iCount)

F.Intrinsic.Control.If(V.Args.Type,=,"Load")
F.Intrinsic.Debug.Stop
	V.uGlobal.uComplete!MJob.Set(V.Args.Qty)
	'calculate how much needs to be added back to issue
	F.Intrinsic.Math.Add(V.Local.fTotalIssued,V.Local.fTotalDropped,V.Local.fTotalDropped)
	F.Intrinsic.Math.Mult(V.uGlobal.uComplete!MArea,V.uGlobal.uComplete!MJob,V.Local.fTemp1)
	F.Intrinsic.Math.Sub(V.Local.fTemp1,V.Local.fTotalDropped,V.Local.fDrop)
'	F.Intrinsic.Math.Sub(V.Args.TotalArea.Float,V.Local.fTotalDropped,V.Local.fDrop)
	'add the amount back into the issues
	V.Local.fTemp1.Set(0)
	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,<>,"")
'			F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Args.TotalArea.Float,V.Local.fAdditional)
'			F.Intrinsic.Math.Mult(V.Local.fAdditional,V.Local.fDrop,V.Local.fAdditional)
'			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fAdditional,V.Local.fAdditional)
''			F.Intrinsic.String.Format(V.Local.fAdditional,"#.000",V.Local.fAdditional)
'			V.uGlobal.uComplete(v.Local.iCount)!TIssue.Set(V.Local.fAdditional)

			F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTemp1)
			F.Intrinsic.Math.Mult(V.Local.fTemp1,V.Local.fDrop,V.Local.fTemp1)
			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTemp1,V.uGlobal.uComplete(v.Local.iCount)!TIssue)
			V.Local.fTemp1.Set(0)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
	

F.Intrinsic.Control.EndIf

'load finished udt into the table
F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
	'delete nestid first
	F.Intrinsic.String.Build("DELETE FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' ",V.Local.sNestID,V.Local.sSQL)
	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)
	F.ODBC.Con!rst.Close
	'TRUMPF save to trumpf table
	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst","SELECT * FROM GCG_3744_TRUMPF_SCRN")
F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
	'get the start and end time before deleting
	F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE, START_TIME, END_TIME FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND JOB <> '' ORDER BY JOB ASC, SUFFIX ASC ",V.Local.sNestID,V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTime)
	'delete nestid first
	F.Intrinsic.String.Build("DELETE FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' ",V.Local.sNestID,V.Local.sSQL)
	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)
	F.ODBC.Con!rst.Close
	'NCELL save to ncell table
	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst","SELECT * FROM GCG_3744_NCELL_SCRN")
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.SaveUDTToRecordSet("Con","rst","v.uGlobal.uComplete")
F.ODBC.Con!rst.Close

'if on ncell loop through the nest to readd the start and end time
F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1,"AND",V.Local.sTime,<>,"")
	F.Intrinsic.String.Split(V.Local.sTime,"#$#",V.Local.sRow)
F.Intrinsic.Control.For(V.Local.iCount,V.Local.sRow.LBound,V.Local.sRow.UBound,1)
		F.Intrinsic.String.Split(V.Local.sRow(v.Local.iCount),"*!*",V.Local.sLine)
		V.Local.sLine.RedimPreserve(0,4)
		F.Intrinsic.String.Build("SELECT * FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND JOB = '{1}' AND SUFFIX = '{2}' AND SEQUENCE = '{3}' ",V.Local.sNestID,V.Local.sLine(0).Trim,V.Local.sLine(1).Trim,V.Local.sLine(2).Trim,V.Local.sSQL)
		F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)
		'update the start and start time
		F.ODBC.Con!rst.Set!START_TIME(V.Local.sLine(3).Trim)
		F.ODBC.Con!rst.Set!END_TIME(V.Local.sLine(4).Trim)
		F.ODBC.Con!rst.Update
		F.ODBC.Con!rst.Close
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf
	

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Consolidate_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.Consolidate.End

Program.Sub.PopDropDown.Start
F.Intrinsic.Control.SetErrorHandler("PopDropDown_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)

'F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
	'trumpf tab so load trumph stuff
	'delete existing stuff in combo box
	Gui.Ncell_Trumpf_Interface.cmboTNestID.ClearItems
	'load new items
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","SELECT DISTINCT NESTID FROM GCG_3744_TRUMPF_SCRN WHERE CLOSED <> 'Y' ")
	F.Intrinsic.Control.DoUntil(V.ODBC.Con!rst.EOF,=,True)
		Gui.Ncell_Trumpf_Interface.cmboTNestID.AddItem(V.ODBC.Con!rst.FieldValTrim!NESTID)
		F.ODBC.Con!rst.MoveNext
	F.Intrinsic.Control.Loop
	F.ODBC.Con!rst.Close
'F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
	'Ncell tab so load ncell stuff
	'delete existing stuff in combo box
	Gui.Ncell_Trumpf_Interface.cmboNNestID.ClearItems
	'load new items
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","SELECT DISTINCT NESTID FROM GCG_3744_NCELL_SCRN WHERE CLOSED <> 'Y' ")
	F.Intrinsic.Control.DoUntil(V.ODBC.Con!rst.EOF,=,True)
		Gui.Ncell_Trumpf_Interface.cmboNNestID.AddItem(V.ODBC.Con!rst.FieldValTrim!NESTID)
		F.ODBC.Con!rst.MoveNext
	F.Intrinsic.Control.Loop
	F.ODBC.Con!rst.Close
'F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("PopDropDown_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.PopDropDown.End

program.sub.cmbotnestid_click.start
F.Intrinsic.Control.SetErrorHandler("cmbotnestid_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sNestID.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sSheets.Declare(String)
V.Local.sJobs.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sLots.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iTemp.Declare(Long)
V.Local.fTemp.Declare(Float)

F.Intrinsic.UI.InvokeWaitDialog("Loading Nest","Loading")
Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)

'Wipe out Ncell flexgrid
Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(1)
Gui.Ncell_Trumpf_Interface.cmboNNestID.Text("")

V.Local.sNestID.Set(V.Screen.Ncell_Trumpf_Interface!cmboTNestID.Text)

'Load the uTime udt
F.Intrinsic.UI.ChangeWaitStatus("Loading Time Table",20)
F.Intrinsic.String.Build("SELECT NESTID, TJOB, TQTY, TTIME, TEMPLOYEE, TISSUE, ID FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND TJOB <> '' AND CLOSED <> 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)
F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uTime",False,100)
F.ODBC.Con!rst.Close

'Load the uMaterial udt
F.Intrinsic.UI.ChangeWaitStatus("Loading Material Table",40)
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"MJOB")
F.Intrinsic.String.Build("SELECT NESTID, MMATERIAL, MQTY, ID, MAREA, MJOB FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND MMATERIAL <> '' AND CLOSED <> 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)
F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uMaterial",False,100)
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"")
F.ODBC.Con!rst.Close

'Load to Drop udt
F.Intrinsic.UI.ChangeWaitStatus("Loading Drops Table",60)
F.Intrinsic.String.Build("SELECT NESTID, DMATERIAL, DSIZE, ID, DJOB  FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND DMATERIAL <> '' AND CLOSED <> 'Y' ORDER BY ID",V.Local.sNestID,V.Local.sSQL)
F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uDrop",False,100)
F.ODBC.Con!rst.Close

'gather all of the lots and pass to buildstyle
F.Intrinsic.UI.ChangeWaitStatus("Loading Lots",80)
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)
	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,<>,"")
		V.Local.sPart.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)
		F.Intrinsic.String.Build("SELECT DISTINCT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY > 0 ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTemp)
		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)
'		F.Intrinsic.Control.If(V.Local.sTemp,<>,"","AND",V.Local.sLots,<>,"")
'			F.Intrinsic.String.Build("{0}#$#{1}",V.Local.sLots,V.Local.sTemp,V.Local.sLots)
'		F.Intrinsic.Control.ElseIf(V.Local.sTemp,<>,"")
'			V.Local.sLots.Set(V.Local.sTemp)
'		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(V.Local.sTemp,<>,"")
			F.Intrinsic.String.Replace(V.Local.sTemp,"#$#","*!*",V.Local.sTemp)
			V.uGlobal.uMaterial(v.Local.iCount)!LotDDL.Set(V.Local.sTemp)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)
'F.Intrinsic.String.Replace(V.Local.sLots,"#$#","*!*",V.Local.sLots)
'remove duplicates
'F.Intrinsic.String.Split(V.Local.sLots,"*!*",V.Local.sLots)
'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLots,V.Local.sLots)
'F.Intrinsic.String.Join(V.Local.sLots,"*!*",V.Local.sLots)

'Gather all the work orders and pass to the buildstyle for the drops
F.Intrinsic.UI.ChangeWaitStatus("Loading Work Orders",85)
'F.Intrinsic.String.Build("SELECT TJOB FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND TJOB <> '' ",V.Local.sNestID,V.Local.sSQL)
'F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sJobs)
'F.Intrinsic.String.Replace(V.Local.sJobs,"*!*","",V.Local.sJobs)
'F.Intrinsic.String.Replace(V.Local.sJobs,"#$#","*!*",V.Local.sJobs)
''remove duplicates
'F.Intrinsic.String.Split(V.Local.sJobs,"*!*",V.Local.sJobs)
'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sJobs,V.Local.sJobs)
'F.Intrinsic.String.Join(V.Local.sJobs,"*!*",V.Local.sJobs)

F.Intrinsic.String.Build("Total Sheets: {0}",V.uGlobal.uMaterial!Job,V.Local.sSheets)
Gui.Ncell_Trumpf_Interface.lblTSheets.Caption(V.Local.sSheets)

'set the qty for the sheets
'F.Intrinsic.String.Build("SELECT MMATERIAL, (TISSUE/MAREA) AS SHEET FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}'  AND MMATERIAL <> '' ORDER BY ID ASC",V.uGlobal.uMaterial!NestID,V.Local.sSQL)
'F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstQty",V.Local.sSQL)
'V.Local.iCount.Set(0)
'F.Intrinsic.Control.DoUntil(V.ODBC.Con!rstQty.EOF,=,True)
'	F.Intrinsic.Control.If(V.ODBC.Con!rstQty.FieldValFloat!SHEET,>,V.ODBC.Con!rstQty.FieldValLong!SHEET)
'		F.Intrinsic.Math.Add(V.ODBC.Con!rstQty.FieldValLong!SHEET,1,V.uGlobal.uMaterial(V.Local.iCount)!Qty)
'	F.Intrinsic.Control.Else
'		V.uGlobal.uMaterial(V.Local.iCount)!Qty.Set(V.ODBC.Con!rstQty.FieldValLong!SHEET)
'	F.Intrinsic.Control.EndIf
'	F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iCount)
'	F.ODBC.Con!rstQty.MoveNext
'F.Intrinsic.Control.Loop
'F.ODBC.Con!rstQty.Close

F.Intrinsic.UI.ChangeWaitStatus("Loading Buildstyle",90)
'F.Intrinsic.Control.CallSub(Trumpfbuildstyle,"JOBS",V.Local.sJobs,"LOTS",V.Local.sLots)
F.Intrinsic.Control.CallSub(Trumpfbuildstyle)
F.Intrinsic.UI.ChangeWaitStatus("Loading Information to Grid",100)
F.Intrinsic.Control.CallSub(Trumpfloadfg)

F.Intrinsic.UI.CloseWaitDialog


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmbotnestid_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

program.sub.cmbotnestid_click.End

program.sub.cmdclear_click.start
F.Intrinsic.Control.SetErrorHandler("cmdclear_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.uGlobal.uTime.Redim(-1,-1)
V.uGlobal.uMaterial.Redim(-1,-1)
V.uGlobal.uDrop.Redim(-1,-1)

F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
	Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(1)
	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(1)
	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)

	Gui.Ncell_Trumpf_Interface.cmboTNestID.Text("")
	Gui.Ncell_Trumpf_Interface.lblTSheets.Caption("Total Sheets: ")

F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
	'ncell flexgrids and cmbo box and lbl reset
	Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(1)
	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(1)
	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(1)

	Gui.Ncell_Trumpf_Interface.cmboNNestID.Text("")
	Gui.Ncell_Trumpf_Interface.lblNSheets.Caption("Total Sheets: ")

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdclear_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf


program.sub.cmdclear_click.End

program.sub.cmdpost_click.start
F.Intrinsic.Control.SetErrorHandler("cmdpost_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iPos.Declare(Long)
V.Local.sRet.Declare(String)
V.Local.iUbound.Declare(Long)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sJobSuffix.Declare(String)
V.Local.sNestID.Declare(String)
V.Local.iTotal.Declare(Long)
V.Local.iSheets.Declare(Long)
V.Local.sEmployee.Declare(String)
V.Local.sPart.Declare(String)
V.Local.iRows.Declare(Long)
V.Local.sRet2.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sBin.Declare(String)
V.Local.iLotBinCount.Declare(Long)
V.Local.iLotC.Declare(Long)
V.Local.bCheck.Declare(Boolean)
V.Local.sRet3.Declare(String)
V.Local.sSerial.Declare(String)

V.Local.sLot.Redim(0,0)
V.Local.sBin.Redim(0,0)

Gui.Ncell_Trumpf_Interface..Visible(false)
Gui.F_LotQtys..Visible(False)


F.Intrinsic.UI.InvokeWaitDialog("Checking to see if values are valid.","Updating")

F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!gsfgTTime.Rows,=,1,"OR",V.Screen.Ncell_Trumpf_Interface!gsfgTTime.Rows,=,0)
		F.Intrinsic.UI.CloseWaitDialog
		Gui.Ncell_Trumpf_Interface..Show
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

	'commit changes and save to udt
	Gui.Ncell_Trumpf_Interface.gsfgTTime.Commit
	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Commit
	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Commit

	F.Intrinsic.UI.ChangeWaitStatus("Checking Employee",5)
	F.Intrinsic.Control.CallSub(Gsfgtimeposttext)
	Gui.Ncell_Trumpf_Interface.gsfgTTime.GetTextMatrix(3,1,V.Local.sEmployee)
	F.Intrinsic.Control.If(V.Local.sEmployee,=,"")
		F.Intrinsic.UI.CloseWaitDialog
		F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")
		Gui.Ncell_Trumpf_Interface..Show
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

	F.Intrinsic.UI.ChangeWaitStatus("Updating Employee",10)
	'setting all employees in time udt
	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uTime.LBound,V.uGlobal.uTime.UBound,1)
		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)
		Gui.Ncell_Trumpf_Interface.gsfgTTime.GetTextMatrix(3,V.Local.iPos,V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet,=,"")
			F.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")
			Gui.Ncell_Trumpf_Interface..Show
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
		V.uGlobal.uTime(v.Local.iCount)!Employee.Set(V.Local.sRet.Trim)
	F.Intrinsic.Control.Next(V.Local.iCount)

	F.Intrinsic.UI.ChangeWaitStatus("Updating Material",15)
	'setting lot and qty in material udt
	V.Local.iRows.Set(V.Screen.Ncell_Trumpf_Interface!gsfgTMaterial.Rows)
	F.Intrinsic.Math.Sub(V.Local.iRows,2,V.Local.iRows)
	V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iRows)
'	F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)
	F.Intrinsic.Control.For(V.Local.iCount,0,V.Local.iRows,1)
		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)
		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)
		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)
		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)
		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)
		F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)
		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)
			F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT <> '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)
			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)
				F.ODBC.Con!rstTest.Close
				F.ODBC.Con!rst.Close
				F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Material","Warning")
				Gui.Ncell_Trumpf_Interface..Show
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			F.ODBC.Con!rstTest.Close
		F.Intrinsic.Control.EndIf
		F.ODBC.Con!rst.Close
		V.uGlobal.uMaterial(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)
		V.uGlobal.uMaterial(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)
		V.uGlobal.uMaterial(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)

		'sets the lot bin in array so it can be checkd agains the drops
		V.Local.sLot.RedimPreserve(0,V.Local.iLotBinCount)
		V.Local.sBin.RedimPreserve(0,V.Local.iLotBinCount)
		V.Local.sSerial.RedimPreserve(0,V.Local.iLotBinCount)
		V.Local.sLot(v.Local.iLotBinCount).Set(V.Local.sRet.Trim)
		V.Local.sBin(v.Local.iLotBinCount).Set(V.Local.sRet2.Trim)
		V.Local.sSerial(v.Local.iLotBinCount).Set(V.Local.sRet3.Trim)
		F.Intrinsic.Math.Add(V.Local.iLotBinCount,1,V.Local.iLotBinCount)
		'check for work order
'		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Local.sRet,=,"")
'			F.Intrinsic.UI.CloseWaitDialog
'			F.Intrinsic.UI.Msgbox("Please select a Work Order for Material","Warning")
'			Gui.Ncell_Trumpf_Interface..Show
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'		V.uGlobal.uMaterial(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)
		'set material
		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sRet)
		V.uGlobal.uMaterial(v.Local.iCount)!Material.Set(V.Local.sRet.Trim)
		'gets the quantity and adds it to total for later
		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(5,V.Local.iPos,V.Local.sRet)
		V.uGlobal.uMaterial(v.Local.iCount)!Qty.Set(V.Local.sRet.Trim)
		F.Intrinsic.Math.Add(V.Local.iTotal,V.Local.sRet.Long,V.Local.iTotal)
	F.Intrinsic.Control.Next(V.Local.iCount)

	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLot,V.Local.sLot)
	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sBin,V.Local.sBin)
	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sSerial,V.Local.sSerial)

	F.Intrinsic.UI.ChangeWaitStatus("Updating Drops",20)
	'setting lot in drop udt
	F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,<>,-1)
		F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)
			F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)
			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)
			F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)
			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)
				F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT <> '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)
				F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)
					F.ODBC.Con!rstTest.Close
					F.ODBC.Con!rst.Close
					F.Intrinsic.UI.CloseWaitDialog
					F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Drops","Warning")
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				F.ODBC.Con!rstTest.Close
			F.Intrinsic.Control.Else
				'loop through the lot bin arrays to see if the lot bin are being used as material
				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)
					F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)
						V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)
						V.Local.bCheck.Set(True)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLotC)
				F.Intrinsic.Control.If(V.Local.bCheck,=,False)
					F.Intrinsic.UI.Msgbox("Drop Lot does not match Material Lot","Warning")
					F.Intrinsic.UI.CloseWaitDialog
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				V.Local.bCheck.Set(False)
				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)
				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)
					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)
					V.Local.bCheck.Set(True)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLotC)
				F.Intrinsic.Control.If(V.Local.bCheck,=,False)
					F.Intrinsic.UI.Msgbox("Drop Bin does not match Material Bin","Warning")
					F.Intrinsic.UI.CloseWaitDialog
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				V.Local.bCheck.Set(False)
				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sSerial.LBound,V.Local.sSerial.UBound,1)
				F.Intrinsic.Control.If(V.Local.sSerial(v.Local.iLotC),=,V.Local.sRet3.Trim)
					V.uGlobal.uDrop(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)
					V.Local.bCheck.Set(True)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLotC)
				F.Intrinsic.Control.If(V.Local.bCheck,=,False)
					F.Intrinsic.UI.Msgbox("Drop Serial does not match Material Serial","Warning")
					F.Intrinsic.UI.CloseWaitDialog
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf

			F.Intrinsic.Control.EndIf
			F.ODBC.Con!rst.Close

			'loop through the lot bin arrays to see if the lot bin are being used as material
'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)
'				F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)
'					V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.Next(V.Local.iLotC)
	
'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Lot,=,"")
'				F.Intrinsic.UI.Msgbox("Please select a valid Lot for Drops","Warning")
'				F.Intrinsic.UI.CloseWaitDialog
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf

'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)
'				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)
'					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.Next(V.Local.iLotC)

'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Bin,=,"")
'				F.Intrinsic.UI.Msgbox("Please select a valid Bin for Drops","Warning")
'				F.Intrinsic.UI.CloseWaitDialog
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf
'			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)
'			F.Intrinsic.Control.If(V.Local.sRet,=,"")
'				F.Intrinsic.UI.CloseWaitDialog
'				F.Intrinsic.UI.Msgbox("Please select a Work Order for Drops","Warning")
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf
'			V.uGlobal.uDrop(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)
		F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.UI.ChangeWaitStatus("Checking Total Quantity",25)
	'check to make sure the amount of sheets is correctly entered
	F.Intrinsic.String.Split(V.Screen.Ncell_Trumpf_Interface!lblTSheets.Caption,":",V.Local.sRet)
	V.Local.sRet.RedimPreserve(0,1)
	V.Local.iSheets.Set(V.Local.sRet(1).Long)
	F.Intrinsic.Control.If(V.Local.iTotal,=,V.Local.iSheets)
		V.uGlobal.uMaterial!Job.set(V.Local.iSheets)
'		'We need to check to see if we have enough on hand first
'		F.Intrinsic.String.Build("SELECT QTY_ONHAND FROM V_INVENTORY_MSTR WHERE PART = '{0}' ",V.uGlobal.uMaterial!Material.Trim,V.Local.sSQL)
'		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstOnHand",V.Local.sSQL)
'		F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.EOF,=,False)
'			'check to see if we have more than we have sheets
'			F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.FieldValFloat!QTY_ONHAND,>=,V.Local.iSheets)
'				'We can continue
'				F.ODBC.Con!rstOnHand.Close
				F.Intrinsic.Control.CallSub(Consolidate,"Type","Save")
'			F.Intrinsic.Control.Else
'				F.ODBC.Con!rstOnHand.Close
'				'we don't have enough qty on hand to do this job
'				F.Intrinsic.UI.CloseWaitDialog
'				F.Intrinsic.UI.Msgbox("Not enough OnHand to complete this Nest","Warning")
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.Else
'			F.ODBC.Con!rstOnHand.Close
'			'we don't have this part in inventory
'			F.Intrinsic.UI.CloseWaitDialog
'			F.Intrinsic.UI.Msgbox("No Part found in inventory","Warning")
'			Gui.Ncell_Trumpf_Interface..Show
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.CloseWaitDialog
		F.Intrinsic.UI.Msgbox("Material Qty does not match Sheet Total","Warning")
		Gui.Ncell_Trumpf_Interface..Show
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	V.Global.iColumn.Set(-1)
	V.Global.iRow.Set(-1)
	V.Global.sControlName.Set("")

	'posting trumpf stuff to gss
	F.Intrinsic.Control.CallSub(Post)

F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,=,1,"OR",V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,=,0)
		F.Intrinsic.UI.CloseWaitDialog
		Gui.Ncell_Trumpf_Interface..Show
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

	'commit changes and save to udt
	Gui.Ncell_Trumpf_Interface.gsfgNTime.Commit
	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Commit
	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Commit

	F.Intrinsic.UI.ChangeWaitStatus("Checking Employee",5)
	F.Intrinsic.Control.CallSub(Gsfgtimeposttext)
	Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(3,1,V.Local.sEmployee)
	F.Intrinsic.Control.If(V.Local.sEmployee,=,"")
		F.Intrinsic.UI.CloseWaitDialog
		F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")
		Gui.Ncell_Trumpf_Interface..Show
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

	F.Intrinsic.UI.ChangeWaitStatus("Updating Employee",10)
	'setting all employees in time udt
	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uTime.LBound,V.uGlobal.uTime.UBound,1)
		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)
		Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(3,V.Local.iPos,V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet,=,"")
			F.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")
			Gui.Ncell_Trumpf_Interface..Show
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
		V.uGlobal.uTime(v.Local.iCount)!Employee.Set(V.Local.sRet.Trim)
		Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(4,V.Local.iPos,V.Local.sRet)
		V.uGlobal.uTime(V.Local.iCount)!WC.Set(V.Local.sRet.Trim)
	F.Intrinsic.Control.Next(V.Local.iCount)

	F.Intrinsic.UI.ChangeWaitStatus("Updating Material",15)
	'setting lot and qty in material udt
	V.Local.iRows.Set(V.Screen.Ncell_Trumpf_Interface!gsfgNMaterial.Rows)
	F.Intrinsic.Math.Sub(V.Local.iRows,2,V.Local.iRows)
	V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iRows)
'	F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
	F.Intrinsic.Control.For(V.Local.iCount,0,V.Local.iRows,1)
		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)
		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)
		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)
		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)
		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)
		F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}'  ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)
		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)
			F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT <> '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)
			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)
				F.ODBC.Con!rstTest.Close
				F.ODBC.Con!rst.Close
				F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Material","Warning")
				Gui.Ncell_Trumpf_Interface..Show
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			F.ODBC.Con!rstTest.Close
		F.Intrinsic.Control.EndIf
		F.ODBC.Con!rst.Close
		V.uGlobal.uMaterial(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)
		V.uGlobal.uMaterial(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)
		V.uGlobal.uMaterial(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)

		'sets the lot bin in array so it can be checkd agains the drops
		V.Local.sLot.RedimPreserve(0,V.Local.iLotBinCount)
		V.Local.sBin.RedimPreserve(0,V.Local.iLotBinCount)
		V.Local.sSerial.RedimPreserve(0,V.Local.iLotBinCount)
		V.Local.sLot(v.Local.iLotBinCount).Set(V.Local.sRet.Trim)
		V.Local.sBin(v.Local.iLotBinCount).Set(V.Local.sRet2.Trim)
		V.Local.sSerial(v.Local.iLotBinCount).Set(V.Local.sRet3.Trim)
		F.Intrinsic.Math.Add(V.Local.iLotBinCount,1,V.Local.iLotBinCount)
		'check for work order
'		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Local.sRet,=,"")
'			F.Intrinsic.UI.CloseWaitDialog
'			F.Intrinsic.UI.Msgbox("Please select a Work Order for Material","Warning")
'			Gui.Ncell_Trumpf_Interface..Show
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'		V.uGlobal.uMaterial(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)
		'set material
		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sRet)
		V.uGlobal.uMaterial(v.Local.iCount)!Material.Set(V.Local.sRet.Trim)
		'gets the quantity and adds it to total for later
		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(5,V.Local.iPos,V.Local.sRet)
		V.uGlobal.uMaterial(v.Local.iCount)!Qty.Set(V.Local.sRet.Trim)
		F.Intrinsic.Math.Add(V.Local.iTotal,V.Local.sRet.Long,V.Local.iTotal)
	F.Intrinsic.Control.Next(V.Local.iCount)

	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLot,V.Local.sLot)
	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sBin,V.Local.sBin)
	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sSerial,V.Local.sSerial)

	F.Intrinsic.UI.ChangeWaitStatus("Updating Drops",20)
	'setting lot in drop udt
	V.Local.iRows.Set(V.Screen.Ncell_Trumpf_Interface!gsfgNDrop.Rows)
	F.Intrinsic.Math.Sub(V.Local.iRows,2,V.Local.iRows)
	F.Intrinsic.Control.If(V.Local.iRows,=,0)
		'Check to see if there is a material
		Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(0,1,V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			V.uGlobal.uDrop.Redim(0,V.Local.iRows)
		F.Intrinsic.Control.Else
			V.uGlobal.uDrop.Redim(-1,-1)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,<>,-1)
		F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)
			F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)
			V.uGlobal.uDrop(v.Local.iCount)!Material.Set(V.Local.sPart.Trim)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(5,V.Local.iPos,V.uGlobal.uDrop(v.Local.iCount)!Size)
			
			F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)
			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)
				F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT <> '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)
				F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)
					F.ODBC.Con!rstTest.Close
					F.ODBC.Con!rst.Close
					F.Intrinsic.UI.CloseWaitDialog
					F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Drops","Warning")
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				F.ODBC.Con!rstTest.Close
			F.Intrinsic.Control.Else
				'loop through the lot bin arrays to see if the lot bin are being used as material
				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)
					F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)
						V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)
						V.Local.bCheck.Set(True)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLotC)
				F.Intrinsic.Control.If(V.Local.bCheck,=,False)
					F.Intrinsic.UI.Msgbox("Drop Lot does not match Material Lot","Warning")
					F.Intrinsic.UI.CloseWaitDialog
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				V.Local.bCheck.Set(False)
				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)
				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)
					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)
					V.Local.bCheck.Set(True)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLotC)
				F.Intrinsic.Control.If(V.Local.bCheck,=,False)
					F.Intrinsic.UI.Msgbox("Drop Bin does not match Material Bin","Warning")
					F.Intrinsic.UI.CloseWaitDialog
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				V.Local.bCheck.Set(False)
				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sSerial.LBound,V.Local.sSerial.UBound,1)
				F.Intrinsic.Control.If(V.Local.sSerial(v.Local.iLotC),=,V.Local.sRet3.Trim)
					V.uGlobal.uDrop(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)
					V.Local.bCheck.Set(True)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLotC)
				F.Intrinsic.Control.If(V.Local.bCheck,=,False)
					F.Intrinsic.UI.Msgbox("Drop Serial does not match Material Serial","Warning")
					F.Intrinsic.UI.CloseWaitDialog
					Gui.Ncell_Trumpf_Interface..Show
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf

			F.Intrinsic.Control.EndIf
			F.ODBC.Con!rst.Close

			'loop through the lot bin arrays to see if the lot bin are being used as material
'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)
'				F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)
'					V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.Next(V.Local.iLotC)
	
'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Lot,=,"")
'				F.Intrinsic.UI.Msgbox("Please select a valid Lot for Drops","Warning")
'				F.Intrinsic.UI.CloseWaitDialog
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf

'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)
'				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)
'					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.Next(V.Local.iLotC)
'
'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Bin,=,"")
'				F.Intrinsic.UI.Msgbox("Please select a valid Bin for Drops","Warning")
'				F.Intrinsic.UI.CloseWaitDialog
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf

'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)
'			F.Intrinsic.Control.If(V.Local.sRet,=,"")
'				F.Intrinsic.UI.CloseWaitDialog
'				F.Intrinsic.UI.Msgbox("Please select a Work Order for Drops","Warning")
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf
'			V.uGlobal.uDrop(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)
		F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.UI.ChangeWaitStatus("Checking Total Quantity",25)
	'check to make sure the amount of sheets is correctly entered
	F.Intrinsic.String.Split(V.Screen.Ncell_Trumpf_Interface!lblNSheets.Caption,":",V.Local.sRet)
	V.Local.sRet.RedimPreserve(0,1)
	V.Local.iSheets.Set(V.Local.sRet(1).Long)
	F.Intrinsic.Control.If(V.Local.iTotal,=,V.Local.iSheets)
		V.uGlobal.uMaterial!Job.Set(V.Local.iSheets)
'		'We need to check to see if we have enough on hand first
'		F.Intrinsic.String.Build("SELECT QTY_ONHAND FROM V_INVENTORY_MSTR WHERE PART = '{0}' ",V.uGlobal.uMaterial!Material.Trim,V.Local.sSQL)
'		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstOnHand",V.Local.sSQL)
'		F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.EOF,=,False)
'			'check to see if we have more than we have sheets
'			F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.FieldValFloat!QTY_ONHAND,>=,V.Local.iSheets)
'				'We can continue
'				F.ODBC.Con!rstOnHand.Close
				F.Intrinsic.Control.CallSub(Consolidate,"Type","Save")
'			F.Intrinsic.Control.Else
'				F.ODBC.Con!rstOnHand.Close
'				'we don't have enough qty on hand to do this job
'				F.Intrinsic.UI.CloseWaitDialog
'				F.Intrinsic.UI.Msgbox("Not enough OnHand to complete this Nest","Warning")
'				Gui.Ncell_Trumpf_Interface..Show
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.Else
'			F.ODBC.Con!rstOnHand.Close
'			'we don't have this part in inventory
'			F.Intrinsic.UI.CloseWaitDialog
'			F.Intrinsic.UI.Msgbox("No Part found in inventory","Warning")
'			Gui.Ncell_Trumpf_Interface..Show
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.CloseWaitDialog
		F.Intrinsic.UI.Msgbox("Material Qty does not match Sheet Total","Warning")
		Gui.Ncell_Trumpf_Interface..Show
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

	V.Global.iColumn.Set(-1)
	V.Global.iRow.Set(-1)
	V.Global.sControlName.Set("")

	'Post ncell stuff to gss
	F.Intrinsic.Control.CallSub(Post)

F.Intrinsic.Control.EndIf

'Clear the screen to allow for the next
F.Intrinsic.Control.CallSub(Cmdclear_click)
'repopulate the drop down because a nest it no longer there.
F.Intrinsic.Control.CallSub(Popdropdown)


Gui.Ncell_Trumpf_Interface.txtLotMaterial.Text("")
Gui.Ncell_Trumpf_Interface..Show

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdpost_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

program.sub.cmdpost_click.End

Program.Sub.Post.Start
F.Intrinsic.Control.SetErrorHandler("Post_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.sLine.Declare(String)
V.Local.sIssue.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sBackup.Declare(String)
V.Local.sNow.Declare(String)
V.Local.sUpdateDate.Declare(String)
V.Local.fComplete.Declare(Float)
V.Local.dTimeIn.Declare(Date)
V.Local.sTimeIn.Declare(String)
V.Local.dTimeOut.Declare(Date)
V.Local.sTimeOut.Declare(String)
V.Local.fQty.Declare(Float)
V.Local.fTime.Declare(Float)
V.Local.sSeq.Declare(String)
V.Local.sWC.Declare(String)
V.Local.sClose.Declare(String)
V.Local.sRet.Declare(String)
V.Local.fLength.Declare(Float)
V.Local.fWidth.Declare(Float)
V.Local.fArea.Declare(Float)
V.Local.sLot.Declare(String)
V.Local.sQty.Declare(String)
V.Local.fPercent.Declare(Float)
V.Local.fPercentAmt.Declare(Float)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.sOrdinal.Declare(String)
V.Local.iIssueCount.Declare(Long)
V.Local.sBin.Declare(String)
V.Local.fTemp.Declare(Float)
V.Local.iCount2.Declare(Long)
V.Local.iCount3.Declare(Long)
V.Local.sOrdinal2.Declare(String)
V.Local.sKey1.Declare(String)
V.Local.sKey2.Declare(String)
V.Local.iRetID.Declare(Long)
V.Local.iTemp.Declare(Long)
V.Local.bRet.Declare(Boolean)
V.Local.sPadPart.Declare(String)
V.Local.sPadLot.Declare(String)
V.Local.sPadBin.Declare(String)
V.Local.sHold.Declare(String)
V.Local.sPadSerial.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sCheck.Declare(String)
V.Local.iRemain.Declare(Float)
V.Local.sRecept.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sRev.Declare(String)
V.Local.sReceptLine.Declare(String)
V.Local.sToBin.Declare(String)
V.Local.iRptID.Declare(Long)
V.Local.iBirunID.Declare(Long)
V.Local.iLogId.Declare(Long)
V.Local.iRet.Declare(Long)

'Material update
'WIR100 uses
'Part, Rev, Loc, Qty, Lot, Bin, Heat, Serial, Job, Suffix, Seq
F.Intrinsic.Ui.ChangeWaitStatus("Writing Material Issue File",30)

V.Local.fPercent.Set(30)

F.Intrinsic.UI.ChangeWaitStatus("Writing Issue File",V.Local.fPercent)
	
V.uGlobal.uIssue.Redim(-1,-1)
V.uGlobal.uIssue.Redim(0,0)
V.uGlobal.uIssueDrop.Redim(-1,-1)
V.uGlobal.uIssueDrop.Redim(0,0)
V.uGlobal.uIssueJob.Redim(-1,-1)
V.uGlobal.uIssueJob.Redim(0,0)


'loop through udt complete to get all of the material jobs
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
	'Updating the work centers
'	F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET PART = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}' AND SEQ = '{3}' ",V.uGlobal.uComplete(V.Local.iCount)!TWC,V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)
'	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
'	F.Intrinsic.String.Build("UPDATE APSV3_JBLINES SET SEQRES = '{0}' WHERE JOB = '{1}' AND SFX = '{2}' AND SEQ = '{3}' ",V.uGlobal.uComplete(V.Local.iCount)!TWC,V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)
'	F.ODBC.Connection!Con.Execute(V.Local.sSQL)

	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!MMaterial,<>,"")
		'checks to see if the job-suffix lot and material are already in issue
		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssue!Lot,V.uGlobal.uComplete(v.Local.iCount)!MLot,V.uGlobal.uIssue!Bin,V.uGlobal.uComplete(v.Local.iCount)!MBin,V.uGlobal.uIssue!Serial,V.uGlobal.uComplete(v.Local.iCount)!MSerial,V.uGlobal.uIssue!Material,V.uGlobal.uComplete(v.Local.iCount)!MMaterial,V.Local.sOrdinal)
		'ordinal is blank so not in issue, add it
		F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")
			V.uGlobal.uIssue.RedimPreserve(0,V.Local.iIssueCount)
	'		V.uGlobal.uIssue(v.Local.iIssueCount)!Job.Set(V.uGlobal.uComplete(v.Local.iCount)!TWorkOrder)
			V.uGlobal.uIssue(v.Local.iIssueCount)!Material.Set(V.uGlobal.uComplete(v.Local.iCount)!MMaterial)
			V.uGlobal.uIssue(v.Local.iIssueCount)!Lot.Set(V.uGlobal.uComplete(v.Local.iCount)!MLot)
			V.uGlobal.uIssue(v.Local.iIssueCount)!Bin.Set(V.uGlobal.uComplete(v.Local.iCount)!MBin)
			V.uGlobal.uIssue(v.Local.iIssueCount)!Serial.Set(V.uGlobal.uComplete(v.Local.iCount)!MSerial)
			V.uGlobal.uIssue(v.Local.iIssueCount)!Qty.Set(V.uGlobal.uComplete(v.Local.iCount)!MQty)
	'		V.uGlobal.uIssue(v.Local.iIssueCount)!Issue.Set(V.uGlobal.uComplete(v.Local.iCount)!TIssue)
			F.Intrinsic.Math.Add(V.Local.iIssueCount,1,V.Local.iIssueCount)

		'ordinal was foudn so add the qty together
		F.Intrinsic.Control.Else
			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!MQty,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Qty,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Qty)
	'		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Issue,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Issue)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.iCount)

'loop through udt ISSUE to get all of the issue amounts on the issue jobs
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssue.LBound,V.uGlobal.uIssue.UBound,1)
	'get the job and search the table for the area and then multiply by the quantity issued for the job suffix lot
'	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
'		F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_TRUMPF_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA <> 0 ",V.uGlobal.uIssue(V.Local.iCount)!Material,V.uGlobal.uComplete!NestID,V.Local.sSQL)
''	F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
'		F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_NCELL_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA <> 0 ",V.uGlobal.uIssue(V.Local.iCount)!Material,V.uGlobal.uComplete!NestID,V.Local.sSQL)
'	F.Intrinsic.Control.EndIf
'	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",v.Local.sSQL)
'	F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)
		'there is an area so multiply it by the amount issued qty
'		F.Intrinsic.Math.Mult(V.uGlobal.uIssue(v.Local.iCount)!Qty,V.ODBC.Con!rst.FieldValFloat!MAREA,V.uGlobal.uIssue(v.Local.iCount)!Issue)
'	F.Intrinsic.Control.EndIf
'	F.ODBC.Con!rst.Close

'they dont want it in square inches, they want it in eaches
'	V.uGlobal.uIssue(v.Local.iCount)!Issue.Set(V.uGlobal.uIssue(v.Local.iCount)!Qty)
	F.Intrinsic.Math.Div(V.uGlobal.uIssue(v.Local.iCount)!Qty,V.uGlobal.uMaterial!Job,V.uGlobal.uIssue(v.Local.iCount)!Qty)
	F.Intrinsic.Math.Round(V.uGlobal.uIssue(v.Local.iCount)!Qty,4,V.uGlobal.uIssue(v.Local.iCount)!Qty)

	'split job-suffix and save it to the udt
''	F.Intrinsic.String.Split(V.uGlobal.uIssue(v.Local.iCount)!Job,"-",V.Local.sJob)
'	V.Local.sJob.RedimPreserve(0,1)
'	V.uGlobal.uIssue(v.Local.iCount)!Job.Set(V.Local.sJob(0).Trim)
'	V.uGlobal.uIssue(v.Local.iCount)!Suffix.Set(V.Local.sJob(1).Trim)

F.Intrinsic.Control.Next(V.Local.iCount)

V.Local.iIssueCount.Set(0)
'loop through udt complete and get all of the drops for each lot bin combo
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssueDrop!Lot,V.uGlobal.uComplete(v.Local.iCount)!DLot,V.uGlobal.uIssueDrop!Bin,V.uGlobal.uComplete(v.Local.iCount)!DBin,V.uGlobal.uIssueDrop!Serial,V.uGlobal.uComplete(v.Local.iCount)!DSerial,V.uGlobal.uIssueDrop!Material,V.uGlobal.uComplete(v.Local.iCount)!DMaterial,V.uGlobal.uIssueDrop!Size,V.uGlobal.uComplete(v.Local.iCount)!DSize,V.Local.sOrdinal)
	F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")
		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!DMaterial,<>,"")
			V.uGlobal.uIssueDrop.RedimPreserve(0,V.Local.iIssueCount)
			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Material.Set(V.uGlobal.uComplete(v.Local.iCount)!DMaterial)
			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Lot.Set(V.uGlobal.uComplete(v.Local.iCount)!DLot)
			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Bin.Set(V.uGlobal.uComplete(v.Local.iCount)!DBin)
			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Serial.Set(V.uGlobal.uComplete(v.Local.iCount)!DSerial)
			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Size.Set(V.uGlobal.uComplete(v.Local.iCount)!DSize)
			F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize.UCase,"X",V.Local.fTemp)
			V.Local.fTemp.RedimPreserve(0,1)
			
			F.Intrinsic.Math.Mult(V.Local.fTemp(0),V.Local.fTemp(1),V.Local.fTemp)
			V.Local.fTemp.RedimPreserve(0,0)
			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Material,V.uGlobal.uComplete!MArea,">::0",V.Local.sOrdinal2)
			F.Intrinsic.Control.If(V.Local.sOrdinal2,<>,"")
				F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)
				F.Intrinsic.Math.Div(V.Local.fTemp,V.uGlobal.uComplete(v.Local.sOrdinal2.Long)!MArea,V.Local.fTemp)
				F.Intrinsic.Math.Round(V.Local.fTemp,4,V.Local.fTemp)
				V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Qty.Set(V.Local.fTemp)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.Math.Add(V.Local.iIssueCount,1,V.Local.iIssueCount)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize.UCase,"X",V.Local.fTemp)
		V.Local.fTemp.RedimPreserve(0,1)
		F.Intrinsic.Math.Mult(V.Local.fTemp(0),V.Local.fTemp(1),V.Local.fTemp)
		V.Local.fTemp.RedimPreserve(0,0)
		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueDrop(v.Local.sOrdinal2.Long)!Material,V.uGlobal.uComplete!MArea,">::0",V.Local.sOrdinal2)
		F.Intrinsic.Control.If(V.Local.sOrdinal2,<>,"")
			F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)
			F.Intrinsic.Math.Div(V.Local.fTemp,V.uGlobal.uComplete(v.Local.sOrdinal2.Long)!MArea,V.Local.fTemp)
			F.Intrinsic.Math.Round(V.Local.fTemp,4,V.Local.fTemp)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Math.Add(V.uGlobal.uIssueDrop(v.Local.sOrdinal.Long)!Qty,V.Local.fTemp,V.uGlobal.uIssueDrop(v.Local.sOrdinal.Long)!Qty)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

V.Local.iIssueCount.Set(0)
'get jobs and issue amount
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!Job,<>,"")
		'for each job, loop the amount of times there are material and set each job's lot bin combos and issue amount
		F.Intrinsic.Control.For(V.Local.iCount2,V.uGlobal.uIssue.LBound,V.uGlobal.uIssue.UBound,1)
			'search for the material for the job
'			F.Intrinsic.String.Build("SELECT SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND PART = '{2}' ",V.uGlobal.uComplete(v.Local.iCount)!Job,V.uGlobal.uComplete(v.Local.iCount)!Suffix,V.uGlobal.uIssue(V.Local.iCount2)!Material,V.Local.sSQL)
			F.Intrinsic.String.Build("SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND LMO = 'M' ORDER BY SEQ ASC ",V.uGlobal.uComplete(v.Local.iCount)!Job,V.uGlobal.uComplete(v.Local.iCount)!Suffix,V.Local.sSQL)
			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstSeq",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Con!rstSEQ.EOF,=,False)
				V.uGlobal.uIssueJob.RedimPreserve(0,V.Local.iIssueCount)
				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Job.Set(V.uGlobal.uComplete(v.Local.iCount)!Job)
				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Suffix.Set(V.uGlobal.uComplete(v.Local.iCount)!Suffix)
				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Seq.Set(V.ODBC.Con!rstSEQ.FieldValTrim!SEQ)
				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Lot.Set(V.uGlobal.uIssue(v.Local.iCount2)!Lot)
				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Bin.Set(V.uGlobal.uIssue(v.Local.iCount2)!Bin)
				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Serial.Set(V.uGlobal.uIssue(v.Local.iCount2)!Serial)
				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Material.Set(V.uGlobal.uIssue(v.Local.iCount2)!Material)
				'multiply the percent of sheet from uissue qty by the total issue amount for the job. Giving us the amount of material issued to the job from this lot bin
				F.Intrinsic.Math.Mult(V.uGlobal.uIssue(v.Local.iCount2)!Qty,V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)
				F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Material,V.uGlobal.uComplete!MArea,">::0",V.Local.sOrdinal2)
				F.Intrinsic.Control.If(V.Local.sOrdinal2,<>,"")
					F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)
					F.Intrinsic.Math.Div(V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt,V.uGlobal.uComplete(v.Local.sOrdinal2.Long)!MArea,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)
					F.Intrinsic.Math.Round(V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt,4,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)
				F.Intrinsic.Control.EndIf
				'see if this lot bin has a drop, if it does then add it to the issueamt
				F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssueDrop!Lot,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Lot,V.uGlobal.uIssueDrop!Bin,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Bin,V.uGlobal.uIssueDrop!Serial,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Serial,V.uGlobal.uIssueDrop!Material,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Material,V.Local.sOrdinal)
				F.Intrinsic.Control.If(V.Local.sOrdinal,<>,"")
					F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
					'loop through the ordinals and add them to the issueamt if they are not already part of a job
					F.Intrinsic.Control.For(V.Local.iCount3,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)
						'check to make sure it has not been issued already
						F.Intrinsic.Control.If(V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Job,=,"")
							'add the drop quantity to the issue amount
'								F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt,V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Qty,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)
							'add job and suffix to drop
							V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Job.Set(V.uGlobal.uIssueJob(v.Local.iIssueCount)!Job)
							V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Suffix.Set(V.uGlobal.uIssueJob(v.Local.iIssueCount)!Suffix)
							V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Seq.Set(V.uGlobal.uIssueJob(v.Local.iIssueCount)!Seq)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Next(V.Local.iCount3)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			F.ODBC.Con!rstSEQ.Close
			F.Intrinsic.Math.Add(V.Local.iIssueCount,1,V.Local.iIssueCount)
		F.Intrinsic.Control.Next(V.Local.iCount2)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

'loop through issueJob udt and issue material
V.Local.sCheck.Set("")
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueJob.LBound,V.uGlobal.uIssueJob.UBound,1)

						'Check on hand to make sure we have enough on hand.
						F.Intrinsic.String.Build("SELECT QUANTITY FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.uGlobal.uIssueJob(v.Local.iCount)!Material.PSQLFriendly,V.uGlobal.uIssueJob(v.Local.iCount)!Lot.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Serial.Trim,V.Local.sSQL)
						F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstOnHand",V.Local.sSQL)
						F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.EOF,=,False)
							'Will use this later to make sure decimals are not left on drop quantities
'							V.Local.iRemain.Set(V.ODBC.Con!rstOnHand.FieldValFloat!QUANTITY)
							'check to see if we have more than we have sheets
							F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.FieldValFloat!QUANTITY,<,V.uGlobal.uIssueJob(V.Local.iCount)!IssueAmt)
								'we don't have enough qty on hand to do this job
								F.Intrinsic.UI.CloseWaitDialog
								F.Intrinsic.String.Build("Qty Issue: {0} > Qty Onhand: {1}",V.uGlobal.uIssueJob(V.Local.iCount)!IssueAmt,V.ODBC.Con!rstOnHand.FieldValFloat!QUANTITY,V.Local.sSql)
								F.Intrinsic.UI.Msgbox(V.Local.sSQL,"Warning")
								F.ODBC.Con!rstOnHand.Close
								Gui.Ncell_Trumpf_Interface..Show
								F.Intrinsic.Control.ExitSub
							F.Intrinsic.Control.Else
								F.ODBC.Con!rstOnHand.Close
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else
							F.ODBC.Con!rstOnHand.Close
							'we don't have this part in inventory
							F.Intrinsic.UI.CloseWaitDialog
							F.Intrinsic.UI.Msgbox("No Part found in inventory","Warning")
							Gui.Ncell_Trumpf_Interface..Show
							F.Intrinsic.Control.ExitSub
						F.Intrinsic.Control.EndIf


						V.Local.fArea.Set(0)
						F.Intrinsic.String.IsInString(V.Local.sCheck,V.uGlobal.uIssueJob(v.Local.iCount)!Material,True,V.Local.bRet)
						F.Intrinsic.Control.If(V.Local.bRet,=,False)
							F.Intrinsic.String.Build("{0},{1}",V.Local.sCheck,V.uGlobal.uIssueJob(v.Local.iCount)!Material,V.Local.sCheck)
							F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueJob(v.Local.iCount)!Material,V.uGlobal.uComplete!MArea,">::0",V.Local.sOrdinal2)
							F.Intrinsic.Control.If(V.Local.sOrdinal2,<>,"")
								F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)
								F.Intrinsic.Control.For(V.Local.iFor,V.Local.sOrdinal2.LBound,V.Local.sOrdinal2.UBound,1)
									'We need to add all of the issue amounts together
									F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssueJob!Material,V.uGlobal.uIssueJob(v.Local.iCount)!Material,V.Local.sOrdinal)
									F.Intrinsic.Control.If(V.Local.sOrdinal,<>,"")
										F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
										F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)
											F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.sOrdinal(v.Local.iCount2))!IssueAmt,V.Local.fArea,V.Local.fArea)
										F.Intrinsic.Control.Next(V.Local.iCount2)
									F.Intrinsic.Control.EndIf
									'We have the total issue amount so lets change it to be the full sheet amount
									F.Intrinsic.Control.If(V.uGlobal.uIssueJob(v.Local.iCount)!Serial,<>,"")
										F.Intrinsic.String.Split(V.uGlobal.uIssueJob(v.Local.iCount)!Serial.UCase,"X",V.Local.sPadSerial)
										F.Intrinsic.Control.If(V.Local.sPadSerial.UBound,<>,0)
											V.Local.sPadSerial.RedimPreserve(0,1)
											F.Intrinsic.Math.Mult(V.Local.sPadSerial(0).Float,V.Local.sPadSerial(1).Float,V.Local.fComplete)
											F.Intrinsic.Math.Div(V.Local.fComplete,V.uGlobal.uComplete(v.Local.sOrdinal2(v.Local.iFor))!MArea,V.Local.fComplete)
											F.Intrinsic.Math.Sub(V.Local.fComplete,V.Local.fArea,V.Local.fPercent)
											F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,V.Local.fPercent,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)
										F.Intrinsic.Control.Else
											F.Intrinsic.Math.Ceiling(V.Local.fArea,V.Local.fPercent)
											F.Intrinsic.Math.Sub(V.Local.fPercent,V.Local.fArea,V.Local.fPercent)
											F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,V.Local.fPercent,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)
										F.Intrinsic.Control.EndIf
									F.Intrinsic.Control.Else
										F.Intrinsic.Math.Ceiling(V.Local.fArea,V.Local.fPercent)
										F.Intrinsic.Math.Sub(V.Local.fPercent,V.Local.fArea,V.Local.fPercent)
										F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,V.Local.fPercent,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)
									F.Intrinsic.Control.EndIf
								F.Intrinsic.Control.Next(V.Local.iFor)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
						F.Intrinsic.Math.Round(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,4,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)
						
					F.Intrinsic.Math.Mult(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,10000,V.Local.sIssue)
			V.Local.sHold.Set("")
			F.Intrinsic.String.Build("{0}{1},,,{2},{7},{8},,{9},{3},{4},{5}{6}",V.Local.sHold,V.uGlobal.uIssueJob(v.Local.iCount)!Material.Trim,V.Local.sIssue,V.uGlobal.uIssueJob(v.Local.iCount)!Job.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Seq,"",V.uGlobal.uIssueJob(v.Local.iCount)!Lot.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Serial.Trim,V.Local.sHold)
			F.Intrinsic.Control.If(V.Local.sHold.Left1,<>,",")
				F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sLine,V.Local.sHold,V.Ambient.NewLine,V.Local.sLine)
			F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.EndIf
'		F.ODBC.Con!rst.Close
'	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

V.uGlobal.uIssueDrop.RedimPreserve(0,V.uGlobal.uIssueDrop.UBound)

'loop through drop udt and reverse the issue amount
F.Intrinsic.Control.If(V.uGlobal.uIssueDrop,<>,-1)
	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueDrop.LBound,V.uGlobal.uIssueDrop.UBound,1)
		F.Intrinsic.Control.If(V.uGlobal.uIssueDrop(v.Local.iCount)!Material,<>,"")
	'	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!DMaterial,<>,"")
			'split job-suffix and save it to the udt
	'		F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DJob,"-",V.Local.sJob)
	'		V.Local.sJob.RedimPreserve(0,1)
	'		V.Local.sJob.Set(V.Local.sJob(0).Trim)
	'		V.Local.sSuffix.Set(V.Local.sJob(1).Trim)

			'set the first job and suffix
	'		V.Local.sJob.Set(V.uGlobal.uComplete!Job)
	'		V.Local.sSuffix.Set(V.uGlobal.uComplete!Suffix)

	'		F.Intrinsic.String.Build("SELECT SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND PART = '{2}' ",V.Local.sJob.Trim,V.Local.sSuffix.Trim,V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Trim,V.Local.sSQL)
	'		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstSEQ",V.Local.sSQL)
	'		F.Intrinsic.Control.If(V.ODBC.Con!rstSEQ.EOF,=,False)
				'sets the sequence for the material that is being issued.
	'			V.Local.sSeq.Set(V.ODBC.Con!rstSEQ.FieldVal!SEQ)

	'			F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
	'				F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_TRUMPF_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA <> 0 ",V.uGlobal.uComplete(V.Local.iCount)!DMaterial.Trim,V.uGlobal.uComplete(v.Local.iCount)!NestID.Trim,V.Local.sSQL)
	'			F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
	'				F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_NCELL_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA <> 0 ",V.uGlobal.uComplete(V.Local.iCount)!DMaterial.Trim,V.uGlobal.uComplete(v.Local.iCount)!NestID.Trim,V.Local.sSQL)
	'			F.Intrinsic.Control.EndIf
	'			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstAREA",V.Local.sSQL)
	'			F.Intrinsic.Control.If(V.ODBC.Con!rstAREA.EOF,=,False)

					'set the issue amount and multiply by 10,000 for decimal reasons
	''				F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize,"x",V.Local.fArea)
	'				V.Local.fArea.RedimPreserve(0,1)
	'				F.Intrinsic.Math.Mult(V.Local.fArea(0),V.Local.fArea(1),V.Local.fArea)
	'				V.Local.fArea.RedimPreserve(0,0)
					'divide area by total area
	'				F.Intrinsic.Math.Div(V.Local.fArea,V.ODBC.Con!rstAREA.FieldValFloat!MAREA,V.Local.fArea)
	'				F.Intrinsic.String.Format(V.Local.fArea,"#.000",V.Local.fArea)
	'				F.Intrinsic.Math.Mult(V.Local.fArea,10000,V.Local.sIssue)

					'set -D to the end of the lot for the drop
					'if lot is less than 14 characters then add -D	


					F.Intrinsic.Control.If(V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Length,<,14)
						F.Intrinsic.String.Build("{0}-D",V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Trim,V.Local.sLot)
					F.Intrinsic.Control.Else
						V.Local.sLot.Set(V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Trim)
					F.Intrinsic.Control.EndIf
					'get the link id for the from lot bin
					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Material," ",20,V.Local.sPadPart)
					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Lot," ",15,V.Local.sPadLot)
					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Bin," ",6,V.Local.sPadBin)
					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Serial," ",30,V.Local.sPadSerial)
					F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}",V.Local.sPadPart,"  ",V.Local.sPadLot,V.Local.sPadBin,"               ",V.Local.sPadSerial,V.Local.sKey1)
				F.Global.DocumentControl.GetLinkID(V.Local.sKey1,31,V.Local.iRetID)
					F.Intrinsic.Control.If(V.Local.iRetID,<>,-1)
						F.Intrinsic.String.RPad(V.Local.sLot," ",15,V.Local.sLot)
						F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Size," ",30,V.uGlobal.uIssueDrop(v.Local.iCount)!Size)
'						F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}",V.uGlobal.uIssueDrop(v.Local.iCount)!Material,"  ",V.Local.sLot,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin,"               ","                              ",V.Local.sKey1)
						F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}",V.Local.sPadPart,"  ",V.Local.sLot,V.Local.sPadBin,"               ",V.uGlobal.uIssueDrop(v.Local.iCount)!Size,V.Local.sKey2)
						F.Global.DocumentControl.CreateReference(V.Local.skey2,31,V.Local.iTemp)
						F.Intrinsic.Control.If(V.Local.iTemp,<>,-1)
							F.Global.DocumentControl.Copy(V.Local.iRetID,V.Local.iTemp,V.Local.bRet)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf

					'mult the issue amount by 10,000
	'				V.Local.sOrdinal.Redim(0,0)
	'				F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueDrop(v.Local.iCount)!Material,V.Local.sOrdinal)
	'				F.Intrinsic.Control.If(V.Local.sOrdinal,<>,"")
	'					F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
	'					F.Intrinsic.Control.DoUntil(V.Local.iCount3,>,V.Local.sOrdinal.UBound,"OR",V.Local.iCount3,=,-1)
	'						F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.sOrdinal(v.Local.iCount3).Long)!MArea,<>,0)
	'							F.Intrinsic.Math.Div(V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,V.uGlobal.uComplete(v.Local.sOrdinal(v.Local.iCount3).Long)!MArea,V.uGlobal.uIssueDrop(v.Local.iCount)!Qty)
								F.Intrinsic.Math.Round(V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,4,V.uGlobal.uIssueDrop(v.Local.iCount)!Qty)

'								F.Intrinsic.Math.Mult(V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,10000,V.Local.sIssue)
	'							V.Local.iCount3.Set(-1)
	'						F.Intrinsic.Control.Else
	'							F.Intrinsic.Math.Add(V.Local.iCount3,1,V.Local.iCount3)
	'						F.Intrinsic.Control.EndIf
	'					F.Intrinsic.Control.Loop
	'				F.Intrinsic.Control.EndIf

					'get the default BIN for the part
	'				F.Intrinsic.String.Build("SELECT BIN FROM V_INVENTORY_MSTR WHERE PART = '{0}' ",V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Trim,V.Local.sSQL)
	'				F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstBIN",V.Local.sSQL)
	'				F.Intrinsic.Control.If(V.ODBC.Con!rstBIN.EOF,=,False)
	'					V.Local.sBin.Set(V.ODBC.Con!rstBIN.FieldValTrim!BIN)
	'				F.Intrinsic.Control.Else
	'					V.Local.sBin.Set("")
	'				F.Intrinsic.Control.EndIf
	'				F.ODBC.Con!rstBIN.Close
	'				V.Local.sBin.Set(V.uGlobal.uIssue(v.Local.iCount)!Bin.Trim)

					'Part, Rev, Loc, Qty, Lot, Bin, Heat, Serial, Job, Suffix, Seq
'					F.Intrinsic.String.Build("{0}{1},,,{2}-,{7},{8},,{9},{3},{4},{5}{6}",V.Local.sLine,V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Trim,V.Local.sIssue,V.uGlobal.uIssueDrop(v.Local.iCount)!Job.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Seq.Trim,V.Ambient.NewLine,V.Local.sLot.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim,V.Local.sLine)
'					V.Local.sHold.Set("")
'					F.Intrinsic.String.Build("{0}{1},,,{2}-,{7},{8},,{9},{3},{4},{5}{6}","",V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Trim,V.Local.sIssue,V.uGlobal.uIssueDrop(v.Local.iCount)!Job.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Seq.Trim,"",V.Local.sLot.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim,V.Local.sHold)
'					F.Intrinsic.Control.If(V.Local.sHold.Left1,<>,",")
'						F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sLine,V.Local.sHold,V.Ambient.NewLine,V.Local.sLine)
'					F.Intrinsic.Control.EndIf

					'changed by silas, last update 2/2/2017
					'issue recepts instead
					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Material," ",20,V.uGlobal.uIssueDrop(v.Local.iCount)!Material)
					V.Local.sPart.Set(V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Left17)
					V.Local.sRev.Set(V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Right3)
					' Part, Rev, Loc, Qty, Description, Lot,Bin, Hea, Serial, I/R, Drop
					F.Intrinsic.String.Build("{0},{1},{2},{3},,{4},{5},,{6},{7},{8},,,,",V.Local.sPart.Trim,V.Local.sRev.Trim,"",V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Serial.Trim,"I","N",V.Local.sReceptLine)
					F.Intrinsic.Control.If(V.Local.sRecept,<>,"")
						F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sRecept,V.Ambient.NewLine,V.Local.sReceptLine,V.Local.sRecept)
					F.Intrinsic.Control.Else
						V.Local.sRecept.Set(V.Local.sReceptLine)
					F.Intrinsic.Control.EndIf
					'prompt for destination bin
					F.Intrinsic.Control.CallSub(Dop_to_bin,"sPart",V.Local.sPart.Trim,"sSer",V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim)
					F.Intrinsic.Control.If(V.Global.sDropBin.Trim,<>,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim)
					F.Intrinsic.Control.AndIf(V.Global.sDropBin.Trim,<>,"")
						V.Local.sToBin.Set(V.Global.sDropBin.Trim)
						V.uGlobal.uIssueDrop(V.Local.iCount)!Bin.Set(V.Local.sToBin)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Build("{0},{1},{2},{3},,{4},{5},,{6},{7},{8},,,,",V.Local.sPart.Trim,V.Local.sRev.Trim,"",V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,V.Local.sLot.Trim,V.local.sToBin,V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim,"R","N",V.Local.sReceptLine)
					F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sRecept,V.Ambient.NewLine,V.Local.sReceptLine,V.Local.sRecept)
					
'			F.Intrinsic.Control.EndIf
	'			F.ODBC.Con!rstAREA.Close
	'		F.Intrinsic.Control.EndIf
	'		F.ODBC.Con!rstSEQ.Close
	'	F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf


F.Intrinsic.UI.ChangeWaitStatus("Issuing Material and Drops",60)
F.Intrinsic.Control.If(V.Local.sLine.Trim,<>,"")
	F.Intrinsic.String.Build("{0}\L{1}{2}MOPEN.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sLine.Trim)
	F.Intrinsic.String.StripCharacters(V.Ambient.Now,V.Local.sNow)
	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
		F.Intrinsic.String.Build("{0}\MATERIAL-{1}{2}{3}.Bkp",V.Global.sTBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}\MATERIAL-{1}{2}{3}.Bkp",V.Global.sNBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.File.String2File(V.Local.sBackup,V.Local.sLine.Trim)
	F.Intrinsic.String.Build("{0}L{1}{2}MOPEN.txt{0}",V.Ambient.DblQuote,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)
	F.Intrinsic.Task.LaunchGSSSync("WIR100","-C",V.Local.sFile)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sRecept.Trim,<>,"")
	F.Intrinsic.String.Build("{0}\{1}StandIss.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sRecept)

	F.Intrinsic.String.Build("{0}StandIss.txt",V.Caller.CompanyCode,V.Local.sFile)
	F.Intrinsic.Task.LaunchGSSSync("WIR104","-C",V.Local.sFile)
F.Intrinsic.Control.EndIf

F.Global.BI.GetIDFromName("IV_3744_BintoBinlbl.rpt",V.Local.iRptID)
F.Global.BI.GetRunID(V.Local.iBIRunID)
F.Global.BI.StartLogging(V.Local.iBIRunID,V.Local.iRptID,0,"",V.Local.iLogID)
F.Intrinsic.Variable.UDTMultiFlag(V.uGlobal.uIssueDrop!Material,"")
F.Intrinsic.Variable.UDTDeleteFlagged(V.uGlobal.uIssueDrop)
F.Intrinsic.Control.If(V.uGlobal.uIssueDrop.UBound,<>,-1)
	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rstBTB","GCG_3744_IV_BTB_XFER")
	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!User_ID,V.Caller.User)
	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!Lbl_Create_Date,V.Ambient.Date)
	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!Birunid,V.Local.iBirunID)
	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!Inv_UM,"EA")
	F.Intrinsic.Variable.SaveUDTToRecordSet("con","rstBTB","V.uGlobal.uIssueDrop")
	F.ODBC.Con!rstBTB.Close
F.Intrinsic.Control.EndIf
F.Global.BI.StopLogging(V.Local.iLogId)	
F.Global.BI.RunReportPreProcessor(V.Local.iBIRunID,V.Local.iLogID,"","","",-1,True,"",-1,"",-1,"","",V.Local.iRet)

'F.Intrinsic.Debug.InvokeDebugger
'F.Intrinsic.Debug.Stop

'Make sure that Lot/Bin Issued from is consumed
'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueJob.LBound,V.uGlobal.uIssueJob.UBound,1)
'	f.Intrinsic.Control.If(v.uGlobal.uIssueJob(v.Local.iCount,=,
'F.Intrinsic.Control.Next(V.Local.iCount)

'lets loop through issue job and see if we have anything issued. if we do then close the sequence
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueJob.LBound,V.uGlobal.uIssueJob.UBound,1)
	F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET FLAG_CLOSED = 'Y' WHERE LMO = 'M' AND JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uIssueJob(V.Local.iCount)!Job.Trim,V.uGlobal.uIssueJob(V.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueJob(V.Local.iCount)!Seq.Trim,V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.Control.Next(V.Local.iCount)

V.Local.sLine.Set("")


'job operation upload
F.Intrinsic.String.Format(V.Ambient.Date,"YYDDMM",V.Local.sUpdateDate)

F.Intrinsic.UI.ChangeWaitStatus("Writing Labor File",60)
F.Intrinsic.Control.If(V.uGlobal.uComplete.UBound,<>,0)
	F.Intrinsic.Math.Div(25,V.uGlobal.uComplete.UBound,V.Local.fPercentAmt)
F.Intrinsic.Control.Else
	V.Local.fPercentAmt.Set(25)
F.Intrinsic.Control.EndIf
V.Local.fPercent.Set(60)
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
	F.Intrinsic.Math.Add(V.Local.fPercent,V.Local.fPercentAmt,V.Local.fPercent)
	F.Intrinsic.UI.ChangeWaitStatus("Writing Labor File",V.Local.fPercent)
	'make sure to only do ones with info populated
	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TWorkOrder,<>,"")
		'closes the material sequence explicitly.
'		F.Intrinsic.String.Build("SELECT * FROM JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)
'		F.ODBC.Connection!Con.OpenLocalRecordsetRW("rstJobOps",V.Local.sSQL)
'		F.Intrinsic.Control.If(V.ODBC.Con!rstJobOps.EOF,=,False)
'			'updates the completed date and closes the sequence
'			F.ODBC.Con!rstJobOps.Set!DATE_COMPLETED(V.Local.sUpdateDate)
'			F.ODBC.Con!rstJobOps.Set!FLAG_CLOSED("Y")
'			F.ODBC.Con!rstJobOps.Update
'		F.Intrinsic.Control.EndIf
'		F.ODBC.Con!rstJobOps.Close

		'deletes the commitment
'		F.Intrinsic.String.Build("DELETE FROM JOB_COMMITMENTS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)
'		F.ODBC.Connection!Con.Execute(V.Local.sSQL)


		'get work center from sequence
		F.Intrinsic.String.Build("SELECT PART FROM JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.Local.sSQL)
		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)
			V.Local.sWC.Set(V.ODBC.Con!rst.FieldValTrim!PART)
		F.Intrinsic.Control.EndIf
		F.ODBC.Con!rst.Close

		'write labor detail line using JB0455
		F.Intrinsic.String.Format(V.Ambient.Date,"MMDDYY",V.Local.sUpdateDate)

		F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
			F.Intrinsic.Date.ConvertTString("0100","HH:NN",V.Local.dTimeIn)

			'time will be in seconds
			F.Intrinsic.Math.Mult(V.uGlobal.uComplete(V.Local.iCount)!TTime,60,V.Local.fTime)
'			F.Intrinsic.Math.Mult(V.Local.fTime,60,V.Local.fTime)
			F.Intrinsic.Date.DateAdd("N",V.Local.fTime,V.Local.dTimeIn,V.Local.dTimeOut)
			F.Intrinsic.String.Format(V.Local.dTimeOut,"HHNN",V.Local.sTimeOut)
			'if time is still 0100 then change it to 0101 so it has a default minute
			F.Intrinsic.Control.If(V.Local.sTimeOut,=,"0100")
				V.Local.sTimeOut.Set("0101")
			F.Intrinsic.Control.EndIf
			V.Local.sTimeIn.Set("0100")
		F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
			F.Intrinsic.String.Build("SELECT START_TIME, END_TIME FROM GCG_3744_NCELL_SCRN WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.Local.sSQL)
			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)
				V.Local.sTimeIn.Set(V.ODBC.Con!rst.FieldValTrim!START_TIME)
		V.Local.sTimeOut.Set(V.ODBC.Con!rst.FieldValTrim!END_TIME)
			F.Intrinsic.Control.EndIf
			F.ODBC.Con!rst.Close
		F.Intrinsic.Control.EndIf

		'Multiply qty by 10,000 to upload
		F.Intrinsic.Math.Mult(V.uGlobal.uComplete(v.Local.iCount)!TQty,10000,V.Local.fQty)
		V.Local.sQty.Set(V.Local.fQty)

		'checks to see if quantity is complete so that we can set close flag.
		F.Intrinsic.String.Build("SELECT UNITS_OPEN, UNITS_COMPLETE FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		V.Local.sRet.RedimPreserve(0,1)
'		F.Intrinsic.Math.Add(V.Local.sRet(1).Float,V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.sRet(1))
'		F.Intrinsic.Control.If(V.Local.sRet(1).Float,>=,V.Local.sRet(0).Float)
		F.Intrinsic.Math.Sub(V.Local.sRet(0).Float,V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.sRet(0))
		F.Intrinsic.Control.If(V.Local.sRet(0).Float,<=,0)
			V.Local.sClose.Set("Y")
		F.Intrinsic.Control.Else
			V.Local.sClose.Set("")
		F.Intrinsic.Control.EndIf
		
		'create line for upload
		'date, employee, job, suffix, seq, workcenter, hours, closed, indirect, start time, finish time, rate type, good pieces, scrap, scrap code
		F.Intrinsic.String.Build("{1}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}{0}{8}{0}{9}{0}{10}{0}{11}{0}{12}{0}{13}{0}{14}{0}{15}{0}{16}{0}{17}",V.Ambient.Tab,V.Local.sLine,V.Local.sUpdateDate.Trim,V.uGlobal.uComplete(v.Local.iCount)!TEmployee.Trim,V.uGlobal.uComplete(v.Local.iCount)!Job.Trim,V.uGlobal.uComplete(v.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(v.Local.iCount)!Seq.Trim,V.Local.sWC.Trim,"0",V.Local.sClose,"D",V.Local.sTimeIn,V.Local.sTimeOut,"R",V.Local.fQty,"0","0",V.Ambient.NewLine,V.Local.sLine)
'		V.Local.sHold.Set("")
'		F.Intrinsic.String.Build("{1}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}{0}{8}{0}{9}{0}{10}{0}{11}{0}{12}{0}{13}{0}{14}{0}{15}{0}{16}{0}{17}",V.Ambient.Tab,V.Local.sHold,V.Local.sUpdateDate.Trim,V.uGlobal.uComplete(v.Local.iCount)!TEmployee.Trim,V.uGlobal.uComplete(v.Local.iCount)!Job.Trim,V.uGlobal.uComplete(v.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(v.Local.iCount)!Seq.Trim,V.Local.sWC.Trim,"0",V.Local.sClose,"D",V.Local.sTimeIn,V.Local.sTimeOut,"R",V.Local.fQty,"0","0","",V.Local.sHold)
'		F.Intrinsic.Control.If(V.Local.sHold.Left1,<>,",")
'			F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sLine,V.Local.sHold,V.Ambient.NewLine,V.Local.sLine)
'		F.Intrinsic.Control.EndIf
		'update our table to close and add time in and out
		F.Intrinsic.String.Build("SELECT START_TIME, END_TIME, POST_DATE, POST_TIME FROM GCG_3744_TRUMPF_SCRN WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' AND NESTID = '{3}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.uGlobal.uComplete(V.Local.iCount)!NestID.Trim,V.Local.sSQL)
		F.ODBC.Connection!Con.OpenLocalRecordsetRW("Update",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.Con!Update.EOF,=,False)
			F.ODBC.Con!Update.Set!START_TIME(V.Local.sTimeIn)
			F.ODBC.Con!Update.Set!END_TIME(V.Local.sTimeOut)
			F.ODBC.Con!Update.Set!POST_DATE(V.Local.sUpdateDate)
			F.ODBC.Con!Update.Set!POST_TIME(V.Local.sNow)
			F.ODBC.Con!Update.Update
		F.Intrinsic.Control.EndIf
		F.ODBC.Con!Update.Close
	F.Intrinsic.Control.EndIf

F.intrinsic.Control.Next(V.Local.iCount)

F.Intrinsic.UI.ChangeWaitStatus("Updating Labor",90)
'Load labor details
F.Intrinsic.Control.If(V.Local.sLine.Trim,<>,"")
	F.Intrinsic.String.Build("{0}\{1}{2}MOPEN.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sLine)
	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
		F.Intrinsic.String.Build("{0}\LABOR-{1}{2}{3}.Bkp",V.Global.sTBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}\LABOR-{1}{2}{3}.Bkp",V.Global.sNBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.File.String2File(V.Local.sBackup,V.Local.sLine)
	F.Intrinsic.String.Build("{0}{1}{2}MOPEN.txt{0}",V.Ambient.DblQuote,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)
	F.Intrinsic.Task.LaunchGSSSync("JB0455","-C",V.Local.sFile)
F.Intrinsic.Control.EndIf




'update all closed flags to closed
F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
	F.Intrinsic.String.Build("UPDATE GCG_3744_TRUMPF_SCRN SET CLOSED = 'Y' WHERE NESTID = '{0}' ",V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)
F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
	F.Intrinsic.String.Build("UPDATE GCG_3744_NCELL_SCRN SET CLOSED = 'Y' WHERE NESTID = '{0}' ",V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)
F.Intrinsic.Control.EndIf
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

F.Intrinsic.UI.ChangeWaitStatus("Creating Flex Schedule",90)
F.Intrinsic.Control.CallSub(Flexschedule)
F.Intrinsic.UI.ChangeWaitStatus("Printing Flex Schedule",100)
F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Post_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.Post.End

Program.Sub.ReadNcell.Start
F.Intrinsic.Control.SetErrorHandler("ReadNcell_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sRow.Declare(String)
V.Local.sLine.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.sNestID.Declare(String)
V.Local.sTotalSheets.Declare(String)
V.Local.iTimeCount.Declare(Long)
V.Local.iMaterialCount.Declare(Long)
V.Local.iDropCount.Declare(Long)
V.Local.sLot.Declare(String)
V.Local.sLotSplit.Declare(String)
V.Local.iLotCount.Declare(Long)
V.Local.sPart.Declare(String)
V.Local.sJob.Declare(String)
V.local.iPLot.Declare(Long)
V.Local.iDLot.Declare(Long)
V.Local.sPLot.Declare(String)
V.local.sDLot.Declare(String)
V.Local.sStartTime.Declare(String)
V.Local.sEndTime.Declare(String)
V.Local.dStartTime.Declare(Date)
V.Local.dEndTime.Declare(Date)
V.Local.fHours.Declare(Float)
V.Local.sSize.Declare(String)
V.Local.iCompleteCount.Declare(Long)
V.Local.fLength.Declare(Float)
V.Local.fWidth.Declare(Float)
V.Local.fQty.Declare(Float)
V.Local.fTotalArea.Declare(Float)
V.Local.sSheetAlloc.Declare(String)
V.Local.fIssue.Declare(Float)
V.Local.fArea.Declare(Float)
V.Local.sOrdinal.Declare(String)
V.Local.sMatSplit.Declare(String)


'reset udts for ncell
V.uGlobal.uTime.Redim(-1,-1)
V.uGlobal.uMaterial.Redim(-1,-1)
V.uGlobal.uDrop.Redim(-1,-1)
V.uGlobal.uTime.Redim(0,0)
V.uGlobal.uMaterial.Redim(0,0)
V.uGlobal.uDrop.Redim(0,0)



'read csv to string to split
F.Intrinsic.File.File2String(V.Args.ERPFILE,V.Local.sRow)
'split for each line
F.Intrinsic.String.Split(V.Local.sRow,V.Ambient.NewLine,V.Local.sRow)

'loop though all rows
F.Intrinsic.Control.For(V.Local.iCount,V.Local.sRow.LBound,V.Local.sRow.UBound,1)
	F.Intrinsic.String.SplitCSV(V.Local.sRow(v.Local.iCount),V.Local.sLine)
	V.Local.sLine.RedimPreserve(0,14)
	
	'select statement
	F.Intrinsic.Control.SelectCase(V.Local.sLine(0))

		'Case N
		'N, NestID, TotalSheets
		F.Intrinsic.Control.Case("N")
			
			'check to see if this is the first run or not
			F.Intrinsic.Control.If(V.Local.sNestID,=,"")
				V.Local.sNestID.Set(V.Local.sLine(1))
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.CallSub(Ncellcombine,"TotalArea",V.Local.fTotalArea,"Area",V.Local.fArea,"Qty",V.Local.fQty)
				V.Local.sNestID.Set(V.Local.sLine(1))
			F.Intrinsic.Control.EndIf
	
			'set qty and make sure its not 0
			F.Intrinsic.Control.If(V.Local.sLine(2).Long,>,0)
				V.Local.fQty.Set(V.Local.sLine(2).Float)
			F.Intrinsic.Control.Else
				V.Local.fQty.Set(1.00)
			F.Intrinsic.Control.EndIf


			'reset reused variables for next nestid
			V.Local.iMaterialCount.Set(0)
			V.Local.iDropCount.Set(0)
			V.Local.sPLot.Set("")
			V.Local.iPLot.Set(0)
			V.Local.sJob.Set("")
			V.Local.sJob.Redim(0,1)
			V.Local.fHours.Set(0)
			V.Local.sStartTime.Set("")
			V.Local.sEndTime.Set("")
			V.Local.sSize.Set("")
			V.uGlobal.uTime.Redim(-1,-1)
			V.uGlobal.uMaterial.Redim(-1,-1)
			V.uGlobal.uDrop.Redim(-1,-1)
			V.uGlobal.uComplete.Redim(-1,-1)
			V.uGlobal.uTime.Redim(0,0)
			V.uGlobal.uMaterial.Redim(0,0)
			V.uGlobal.uDrop.Redim(0,0)
			V.uGlobal.uComplete.Redim(0,0)
			V.Local.iCompleteCount.Set(0)
			V.Local.fTotalArea.Set(0)

			V.uGlobal.uComplete!MJob.Set(V.Local.fQty)
			
			

		'Case M
		'M, Material, WC, SheetID, SheetQty, SheetX, SheetY, SheetUsedX, SheetUsedY, Lot
		F.Intrinsic.Control.Case("M")

			'calculate the total area for the material
'			F.Intrinsic.Math.Evaluate("[v.local.sLine(4).long]*[v.local.sLine(5).float]*[v.local.sLine(6).float]+[v.local.fTotalArea]",V.Local.fTotalArea)
			F.Unofficial.Script.Eval("[v.local.sline(4).long]*[v.local.sline(5).float]*[v.local.sline(6).float]+[v.local.ftotalarea]",V.Local.fTotalArea)
			'sets the area for the part
			F.Intrinsic.Math.Mult(V.Local.sLine(5).Float,V.Local.sLine(6).Float,V.Local.fArea)

			'if P Lot has not been set yet set it
'			F.Intrinsic.Control.If(V.Local.sPLot,=,"")
'				F.Intrinsic.String.Split(V.Local.sLine(9),"+",V.Local.sPLot)
'			
'				'if plot count is less than the plot ubound then add it to the line
'				F.Intrinsic.Control.DoUntil(V.Local.iPLot,>,V.Local.sPLot.UBound)
'					V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iPLot)
'					V.uGlobal.uMaterial(v.Local.iPLot)!NestID.Set(V.Local.sNestID)
'					F.Intrinsic.String.Replace(V.Local.sPLot(v.Local.iPLot),"PO:","",V.Local.sPLot(v.Local.iPLot))
'					V.uGlobal.uMaterial(v.Local.iPLot)!Lot.Set(V.Local.sPLot(v.Local.iPLot).Left6)
'					F.Intrinsic.Math.Add(V.Local.iPLot,1,V.Local.iPLot)
'					
'				F.Intrinsic.Control.Loop
'			
'			F.Intrinsic.Control.EndIf

			'check to make sure that the ubound of material is not already greater then our count because of the lots above
'			F.Intrinsic.Control.If(V.uGlobal.uMaterial.UBound,<,V.Local.iMaterialCount)
'				V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iMaterialCount)
'			F.Intrinsic.Control.EndIf

			'check to see if material already in udt
			F.Intrinsic.String.Split(V.Local.sLine(1).Trim,"_",V.Local.sMatSplit)
			V.Local.sMatSplit.RedimPreserve(0,0)
			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sMatSplit.Trim,V.Local.sOrdinal)
			'if material not in udt then set it, if it is then dont set it
			F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")
				V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iMaterialCount)
				V.uGlobal.uMaterial(v.Local.iMaterialCount)!NestID.Set(V.Local.sNestID)
'				F.Intrinsic.String.Split(V.Local.sLine(1).Trim,"_",V.Local.sMatSplit)
'				V.Local.sMatSplit.RedimPreserve(0,0)
'				V.uGlobal.uMaterial(v.Local.iMaterialCount)!Material.Set(V.Local.sLine(1).Trim)
				V.uGlobal.uMaterial(v.Local.iMaterialCount)!Material.Set(V.Local.sMatSplit.Trim)
				V.uGlobal.uMaterial(v.Local.iMaterialCount)!Area.Set(V.Local.fArea)
				V.uGlobal.uMaterial(V.Local.iMaterialCount)!Qty.Set(V.Local.sLine(4).Trim)
				F.Intrinsic.Math.Add(V.Local.iMaterialCount,1,V.Local.iMaterialCount)
			F.Intrinsic.Control.Else
				'We have the material in the udt so lets add the qty together and set it
				F.Intrinsic.Math.Add(V.uGlobal.uMaterial(v.Local.sOrdinal)!Qty,V.Local.sLine(4).Float,V.uGlobal.uMaterial(v.Local.sOrdinal)!Qty)
			F.Intrinsic.Control.EndIf
				

		'Case P
		'P, PartStart, PartEnd, PartStartDate, PartEndDate, PartTimeHr, Material, Part, PartOrder, Seq, WC, FinQty, PartShtAlloc, Lot,
		F.Intrinsic.Control.Case("P")

			V.uGlobal.uComplete.RedimPreserve(0,V.Local.iCompleteCount)
			
			V.uGlobal.uComplete(v.Local.iCompleteCount)!NestID.Set(V.Local.sNestID)
			V.uGlobal.uComplete(v.Local.iCompleteCount)!TWorkOrder.Set(V.Local.sLine(8))
			F.Intrinsic.String.Split(V.Local.sLine(8),"-",V.Local.sJob)
			V.Local.sJob.RedimPreserve(0,1)
			V.uGlobal.uComplete(v.Local.iCompleteCount)!Job.Set(V.Local.sJob(0))
			V.uGlobal.uComplete(v.Local.iCompleteCount)!Suffix.Set(V.Local.sJob(1))
			V.uGlobal.uComplete(v.Local.iCompleteCount)!Seq.Set(V.Local.sLine(9))
			
			'formatting start and end times
'			F.Intrinsic.Date.ConvertTString(V.Local.sLine(1),"HH:NN.SS",V.Local.dStartTime)
'			F.Intrinsic.Date.ConvertTString(V.Local.sLine(2),"HH:NN.SS",V.Local.dEndTime)
			V.Local.dStartTime.Set(V.Local.sLine(1).TimeComp)
			V.Local.dEndTime.Set(V.Local.sLine(2).TimeComp)
'			F.Intrinsic.Date.DateDiff("N",V.Local.dStartTime,V.Local.dEndTime,V.Local.fHours)
'			F.Intrinsic.Math.Div(V.Local.fHours,60,V.Local.fHours)
'			F.Intrinsic.Math.Round(V.Local.fHours,2,V.Local.fHours)
			V.Local.fHours.Set(V.Local.sLine(5))

			F.Intrinsic.String.Format(V.Local.dStartTime,"HHNN",V.Local.sStartTime)
			F.Intrinsic.String.Format(V.Local.dEndTime,"HHNN",V.Local.sEndTime)
		
			V.uGlobal.uComplete(v.Local.iCompleteCount)!StartTime.Set(V.Local.sStartTime)
			V.uGlobal.uComplete(v.Local.iCompleteCount)!EndTime.Set(V.Local.sEndTime)
			V.uGlobal.uComplete(v.Local.iCompleteCount)!TTime.Set(V.Local.fHours.String)
			V.uGlobal.uComplete(v.Local.iCompleteCount)!TQty.Set(V.Local.sLine(11))
			V.uGlobal.uComplete(v.Local.iCompleteCount)!TEmployee.Set(V.Local.sLine(10).Right5)

			'calculate how much area was used on each job to find the issue amount
			F.Intrinsic.String.Split(V.Local.sLine(12),".",V.Local.sSheetAlloc)
			V.Local.sSheetAlloc.RedimPreserve(0,1)

			'multiplies the full number by the area and then adds the portion of the full area that was used to get the full issue amount
'			F.Intrinsic.Math.Evaluate("([V.Local.sLine(12).Float]/[V.Local.fQty])*[V.Local.fTotalArea]",V.Local.fIssue)
			F.Intrinsic.Math.Div(V.Local.sLine(12).Float,V.Local.fQty,V.Local.fIssue)
			F.Intrinsic.Math.Mult(V.Local.fIssue,V.Local.fTotalArea,V.Local.fIssue)
'			F.Intrinsic.String.Format(V.Local.fIssue,"#.0000",V.Local.fIssue)
			V.uGlobal.uComplete(v.Local.iCompleteCount)!TIssue.Set(V.Local.fIssue)

			F.Intrinsic.Math.Add(V.Local.iCompleteCount,1,V.Local.iCompleteCount)
			

		'Case D
		'D, Drop, Material, WC, SheetID, SheetQty, SheetX, SheetY, Lot
		F.Intrinsic.Control.Case("D")

			V.uGlobal.uDrop.RedimPreserve(0,V.Local.iDropCount)
			V.uGlobal.uDrop(v.Local.iDropCount)!NestID.Set(V.Local.sNestID)
'			V.uGlobal.uDrop(v.Local.iDropCount)!Material.Set(V.Local.sLine(1))
			F.Intrinsic.String.Split(V.Local.sLine(1).Trim,"_",V.Local.sMatSplit)
			V.Local.sMatSplit.RedimPreserve(0,0)
			V.uGlobal.uDrop(v.Local.iDropCount)!Material.Set(V.Local.sMatSplit.Trim)
			F.Intrinsic.Math.Round(V.Local.sLine(5),2,V.Local.fLength)
			F.Intrinsic.Math.Round(V.Local.sLine(6),2,V.Local.fWidth)
			F.Intrinsic.String.Build("{0}x{1}",V.Local.fLength,V.Local.fWidth,V.Local.sSize)
			V.uGlobal.uDrop(v.Local.iDropCount)!Size.Set(V.Local.sSize)
			F.Intrinsic.Math.Add(V.Local.iDropCount,1,V.Local.iDropCount)

	F.Intrinsic.Control.EndSelect



F.Intrinsic.Control.Next(V.Local.iCount)

'completed but still need to finish the last one
F.Intrinsic.Control.CallSub(Ncellcombine,"TotalArea",V.Local.fTotalArea,"Area",V.Local.fArea,"Qty",V.Local.fQty)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("ReadNcell_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.ReadNcell.End

Program.Sub.NcellCombine.Start
F.Intrinsic.Control.SetErrorHandler("NcellCombine_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iUbound.Declare(Long)
V.Local.sNestID.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.fDrop.Declare(Float)
V.Local.fTotalDrop.Declare(Float)
V.Local.fTotalIssue.Declare(Float)
V.Local.fAdditional.Declare(Float)
V.Local.fTotalParts.Declare(Float)
V.Local.fTemp.Declare(Float)

V.Local.iUbound.Redim(0,2)
V.Local.iUbound(0).set(V.uGlobal.uComplete.UBound)
V.Local.iUbound(1).Set(V.uGlobal.uMaterial.UBound)
V.Local.iUbound(2).Set(V.uGlobal.uDrop.UBound)

F.Intrinsic.Variable.ArrayMax(V.Local.iUbound,V.Local.iUbound(0))
V.Local.iUbound.RedimPreserve(0,0)
V.uGlobal.uComplete.RedimPreserve(0,V.Local.iUbound)

V.Local.sNestID.Set(V.uGlobal.uComplete!NestID)
F.Intrinsic.Control.DoUntil(V.Local.iCount,>,V.Local.iUbound)

	F.Intrinsic.Control.If(V.Local.iCount,<=,V.uGlobal.uMaterial.UBound)
		'setting information to complete from material
		V.uGlobal.uComplete(v.Local.iCount)!NestID.Set(V.Local.sNestID)
		V.uGlobal.uComplete(v.Local.iCount)!MMaterial.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material)
		V.uGlobal.uComplete(v.Local.iCount)!MLot.Set(V.uGlobal.uMaterial(v.Local.iCount)!Lot)
		V.uGlobal.uComplete(v.Local.iCount)!MArea.Set(V.uGlobal.uMaterial(v.Local.iCount)!Area)
		V.uGlobal.uComplete(V.Local.iCount)!MQty.Set(V.uGlobal.uMaterial(V.Local.iCount)!Qty)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.Local.iCount,<=,V.uGlobal.uDrop.UBound)
		'setting information to complete from drop
		V.uGlobal.uComplete(v.Local.iCount)!NestID.Set(V.Local.sNestID)
		V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Set(V.uGlobal.uDrop(v.Local.iCount)!Material)
		V.uGlobal.uComplete(v.Local.iCount)!DSize.Set(V.uGlobal.uDrop(v.Local.iCount)!Size)
		'find out the total drop size
		F.Intrinsic.String.Split(V.uGlobal.uDrop(v.Local.iCount)!Size,"x",V.Local.fDrop)
		V.Local.fDrop.RedimPreserve(0,1)
		F.Intrinsic.Math.Mult(V.Local.fDrop(0),V.Local.fDrop(1),V.Local.fDrop)
		V.Local.fDrop.RedimPreserve(0,0)
		F.Intrinsic.Math.Add(V.Local.fTotalDrop,V.Local.fDrop,V.Local.fTotalDrop)
	F.Intrinsic.Control.EndIf
	
	'add the parts to get the total count of parts made
	F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTotalParts)

	'add all of the issue together if there is one
	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,<>,0)
		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTotalIssue,V.Local.fTotalIssue)
	F.Intrinsic.Control.EndIf

	'add id to udt
	V.uGlobal.uComplete(v.Local.iCount)!ID.Set(V.Local.iCount)

	F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iCount)
F.Intrinsic.Control.Loop

'find out the amount of waste
F.Intrinsic.Math.Add(V.Local.fTotalIssue,V.Local.fTotalDrop,V.Local.fTotalDrop)
F.Intrinsic.Math.Sub(V.Args.TotalArea.Float,V.Local.fTotalDrop,V.Local.fTotalDrop)

'loop through the combined udt again to issue the percentage of waste to each job
'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
'	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,<>,"")
'		F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Args.TotalArea.Float,V.Local.fAdditional)
'		F.Intrinsic.Math.Mult(V.Local.fAdditional,V.Local.fTotalDrop,V.Local.fAdditional)
'		F.Intrinsic.String.Format(V.Local.fAdditional,"#.0000",V.Local.fAdditional)
'		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fAdditional,V.Local.fAdditional)
'		V.uGlobal.uComplete(v.Local.iCount)!TIssue.Set(V.Local.fAdditional)
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.Next(V.Local.iCount)

'Took this out to see if this will issue the correct amount.
'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
'	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,<>,"")
'		F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTemp)
'		F.Intrinsic.Math.Mult(V.Local.fTemp,V.Local.fTotalDrop,V.Local.fTemp)
'		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTemp,V.uGlobal.uComplete(v.Local.iCount)!TIssue)
'		V.Local.fTemp.Set(0)
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.Next(V.Local.iCount)

'add the completed udt to the table
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!StartTime,"START_TIME")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!EndTime,"END_TIME")

'delete nestid first
F.Intrinsic.String.Build("DELETE FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' ",V.Local.sNestID,V.Local.sSQL)
F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)
F.ODBC.Con!rst.Close
'NCELL save to ncell table
F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst","SELECT * FROM GCG_3744_NCELL_SCRN")

F.Intrinsic.Variable.SaveUDTToRecordSet("Con","rst","v.uGlobal.uComplete")
F.ODBC.Con!rst.Close

'take away the references for other uses
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!StartTime,"")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!EndTime,"")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("NcellCombine_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.NcellCombine.End

Program.Sub.NcellBuildstyle.Start
F.Intrinsic.Control.SetErrorHandler("NcellBuildstyle_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sEmployee.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iCount2.Declare(Long)
V.Local.iStyle.Declare(Long)
V.Local.sOrdinal.Declare(String)
V.Local.sWC.Declare(String)

Gui.Ncell_Trumpf_Interface.gsfgNTime.Cols(5)
Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(2)
Gui.Ncell_Trumpf_Interface.gsfgNTime.FixedRows(1)
Gui.Ncell_Trumpf_Interface.gsfgNTime.SetColumnPercentages(".3:.19:.19:.319:.0")

'Ncell Time buildstyle
'Col 0 Work Order Header
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,0,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,0,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(0,0,"Work Order")


'Col 0 Work Order Line
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,0,"Format","Alignment",2)

'Col 1 Qty Header
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,1,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,1,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(1,0,"Qty")

'Col 1 Qty Line
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,1,"Format","Alignment",6)

'Col 2 Time Header
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,2,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,2,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(2,0,"Time")

'Col 2 Time Line
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,2,"Format","Alignment",6)

'Col 3 Employee Header
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,3,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,3,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.RowHeight(0,400)
F.Intrinsic.String.Build("Employee{0}Number",V.Ambient.NewLine,V.Local.sEmployee)
Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(3,0,V.Local.sEmployee)

'Col 3 Employee Line
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,3,"Format","Alignment",6)
'employee style 3 to lock all other cells besides the first
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(3,3,"Type","Locked",False)

'Col 4 Work Center
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,4,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,4,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,4,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,0,"WC")

'Col 4 Work Center Line
F.ODBC.Connection!Con.ExecuteAndReturn("SELECT WORKCENTER FROM V_WORKGROUP_LINE WHERE WORKGROUP = '*LAS' ",V.Local.sWC)
F.Intrinsic.String.Replace(V.Local.sWC,"*!*","",V.Local.sWC)
F.Intrinsic.String.Replace(V.Local.sWC,"#$#","*!*",V.Local.sWC)
'Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,4,"Type","DropDownList",V.Local.sWC)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,4,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,4,"Format","Alignment",6)
Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(3,4,"Type","DropDownList",V.Local.sWC)

Gui.Ncell_Trumpf_Interface.gsfgNTime.ApplyStyle(0,1)

'Ncell Material Buildstyle
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Cols(8)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(2)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.FixedRows(1)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.SetColumnPercentages(".25:.0:.25:.25:.25:.149:.05:.05")
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.SetColumnPercentages(".249:.0:.205:.205:.205:.075:.03:.03")



'Col 0 Material Header
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,0,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,0,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(0,0,"Material")

''Col 0 Material Line
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,0,"Type","Locked",True)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,0,"Format","Alignment",2)

'Col 1 Job Header
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,1,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,1,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(1,0,"WC")

''Col 1 Job Line
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,1,"Type","Dropdownlist",V.Local.sWC)

'Col 2 Lot Header
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,2,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,2,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(2,0,"Lot")

''Col 2 Lot Line
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)

'Col 3 Bin Header
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,3,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,3,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(3,0,"Bin")


''Col 3 Bin Line
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,3,"Type","Dropdownlist","")
''this will be locked until a lot is picked
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,3,"Type","Locked",True)

'Col 4 Serial Header
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,4,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,4,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,4,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(4,0,"Dimensions")

'Col 5 Qty Header
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,5,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,5,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,5,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(5,0,"Qty")

''Col 4 Qty Line
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,4,"Type","Locked",False)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,4,"Format","Alignment",6)

'Col 6 Add Header
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,6,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,6,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,6,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(6,0,"+")

''Col 5 Add Line
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Color","Fore",V.Color.Green)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Format","Alignment",4)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Type","Command","+")

'Col 7 Delete Header
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,7,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,7,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,7,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(7,0,"-")

''Col 6 Delete Line
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,6,"Color","Fore",V.Color.Red)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,6,"Format","Alignment",4)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,6,"Type","Command","-")

Gui.Ncell_Trumpf_Interface.gsfgNMaterial.ApplyStyle(0,1)

'Ncell Drop Buildstyle
Gui.Ncell_Trumpf_Interface.gsfgNDrop.Cols(8)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(2)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.FixedRows(1)
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.SetColumnPercentages(".249:.0:.1875:.1875:.1875:.1875")
Gui.Ncell_Trumpf_Interface.gsfgNDrop.SetColumnPercentages(".249:.0:.205:.125:.205:.155:.03:.03")

'Col 0 Material Header
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,0,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,0,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(0,0,"Material")

''Col 0 Material Line
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Type","Locked",True)
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Format","Alignment",2)

'Col 1 Job Header
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,1,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,1,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,1,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(1,0,"Work Order")

''Col 1 Job Line
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,1,"Type","Dropdownlist",V.Args.JOBS)

'Col 2 Lot Header
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,2,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,2,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,2,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(2,0,"Lot")

''Col 2 Lot Line
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)

'Col 3 Bin Header
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,3,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,3,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,3,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(3,0,"Bin")

''Col 3 Bin Line
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Dropdownlist","")
''this will be locked until a lot is picked
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Locked",True)

'Col 4 Bin Header
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,4,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,4,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,4,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(4,0,"Dimensions")

'Col 5 Size Header
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,5,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,5,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,5,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(5,0,"Size")

'Col 6 Add Header
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,6,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,6,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,6,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(6,0,"+")

'Col 7 Delete Header
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,7,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,7,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,7,"Fontstyle","Bold",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(7,0,"-")

''Col 4 Size Line
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Type","Locked",True)
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Format","Alignment",6)

'Drop buildstyle lines
'Col 0 Material Line
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Type","Locked",True)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Format","Alignment",2)
'Col 2 Lot Line
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,2,"Type","Dropdownlist","")
'Col 3 Bin Line
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Dropdownlist","")
'this will be locked until lot is picked
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Locked",True)
'Col 4 Serial Line
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Type","Dropdownlist","")
'this will be locked until lot is picked
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Type","Locked",True)
'Col 5 Size Line
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,5,"Format","Alignment",6)
'Col 6 Add Line
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,6,"Color","Fore",V.Color.Green)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,6,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,6,"Type","Command","+")
'Col 7 Delete Line
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,7,"Color","Fore",V.Color.Red)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,7,"Format","Alignment",4)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,7,"Type","Command","-")

Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(0,1)

V.Local.iStyle.Set(3)

'loop through material buildstyle to create new ones as needed for both material and drop
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)
	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,<>,"")
		F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Style,=,"","OR",V.uGlobal.uMaterial(v.Local.iCount)!Style,=,0)
			'Material buildstyle lines
			'Col 0 Material Line
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)
			'Col 2 Lot Line
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)
			'Col 3 Bin Line
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")
			'locked until they pick a lot
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)
			'Col 4 Serial Line
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")
			'locked until they pick a lot
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)
			'Col 5 Qty Line
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,5,"Type","Locked",False)
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Format","Alignment",6)
			'Col 6 Add Line
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,6,"Type","Command","+")
			'Col 7 Delete Line
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)
			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,7,"Type","Command","-")

			'Drop buildstyle lines
			'Col 0 Material Line
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)
			'Col 2 Lot Line
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)
			'Col 3 Bin Line
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")
			'this will be locked until lot is picked
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)
			'Col 4 Serial Line
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")
			'this will be locked until lot is picked
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)
			'Col 5 Size Line
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)
			'Col 6 Add Line
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Type","Command","+")
			'Col 7 Delete Line
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Type","Command","-")

			'get all of the materials with this material and set its style
			V.Local.sOrdinal.Redim(0,0)
			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uMaterial(v.Local.iCount)!Material,V.Local.sOrdinal)
			F.Intrinsic.Control.If(V.Local.sOrdinal,<>,"")
				F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
				F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)
					V.uGlobal.uMaterial(v.Local.sOrdinal(v.Local.iCount2))!Style.Set(V.Local.iStyle)
				F.Intrinsic.Control.Next(V.Local.iCount2)
			F.Intrinsic.Control.EndIf

			'add one to the style for the next material type
			F.Intrinsic.Math.Add(V.Local.iStyle,1,V.Local.iStyle)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

'V.Local.iStyle.Set(3)
''loop through Drop buildstyle to create new ones as needed
'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)
'	F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Material,<>,"")
'		F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Style,=,"","OR",V.uGlobal.uDrop(v.Local.iCount)!Style,=,0)
'			'Drop buildstyle lines
'			'Col 0 Material Line
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)
'			'Col 2 Lot Line
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uDrop(v.Local.iCount)!LotDDL)
'			'Col 3 Bin Line
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")
'			'this will be locked until lot is picked
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)
'			'Col 4 Serial Line
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")
'			'this will be locked until lot is picked
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)
'			'Col 5 Size Line
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)
'			'Col 6 Add Line
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Type","Command","+")
'			'Col 7 Delete Line
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)
'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Type","Command","-")
'
'
'
'			'get all of the materials with this material and set its style
'			V.Local.sOrdinal.Redim(0,0)
'			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uDrop!Material,V.uGlobal.uDrop(v.Local.iCount)!Material,V.Local.sOrdinal)
'			F.Intrinsic.Control.If(V.Local.sOrdinal,<>,"")
'				F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
'				F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)
'					V.uGlobal.uDrop(v.Local.sOrdinal(v.Local.iCount2))!Style.Set(V.Local.iStyle)
'				F.Intrinsic.Control.Next(V.Local.iCount2)
'			F.Intrinsic.Control.EndIf
'
'			'add one to the style for the next material type
'			F.Intrinsic.Math.Add(V.Local.iStyle,1,V.Local.iStyle)
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.Next(V.Local.iCount)


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("NcellBuildstyle_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.NcellBuildstyle.End

Program.Sub.NcellLoadFG.Start
F.Intrinsic.Control.SetErrorHandler("NcellLoadFG_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iRows.Declare(Long)
V.Local.sOrdinal.Declare(String)
V.Local.sWC.Declare(String)
V.Local.sSQL.Declare(String)

'load time udt to time flexgrid
'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uTime!Job,False)
Gui.Ncell_Trumpf_Interface.gsfgNTime.LoadFromUDT("uGlobal.uTime","Job::0*!*Qty::1*!*Time::2",2)
Gui.Ncell_Trumpf_Interface.gsfgNTime.ApplyStyle(1,3)
Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(3,1,V.uGlobal.uTime!Employee)
V.Global.iRow.Set(1)
V.Global.iColumn.Set(3)
V.Global.sControlName.Set("gsfgNTime")
F.Intrinsic.Control.CallSub(Gsfgtimeposttext)
'loop through time and set the first work center as the default for all
F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,1,V.Local.iRows)
'F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)
'	F.Intrinsic.Control.If(V.Local.sWC,=,"")
		F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE FROM GCG_3744_NCELL_SCRN WHERE TJOB = '{0}' AND NESTID = '{1}' ",V.uGlobal.uTime!Job,V.uGlobal.uTime!NestID,V.Local.sSQL)
		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstJob",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.Con!rstJob.EOF,=,False)
			F.Intrinsic.String.Build("SELECT TOP 1 SAR FROM APSV3_UBDETAIL WHERE JOB = '{0}' AND SFX = '{1}' AND SEQ = '{2}' ORDER BY BNO ASC ",V.ODBC.Con!rstJob.FieldValTrim!JOB,V.ODBC.Con!rstJob.FieldValTrim!SUFFIX,V.ODBC.Con!rstJob.FieldValTrim!SEQUENCE,V.Local.sSQL)
			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstWC",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Con!rstWC.EOF,=,False)
				V.Local.sWC.Set(V.ODBC.Con!rstWC.FieldValTrim!SAR)
			F.Intrinsic.Control.EndIf
			F.ODBC.Con!rstWC.Close
		F.Intrinsic.Control.EndIf
		F.ODBC.Con!rstJob.Close
F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)
		Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,V.Local.iCount,V.Local.sWC.Trim)
'	F.Intrinsic.Control.Else
'		Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,1,V.Local.sWC.Trim)
'	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

'load material udt to material flexgrid
'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uMaterial!Material,0)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.LoadFromUDT("uGlobal.uMaterial","Material::0*!*Qty::4",2)
F.Intrinsic.Math.Add(V.uGlobal.uMaterial.UBound,2,V.Local.iRows)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(V.Local.iRows)
V.Local.iRows.Set(1)
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)
	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(0,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)
	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(5,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Qty)
	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Style)
	F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)
F.Intrinsic.Control.Next(V.Local.iCount)
'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(1,1,V.uGlobal.uTime!Job)

'load drop udt to drop flexgrid
'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uDrop!Material,0)
'Gui.Ncell_Trumpf_Interface.gsfgNDrop.LoadFromUDT("uGlobal.uDrop","Material::0*!*Lot::2*!*Size::4",2)
F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,<>,-1)
	F.Intrinsic.Math.Add(V.uGlobal.uDrop.UBound,2,V.Local.iRows)
	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(V.Local.iRows)
	V.Local.iRows.Set(1)
	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)
		Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(0,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Material.Trim)
		Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(5,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Size.Trim)
		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uDrop(v.Local.iCount)!Material,V.Local.sOrdinal)
		F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
		Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)
		F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf
'F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNDrop.Rows,1,V.Local.iRows)
'F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)
'	Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(1,V.Local.iCount,V.uGlobal.uTime!Job)
'F.Intrinsic.Control.Next(V.Local.iCount)

Gui.Ncell_Trumpf_Interface.gsfgNTime.ApplyStyle(1,3)

F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,=,-1)
	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(2)
	Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(1,2)
F.Intrinsic.Control.endif

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("NcellLoadFG_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.NcellLoadFG.End

program.sub.cmbonnestid_click.start
F.Intrinsic.Control.SetErrorHandler("cmbonnestid_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sNestID.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sSheets.Declare(String)
V.Local.sLots.Declare(String)
V.Local.sJobs.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.iCount.Declare(Long)

F.Intrinsic.UI.InvokeWaitDialog("Loading Nest","Loading")
Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(1)

'Wipe out Trumpf flexgrid
Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(1)
Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)
Gui.Ncell_Trumpf_Interface.cmboTNestID.Text("")

V.Local.sNestID.Set(V.Screen.Ncell_Trumpf_Interface!cmboNNestID.Text)

'Load the uTime udt
F.Intrinsic.UI.ChangeWaitStatus("Loading Time Table",20)
F.Intrinsic.String.Build("SELECT NESTID, TJOB, TQTY, TTIME, TEMPLOYEE, TISSUE ,ID FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND TJOB <> '' AND CLOSED <> 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)
F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uTime",False,100)
F.ODBC.Con!rst.Close

'Load the uMaterial udt
F.Intrinsic.UI.ChangeWaitStatus("Loading Material Table",40)
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"MJOB")
F.Intrinsic.String.Build("SELECT NESTID, MMATERIAL, MQTY, MJOB, ID, MAREA FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND MMATERIAL <> '' AND CLOSED <> 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)
F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uMaterial",False,100)
F.ODBC.Con!rst.Close
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"")

'Load to Drop udt
F.Intrinsic.UI.ChangeWaitStatus("Loading Drops Table",60)
F.Intrinsic.String.Build("SELECT NESTID, DMATERIAL, DSIZE, ID, DJOB FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND DMATERIAL <> '' AND CLOSED <> 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)
F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uDrop",False,100)
F.ODBC.Con!rst.Close

'gather the lots and pass it to the buildstyle
F.Intrinsic.UI.ChangeWaitStatus("Loading Lots",80)
F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)
	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,<>,"")
		V.Local.sPart.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)
		F.Intrinsic.String.Build("SELECT DISTINCT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY > 0 ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTemp)
		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)
'		F.Intrinsic.Control.If(V.Local.sTemp,<>,"","AND",V.Local.sLots,<>,"")
'			F.Intrinsic.String.Build("{0}#$#{1}",V.Local.sLots,V.Local.sTemp,V.Local.sLots)
'		F.Intrinsic.Control.ElseIf(V.Local.sTemp,<>,"")
'			V.Local.sLots.Set(V.Local.sTemp)
'		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(V.Local.sTemp,<>,"")
			F.Intrinsic.String.Replace(V.Local.sTemp,"#$#","*!*",V.Local.sTemp)
			V.uGlobal.uMaterial(v.Local.iCount)!LotDDL.Set(V.Local.sTemp)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)
	F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Material,<>,"")
		V.Local.sPart.Set(V.uGlobal.uDrop(v.Local.iCount)!Material.Trim)
		F.Intrinsic.String.Build("SELECT DISTINCT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY > 0 ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTemp)
		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)
		F.Intrinsic.Control.If(V.Local.sTemp,<>,"")
			F.Intrinsic.String.Replace(V.Local.sTemp,"#$#","*!*",V.Local.sTemp)
			V.uGlobal.uDrop(v.Local.iCount)!LotDDL.Set(V.Local.sTemp)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)
'F.Intrinsic.String.Replace(V.Local.sLots,"#$#","*!*",V.Local.sLots)
'remove duplicates
'F.Intrinsic.String.Split(V.Local.sLots,"*!*",V.Local.sLots)
'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLots,V.Local.sLots)
'F.Intrinsic.String.Join(V.Local.sLots,"*!*",V.Local.sLots)

'gather all the work orders and pass to the buildstyle for the drops
F.Intrinsic.UI.ChangeWaitStatus("Loading Work Orders",85)
'F.Intrinsic.String.Build("SELECT TJOB FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND TJOB <> '' ",V.Local.sNestID,V.Local.sSQL)
'F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sJobs)
'F.Intrinsic.String.Replace(V.Local.sJobs,"*!*","",V.Local.sJobs)
'F.Intrinsic.String.Replace(V.Local.sJobs,"#$#","*!*",V.Local.sJobs)
''remove duplicates
'F.Intrinsic.String.Split(V.Local.sJobs,"*!*",V.Local.sJobs)
'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sJobs,V.Local.sJobs)
'F.Intrinsic.String.Join(V.Local.sJobs,"*!*",V.Local.sJobs)

'F.Intrinsic.String.Build("Total Sheets: {0}",V.uGlobal.uMaterial!Qty,V.Local.sSheets)
F.Intrinsic.String.Build("Total Sheets: {0}",V.uGlobal.uMaterial!Job,V.Local.sSheets)
Gui.Ncell_Trumpf_Interface.lblNSheets.Caption(V.Local.sSheets)

'set the qty for the sheets
'F.Intrinsic.String.Build("SELECT MJOB, MMATERIAL, (TISSUE/MAREA) AS SHEET FROM GCG_3744_NELL_SCRN WHERE NESTID = '{0}' AND MJOB <> '' ORDER BY ID ASC",V.uGlobal.uMaterial!NestID,V.Local.sSQL)
'F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstQty",V.Local.sSQL)
'V.Local.iCount.Set(0)
'F.Intrinsic.Control.DoUntil(V.ODBC.Con!rstQty.EOF,=,True)
'	F.Intrinsic.Control.If(V.ODBC.Con!rstQty.FieldValFloat!SHEET,>,V.ODBC.Con!rstQty.FieldValLong!SHEET)
'		F.Intrinsic.Math.Add(V.ODBC.Con!rstQty.FieldValLong!SHEET,1,V.uGlobal.uMaterial(V.Local.iCount)!Qty)
'	F.Intrinsic.Control.Else
'		V.uGlobal.uMaterial(V.Local.iCount)!Qty.Set(V.ODBC.Con!rstQty.FieldValLong!SHEET)
'	F.Intrinsic.Control.EndIf
'	F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iCount)
'	F.ODBC.Con!rstQty.MoveNext
'F.Intrinsic.Control.Loop
'F.ODBC.Con!rstQty.Close

F.Intrinsic.UI.ChangeWaitStatus("Loading Buildstyle",90)
'F.Intrinsic.Control.CallSub(Ncellbuildstyle,"LOTS",V.Local.sLots,"JOBS",V.Local.sJobs)
F.Intrinsic.Control.CallSub(Ncellbuildstyle)
F.Intrinsic.UI.ChangeWaitStatus("Loading Information to Grid",100)
F.Intrinsic.Control.CallSub(Ncellloadfg)
F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmbonnestid_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

program.sub.cmbonnestid_click.End

program.sub.tabnest_click.start
F.Intrinsic.Control.SetErrorHandler("tabnest_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'changed the tab so repopulate the nest dropdown
'F.Intrinsic.Control.CallSub(Popdropdown)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("tabnest_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

program.sub.tabnest_click.End

Program.Sub.gsfgTimePostText.Start
F.Intrinsic.Control.SetErrorHandler("gsfgTimePostText_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sEmployee.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.iRows.Declare(Long)

'Time grid employee column
F.Intrinsic.Control.If(V.Global.iRow,=,1,"AND",V.Global.iColumn,=,3)

	Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].Commit
	'get the entered employee
	Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].GetTextMatrix(3,1,V.Local.sEmployee)
	'check to make sure this is a legit employee
	F.Intrinsic.String.Build("SELECT EMPLOYEE FROM V_EMPLOYEE_MSTR WHERE EMPLOYEE = '{0}' ",V.Local.sEmployee.Trim,V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,<>,"")
		'this is a legit employee so loop through the table and add name to all rows and lock the other cells besides the first
		F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface![v.Global.sControlName].Rows,1,V.Local.iRows)
		F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)
			Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].TextMatrix(3,V.Local.iCount,V.Local.sEmployee.Trim)
		F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Control.Else
		'no employee found, notify and clear the cells
		F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface![v.Global.sControlName].Rows,1,V.Local.iRows)
		F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)
			Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].TextMatrix(3,V.Local.iCount,"")
		F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Control.EndIf
		
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgTimePostText_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.gsfgTimePostText.End

Program.Sub.FlexSchedule.Start
F.Intrinsic.Control.SetErrorHandler("FlexSchedule_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sScheduleNumber.Declare(String)
V.Local.iIncrement.Declare(Long)
V.Local.sIncrement.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sWorkCenter.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sLine.Declare(String)
V.Local.sFiller.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.sFiller2.Declare(String)
V.Local.sMJob.Declare(String)
V.Local.sMSuffix.Declare(String)
V.Local.sMSeq.Declare(String)
V.Local.sPrint.Declare(String)


'uploading flex schedule

'get the highest schedule number if null then set it to 1
'F.ODBC.Connection!Con.ExecuteAndReturn("SELECT IF(MAX(SCHEDULE) IS NOT NULL,MAX(SCHEDULE),1) FROM V_JOB_CT_FLX_SCHD ",V.Local.sRet)
'F.Intrinsic.String.Replace(V.Local.sRet,"*!*","",V.Local.sScheduleNumber)
'add one to the highest number
'F.Intrinsic.Math.Add(V.Local.sScheduleNumber.Long,1,V.Local.sScheduleNumber)
f.ODBC.Connection!Con.GetID("V_JOB_CT_FLX_SCHD","SCHEDULE",TRUE,V.Local.sScheduleNumber)
F.Intrinsic.String.Format(V.Local.sScheduleNumber,"000000",V.Local.sScheduleNumber)

F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)
	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!Job,<>,"")
		'Add increment
		F.Intrinsic.Math.Add(V.Local.iIncrement,1,V.Local.iIncrement)
		F.Intrinsic.String.Format(V.Local.iIncrement,"000000",V.Local.sIncrement)

		V.Local.sJob.Set(V.uGlobal.uComplete(v.Local.iCount)!Job)
		V.Local.sSuffix.Set(V.uGlobal.uComplete(v.Local.iCount)!Suffix)
		V.Local.sMJob.Set(V.uGlobal.uComplete(v.Local.iCount)!Job)
		V.Local.sMSuffix.Set(V.uGlobal.uComplete(v.Local.iCount)!Suffix)
		V.Local.sSeq.Set(V.uGlobal.uComplete(V.Local.iCount)!Seq)

'		V.Local.sPart.Set(V.uGlobal.uComplete!MMaterial)
		'if mmaterial is not blank then set it, if it is blank thens set it to the default mmaterial because there is only one material.
'		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!MMaterial,<>,"")
'			V.Local.sPart.Set(V.uGlobal.uComplete(v.Local.iCount)!MMaterial)
'		F.Intrinsic.Control.Else
'			V.Local.sPart.Set(V.uGlobal.uComplete(v.Local.iCount)!MMaterial)
'		F.Intrinsic.Control.EndIf

		'search for the material sequence
		F.Intrinsic.String.Build("SELECT SEQ, PART FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ < '{2}' ORDER BY SEQ ASC",V.Local.sMJob.Trim,V.Local.sMSuffix.Trim,V.Local.sSeq,V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sMSeq)
'		F.Intrinsic.String.Replace(V.Local.sMSeq,"*!*","",V.Local.sMSeq)
		F.Intrinsic.String.Split(V.Local.sMSeq,"*!*",V.Local.sMSeq)
		V.Local.sMSeq.RedimPreserve(0,1)
		V.Local.sPart.Set(V.Local.sMSeq(1))
		V.Local.sMSeq.RedimPreserve(0,0)

		'search for the work center, part and sequence
		F.Intrinsic.String.Build("SELECT TOP 1 SEQ, PART AS WC FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ > '{2}' AND LMO = 'L' ORDER BY SEQ ASC",V.Local.sJob.Trim,V.Local.sSuffix.Trim,V.Local.sSeq.Trim,V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWorkCenter)
		F.Intrinsic.String.Split(V.Local.sWorkCenter,"*!*",V.Local.sWorkCenter)
		V.Local.sWorkCenter.RedimPreserve(0,1)
		V.Local.sSeq.Set(V.Local.sWorkCenter(0))
		V.Local.sWorkCenter.Set(V.Local.sWorkCenter(1))

		'if wc is not BO then exit
		F.Intrinsic.Control.If(V.Local.sWorkCenter.Left2,<>,"BO")
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf

		V.Local.sFiller.Set("000000999999")
		V.Local.sFiller2.Set("000000999999")
		'padd all of the paramaters to fit into the file
		F.Intrinsic.String.RPad(V.Local.sScheduleNumber," ",9,V.Local.sScheduleNumber)
		F.Intrinsic.String.RPad(V.Local.sIncrement," ",6,V.Local.sIncrement)
		F.Intrinsic.String.RPad(V.Local.sMJob," ",6,V.Local.sMJob)
		F.Intrinsic.String.RPad(V.Local.sMSuffix," ",3,V.Local.sMSuffix)
		F.Intrinsic.String.RPad(V.Local.sMSeq," ",11,V.Local.sMSeq)
		
		F.Intrinsic.String.RPad(V.Local.sJob," ",6,V.Local.sJob)
		F.Intrinsic.String.RPad(V.Local.sSuffix," ",3,V.Local.sSuffix)
		F.Intrinsic.String.RPad(V.Local.sSeq," ",6,V.Local.sSeq)
		F.Intrinsic.String.RPad(V.Local.sFiller," ",37,V.Local.sFiller)
		F.Intrinsic.String.RPad(V.Local.sWorkCenter," ",4,V.Local.sWorkCenter)
		F.Intrinsic.String.RPad(V.Local.sPart," ",25,V.Local.sPart)
		F.Intrinsic.String.RPad(V.Local.sFiller2," ",12,V.Local.sFiller2)
		F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}",V.Local.sLine,V.Local.sScheduleNumber,V.Local.sIncrement,V.Local.sMJob,V.Local.sMSuffix,V.Local.sMSeq,V.Local.sJob,V.Local.sSuffix,V.Local.sSeq,V.Local.sFiller,V.Local.sWorkCenter,V.Local.sPart,V.Local.sFiller2,V.Ambient.NewLine,V.Local.sLine)

	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.iCount)

'SCHED.txt that is read by UPLSCHED
F.Intrinsic.String.Build("{0}\SCHED.TXT",V.Caller.FilesDir,V.Local.sFileName)

F.Intrinsic.File.String2File(V.Local.sFileName,V.Local.sLine)
'uploads schedule in append and screenless mode
F.Global.General.CallWrapperSync(6000,"50!*!NS")

F.Intrinsic.String.Left(V.Local.sScheduleNumber,6,V.Local.sScheduleNumber)
'adds the flexid to the table for later use
F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)
	F.Intrinsic.String.Build("UPDATE GCG_3744_TRUMPF_SCRN SET FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)
F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)
	F.Intrinsic.String.Build("UPDATE GCG_3744_NCELL_SCRN SET FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)
F.Intrinsic.Control.EndIf
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

'Print flex schedule
F.Intrinsic.String.Build("000000!*!999999!*!{0}!*!000!*!{0}!*!000!*!Y!*!Y",V.Local.sScheduleNumber,V.Local.sPrint)
F.Global.General.CallWrapperSync(900300,V.Local.sPrint)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("FlexSchedule_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.FlexSchedule.End

Program.Sub.gsfgTimeMouseDown.Start
F.Intrinsic.Control.SetErrorHandler("gsfgTimeMouseDown_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'Time grid Employee column
F.Intrinsic.Control.If(V.Args.MouseCol,=,3,"AND",V.Args.MouseRow,=,1)
	V.Global.iRow.Set(V.Args.MouseRow)
	V.Global.iColumn.Set(V.Args.MouseCol)
	V.Global.sControlName.Set(V.Args.ControlName)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgTimeMouseDown_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.gsfgTimeMouseDown.End

program.sub.cmdflexsched_click.start
F.Intrinsic.Control.SetErrorHandler("cmdflexsched_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iWidth.Declare(Long)
V.Local.sColumn.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sParam.Declare(String)

F.Intrinsic.String.Split("1000*!*1500","*!*",V.Local.iWidth)
F.Intrinsic.String.Split("Nest ID*!*Schedule Number","*!*",V.Local.sColumn)

'create browser for all closed nestid's that show their flexid's so they can be reprinted
F.Intrinsic.UI.Browser("Flex Schedule Browser","Con","SELECT NESTID, FLEXID FROM GCG_3744_TRUMPF_SCRN WHERE CLOSED = 'Y' UNION SELECT NESTID, FLEXID FROM GCG_3744_NCELL_SCRN WHERE CLOSED = 'Y' ORDER BY NESTID ASC",V.Local.sColumn,V.Local.iWidth,V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	V.Local.sRet.RedimPreserve(0,1)
	F.Intrinsic.String.Build("V000000!*!999999!*!{0}!*!000!*!{0}!*!000!*!Y!*!Y",V.Local.sRet(1),V.Local.sParam)
	F.Global.General.CallWrapperSync(900300,V.Local.sParam)
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdflexsched_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

program.sub.cmdflexsched_click.End

Program.Sub.gsfgLostFocus.Start
F.Intrinsic.Control.SetErrorHandler("gsfgLostFocus_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Commit

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgLostFocus_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.gsfgLostFocus.End

program.sub.cmdrefresh_click.start
F.Intrinsic.Control.SetErrorHandler("cmdrefresh_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'refresh is clicked so reset everyting and load in new files
Gui.Ncell_Trumpf_Interface..Visible(false)
F.Intrinsic.UI.InvokeWaitDialog("Refeshing Data","Refreshing")

'resetting screen
F.Intrinsic.UI.ChangeWaitStatus("Clearing screen",15)
Gui.Ncell_Trumpf_Interface.TabNest.SetTab(0)
F.Intrinsic.Control.CallSub(Cmdclear_click)
Gui.Ncell_Trumpf_Interface.TabNest.SetTab(1)
F.Intrinsic.Control.CallSub(Cmdclear_click)
Gui.Ncell_Trumpf_Interface.TabNest.SetTab(0)

'reading file path
F.Intrinsic.UI.ChangeWaitStatus("Reading Trumpf File Path",30)
F.Intrinsic.Control.CallSub(Filepath,"DAT","Trumpf")

'reading file list
F.Intrinsic.UI.ChangeWaitStatus("Reading File List for Trumpf",45)
F.Intrinsic.Control.CallSub(Filelist)

'reading file path ncell
F.Intrinsic.UI.ChangeWaitStatus("Reading Ncell File Path",60)
F.Intrinsic.Control.CallSub(Filepath,"DAT","Ncell")

'reading file list
F.Intrinsic.UI.ChangeWaitStatus("Reading File List from Ncell",75)
F.Intrinsic.Control.CallSub(Filelist)

'populating drop down
F.Intrinsic.UI.ChangeWaitStatus("Populating Drop Down List",90)
F.Intrinsic.Control.CallSub(Popdropdown)


'close wait dialog
F.Intrinsic.UI.ChangeWaitStatus("Done",100)
F.Intrinsic.UI.CloseWaitDialog
Gui.Ncell_Trumpf_Interface..Show

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdrefresh_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

program.sub.cmdrefresh_click.End

Program.Sub.gsfgCmd_Click.Start
F.Intrinsic.Control.SetErrorHandler("gsfgCmd_Click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iRows.Declare(Long)
V.Local.sRet.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iPos.Declare(Long)
V.Local.sOrdinal.Declare(String)

'if + was pressed then add a new row under the last row
F.Intrinsic.Control.If(V.Args.Key,>,0,"AND",V.Args.Column,=,6)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		F.Intrinsic.Math.Add(V.Screen.Ncell_Trumpf_Interface![v.Args.ControlName].Rows,1,V.Local.iRows)
		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Rows(V.Local.iRows)
		F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sRet)
		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,V.Local.iRows,V.Local.sRet.Trim)
	F.Intrinsic.Control.Else
		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(0,1,V.Local.sRet)
		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,1,V.Local.sRet.Trim)
		V.Local.iRows.Set(V.Args.Key)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sRet.Trim,V.Local.sOrdinal)
	F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)

'if - was pressed then delete the pressed row
F.Intrinsic.Control.ElseIf(V.Args.Key,>,0,"AND",V.Args.Column,=,7)

	F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface![v.Args.ControlName].Rows,1,V.Local.iRows)
	F.Intrinsic.Control.If(V.Local.iRows,<=,1)
		'don't exit if it is drop, we just need to clear the row instead
		F.Intrinsic.Control.If(V.Args.ControlName,=,"GSFGNDROP")
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(0,1,"")
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(2,1,"")
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(3,1,"")
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(4,1,"")
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(5,1,"")
			Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(1,2)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.For(V.Local.iCount,V.Args.Key,V.Local.iRows,1)
		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)
		'if the next position is within the row count then get the infor and put it in the new location
		F.Intrinsic.Control.If(V.Local.iPos,=<,V.Local.iRows)
			'replaces the Material
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,V.Local.iCount,"")
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Local.iPos,V.Local.sRet)
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,V.local.iCount,V.Local.sRet.Trim)
'			'replaces the Work Order
'			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(1,V.Local.iCount,"")
'			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(1,V.Local.iPos,V.Local.sRet)
'			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(1,V.local.iCount,V.Local.sRet.Trim)
			'replaces the Lot
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(2,V.Local.iCount,"")
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(2,V.Local.iPos,V.Local.sRet)
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(2,V.local.iCount,V.Local.sRet.Trim)
			'replaces the Bin
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(3,V.Local.iCount,"")
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(3,V.Local.iPos,V.Local.sRet)
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(3,V.local.iCount,V.Local.sRet.Trim)
			'replace the Serial
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.Local.iCount,"")
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(4,V.Local.iPos,V.Local.sRet)
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.local.iCount,V.Local.sRet.Trim)
			'replaces quantity
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(5,V.Local.iCount,"")
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(5,V.Local.iPos,V.Local.sRet)
			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(5,V.Local.iCount,V.Local.sRet.Trim)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Rows(V.Local.iRows)
	

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgCmd_Click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.gsfgCmd_Click.End

Program.Sub.gsfgListExit.Start
F.Intrinsic.Control.SetErrorHandler("gsfgListExit_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sOrdinal.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.iRows.Declare(Long)
V.Local.sSerial.Declare(String)

F.Intrinsic.Control.If(V.Args.ControlName,<>,"GSFGNTIME")
F.Intrinsic.Control.If(V.Args.Column,=,2)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(3,V.Args.Key,"")
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.Args.Key,"")
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Commit
	'get the lot
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(V.Args.Column,V.Args.Key,V.Local.sLot)
	Gui.Ncell_Trumpf_Interface.txtLotMaterial.Text(V.Local.sLot)
	
	'get the part
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sPart)
	V.Local.sPart.Set(V.Local.sPart.Trim)
	Gui.F_LotQtys.lbl2.Caption(V.Local.sPart)
	'create the sql
	F.Intrinsic.String.Build("SELECT BIN FROM V_ITEM_MASTER WHERE LOT = '{0}' AND PART = '{1}' and bin <> '' ",V.Local.sLot.Trim,V.Local.sPart.PSQLFriendly,V.Local.sSQL)
	'use the select statement
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sBin)
	F.Intrinsic.String.Replace(V.Local.sBin,"*!*","",V.Local.sBin)
	F.Intrinsic.String.Replace(V.Local.sBin,"#$#","*!*",V.Local.sBin)
	'get the original style for the material
	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sPart,V.Local.sOrdinal)
	F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,3,"Type","DropDownList",V.Local.sBin)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,3,"Type","Locked",False)
	'F.Intrinsic.Control.If(V.Local.sBin.Trim,<>,"")
	'	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GSGOverrideProperty(3,V.Args.Key,"Type",V.Local.sBin.Trim,"dropdownlist")
	'	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GSGOverrideProperty(3,V.Args.Key,"Type","dropdownlist","test*!*thing")
	'F.Intrinsic.Control.EndIf
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].ApplyStyle(V.Args.Key,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)
F.Intrinsic.Control.ElseIf(V.Args.Column,=,3)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.Args.Key,"")
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Commit
	'get the lot
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(2,V.Args.Key,V.Local.sLot)
	Gui.Ncell_Trumpf_Interface.txtLotMaterial.Text(V.Local.sLot)
	'get the Bin
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(V.Args.Column,V.Args.Key,V.Local.sBin)
	'get the part
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sPart)
	V.Local.sPart.Set(V.Local.sPart.Trim)
	Gui.F_LotQtys.lbl2.Caption(V.Local.sPart)
	'create the sql
	F.Intrinsic.String.Build("SELECT SERIAL_NUMBER FROM V_ITEM_MASTER WHERE LOT = '{0}' AND BIN = '{1}' AND PART = '{2}' and bin <> '' ",V.Local.sLot.Trim,V.Local.sBin.Trim,V.Local.sPart.PSQLFriendly,V.Local.sSQL)
	'use the select statement
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSerial)
	F.Intrinsic.String.Replace(V.Local.sSerial,"*!*","",V.Local.sSerial)
	F.Intrinsic.String.Replace(V.Local.sSerial,"#$#","*!*",V.Local.sSerial)
	'get the original style for the material
	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sPart,V.Local.sOrdinal)
	F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,4,"Type","DropDownList",V.Local.sSerial)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,4,"Type","Locked",False)
	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].ApplyStyle(V.Args.Key,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,1,V.Local.iRows)
	Gui.Ncell_Trumpf_Interface.gsfgNTime.Commit
	Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(4,1,V.Local.sSQL)
	F.Intrinsic.Control.For(V.Local.iCount,2,V.Local.iRows,1)
		Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,V.Local.iCount,V.Local.sSQL.Trim)
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgListExit_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf



Program.Sub.gsfgListExit.End

program.sub.f_lotqtys_unload.start

Gui.F_LotQtys..Visible(false)

program.sub.f_lotqtys_unload.End

program.sub.cmdviewlotbin_click.start
F.Intrinsic.Control.SetErrorHandler("cmdviewlotbin_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.iRows.Declare(Long)
V.Local.bExist.Declare(Boolean)
V.Local.sPart.Declare(String)



F.Intrinsic.Control.If(V.Screen.F_LotQtys.Visible,=,False)
	Gui.F_LotQtys..BindTo(V.Screen.Ncell_Trumpf_Interface.HWnd,500,100)
	Gui.F_LotQtys..Visible(True)
F.Intrinsic.Control.EndIf

V.Local.sTemp.Set(V.Screen.F_LotQtys.Caption)
Gui.F_LotQtys..Caption("Loading...")
F.Intrinsic.Control.CallSub(Bslotqtysgrid)

'Load Lot records for Selected part
V.Local.sPart.Set(V.Screen.F_LotQtys!lbl2.Caption)
F.Intrinsic.String.Build("select Bin,Lot,Serial_Number,Quantity from v_ITEM_MASTER where Part = '{0}' and LOT = '{1}'",V.Local.sPart.PSQLFriendly,V.Screen.Ncell_Trumpf_Interface!txtLotMaterial.Text,V.Local.sSql)
F.ODBC.Connection!Con.OpenRecordsetRO("rstLotQty",V.Local.sSql)
F.Intrinsic.Control.If(V.ODBC.Con!rstLotQty.EOF,<>,True)
	Gui.F_LotQtys.gsflexgrid1.LoadRecordset("con!rstLotQty",1,False)
	F.Intrinsic.Math.Sub(V.Screen.F_LotQtys!gsflexgrid1.Rows,1,V.Local.iRows)
	'Delete Blank Row
	Gui.F_LotQtys.gsflexgrid1.Rows(V.Local.iRows)

F.Intrinsic.Control.Else
	'Display Message No records next to Part Caption on Label
	F.Intrinsic.String.Build("{0}---No Records Found!",V.Screen.F_LotQtys!lbl2.Caption,V.Local.sSql)
	Gui.F_LotQtys.lbl2.Caption(V.Local.sSql)

F.Intrinsic.Control.EndIf
F.ODBC.Con!rstLotQty.Close

Gui.F_LotQtys..Caption(V.Local.sTemp)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdviewlotbin_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.cmdviewlotbin_click.End

Program.Sub.BSLotQtysGrid.Start
F.Intrinsic.Control.SetErrorHandler("BSLotQtysGrid_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
'buildstyle for View of Lot Quantity Grid
Gui.F_LotQtys.gsflexgrid1.Cols(4)
Gui.F_LotQtys.gsflexgrid1.Rows(1)
Gui.F_LotQtys.gsflexgrid1.Rows(2)
Gui.F_LotQtys.gsflexgrid1.FixedRows(1)

Gui.F_LotQtys.gsflexgrid1.TextMatrix(0,0,"Bin")
Gui.F_LotQtys.gsflexgrid1.TextMatrix(1,0,"Lot")
Gui.F_LotQtys.gsflexgrid1.TextMatrix(2,0,"Dimensions")
Gui.F_LotQtys.gsflexgrid1.TextMatrix(3,0,"Qty Onhand")

Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,0,"Type","Locked",True)
Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,1,"Type","Locked",True)
Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,2,"Type","Locked",True)
Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,3,"Type","Locked",True)

Gui.F_LotQtys.gsflexgrid1.SetColumnPercentages(".15:.25:.40:.20")
Gui.F_LotQtys.gsflexgrid1.ApplyStyle(1,1)


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("BSLotQtysGrid_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.BSLotQtysGrid.End

program.sub.gsfgtmaterial_posttextmatrix.start
F.Intrinsic.Control.SetErrorHandler("gsfgtmaterial_posttextmatrix_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'Update custom table with override of actual sheets used. Ncell uses more material to nest sometimes that what the Actual machine finishes.
V.Local.iQty.Declare(Long)
V.Local.i.Declare(Long)
V.Local.sret.Declare(String)
V.Local.iRows.Declare(Long)

F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNMaterial.Rows,1,V.Local.iRows)

F.Intrinsic.Control.For(V.Local.i,1,V.Local.iRows,1)
	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(5,V.Local.i,V.Local.sret)
	F.Intrinsic.Math.Add(V.Local.iQty,V.Local.sret.Long,V.Local.iQty)
F.Intrinsic.Control.Next(V.Local.i)

F.Intrinsic.String.Build("Total Sheets: {0}",V.Local.iQty,V.Local.sret)
Gui.Ncell_Trumpf_Interface.lblNSheets.Caption(V.Local.sret)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgtmaterial_posttextmatrix_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.gsfgtmaterial_posttextmatrix.End

program.sub.gsfgtmaterial_cellenter.start

program.sub.gsfgtmaterial_cellenter.End

program.sub.gsfgndrop_cellenter.start
F.Intrinsic.Control.SetErrorHandler("gsfgndrop_cellenter_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.Control.If(V.Args.column,=,5)
	'Set this when they enter cell so I can grab it on post text matrix to update
	Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(5,V.Args.key,V.Global.iPrevDropSize.Trim)

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgndrop_cellenter_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.gsfgndrop_cellenter.End

program.sub.gsfgndrop_posttextmatrix.start
F.Intrinsic.Control.SetErrorHandler("gsfgndrop_posttextmatrix_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSql.Declare(String)

F.Intrinsic.Control.If(V.Args.column,=,5)
	Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(5,V.Args.key,V.Local.sRet)

	F.Intrinsic.String.Build("Select * from GCG_3744_NCELL_SCRN where NESTID = '{0}' and ltrim(rtrim(DSIZE)) = '{1}'",V.Screen.Ncell_Trumpf_Interface!cmboNNestID.Text,V.Global.iPrevDropSize.Trim,V.Local.sSql)
	F.ODBC.Connection!Con.OpenRecordsetRW("rstDropSize",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.Con!rstDropSize.EOF,<>,True)
		F.ODBC.Con!rstDropSize.Set!DSIZE(V.Local.sRet.Trim)
		F.ODBC.Con!rstDropSize.Update
	F.Intrinsic.Control.EndIf
	F.ODBC.Con!rstDropSize.Close
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfgndrop_posttextmatrix_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.gsfgndrop_posttextmatrix.End

Program.Sub.Dop_To_Bin.Start
F.Intrinsic.Control.SetErrorHandler("Dop_To_Bin_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sBinMaster.Declare(String)

Gui.SS_Form1.ddlDropBin.ClearItems

'load drop down with bin selection and show screen.
V.Local.sSql.Set("select * from BIN_MASTER where UPPER(BIN_DESCRIPTION) like '%CROP%' ")
F.ODBC.Connection!Con.OpenRecordsetRO("rstBin",V.Local.sSql)
F.Intrinsic.Control.If(V.ODBC.Con!rstBin.EOF,<>,True)
	F.Intrinsic.Control.DoUntil(V.ODBC.Con!rstBin.EOF,=,True)
		Gui.SS_Form1.ddlDropBin.AddItem(V.ODBC.Con!rstBin.FieldValTrim!BIN)
	
	F.ODBC.Con!rstBin.MoveNext
	F.Intrinsic.Control.Loop

F.Intrinsic.Control.EndIf
F.ODBC.Con!rstBin.Close

F.Intrinsic.String.Build("{0} - {1}",V.args.sPart,V.Args.sSer,V.Local.sPart)
Gui.SS_Form1.lblpart.Caption(V.Local.sPart)
Gui.SS_Form1..Show
V.Global.bCont.Set(False)

F.Intrinsic.Control.DoUntil(V.global.bcont,=,True)
	F.Intrinsic.UI.Sleep(.25)
F.Intrinsic.Control.Loop

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Dop_To_Bin_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.Dop_To_Bin.End

program.sub.cmdok_click.start
F.Intrinsic.Control.SetErrorHandler("cmdok_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

Gui.SS_Form1..Enabled(False)

V.Global.sDropBin.Set(V.Screen.SS_Form1!ddlDropBin.Text)

V.Global.bCont.Set(True)


Gui.SS_Form1..Visible(false)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdok_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.cmdok_click.End

Program.Sub.Comments.Start
${$0$}$$}$Strider$}$2/1/2016 3:59:30 PM$}$False
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$Program will be a GAB user interface to let users modify Trumpf and NCell Exported data before uploading it to Global Shop. Each Nesting export will have a separate tab on the screen to see current exports to be imported as well as a history view of past imported data from both NCell and Trumpf nesting exports.
Program.Sub.Comments.End

Program.Sub.ScreenSS.Start
SS_Form1{{CAPTION::Select Bin
SS_Form1.CTRL{{NAME::ddlDropBin\\TYPE::4\\CAPTION::Select Drop Bin\\GROUP::-1\\BROWSER::0\\SIZE::1
SS_Form1.CTRL{{NAME::lblPart\\TYPE::1\\CAPTION::Part#\\GROUP::-1\\BROWSER::0\\SIZE::1
SS_Form1.CTRL{{NAME::cmdOk\\TYPE::5\\CAPTION::Ok\\GROUP::-1\\BROWSER::0\\SIZE::1
SS_Form1.CTRL{{NAME::chkLabels\\TYPE::9\\CAPTION::Print Labels\\VALUE::1\\GROUP::-1\\BROWSER::0\\SIZE::1

Program.Sub.ScreenSS.End

