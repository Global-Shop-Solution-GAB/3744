<?xml version="1.0" encoding="utf-8"?>
<SyntaxEdit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Pages>
    <DefaultPage>
      <Header />
      <Footer />
    </DefaultPage>
  </Pages>
  <DisplayStrings />
  <Selection>
    <SelectionRect>
      <Location>
        <X>0</X>
        <Y>4942</Y>
      </Location>
      <Size>
        <Width>24</Width>
        <Height>3</Height>
      </Size>
      <X>0</X>
      <Y>4942</Y>
      <Width>24</Width>
      <Height>3</Height>
    </SelectionRect>
    <Options>UseColors OverwriteBlocks SelectLineOnTripleClick CopyLineWhenEmpty SelectWordOnCtrlClick</Options>
  </Selection>
  <Gutter>
    <Options>PaintLineNumbers PaintBookMarks PaintLineModificators</Options>
  </Gutter>
  <Margin>
    <Visible>false</Visible>
  </Margin>
  <LineStyles />
  <LineSeparator />
  <Printing>
    <Footer />
    <Header />
  </Printing>
  <WhiteSpace />
  <TextSource>
    <Position>
      <X>0</X>
      <Y>4942</Y>
    </Position>
    <Lexer>
      <Scheme>
        <Author>Quantum Whale, LLC.</Author>
        <Copyright>Copyright (c) 2004 - 2014 Quantum Whale LLC.</Copyright>
        <FileType>gas</FileType>
        <Version>1.5</Version>
        <Styles>
          <Style>
            <Name>idents</Name>
            <ForeColor>ControlText</ForeColor>
          </Style>
          <Style>
            <Name>numbers</Name>
            <ForeColor>ControlText</ForeColor>
          </Style>
          <Style>
            <Name>reswords</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>comments</Name>
            <ForeColor>Green</ForeColor>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>xmlcomments</Name>
            <ForeColor>Gray</ForeColor>
          </Style>
          <Style>
            <Name>symbols</Name>
            <ForeColor>WindowText</ForeColor>
          </Style>
          <Style>
            <Name>whitespace</Name>
            <ForeColor>WindowText</ForeColor>
          </Style>
          <Style>
            <Name>strings</Name>
            <ForeColor>Maroon</ForeColor>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>directives</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>htmlparams</Name>
            <ForeColor>Red</ForeColor>
          </Style>
          <Style>
            <Name>syntax errors</Name>
            <ForeColor>Red</ForeColor>
          </Style>
          <Style>
            <Name>codes nippets</Name>
            <ForeColor>Black</ForeColor>
            <BackColor>255:180:228:180</BackColor>
          </Style>
          <Style>
            <Name>GabReservedWords</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>GabTokenWithBrackets</Name>
            <ForeColor>Gray</ForeColor>
          </Style>
          <Style>
            <Name>GabFunctionIntrinsicDebug</Name>
            <ForeColor>White</ForeColor>
            <BackColor>Red</BackColor>
            <FontStyle>Bold</FontStyle>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>GabVariable</Name>
            <ForeColor>Teal</ForeColor>
          </Style>
          <Style>
            <Name>GabVariableSystemDefined</Name>
            <ForeColor>Teal</ForeColor>
            <FontStyle>Bold Italic</FontStyle>
          </Style>
          <Style>
            <Name>GabGui</Name>
            <ForeColor>OrangeRed</ForeColor>
          </Style>
          <Style>
            <Name>GabProgramSubStartEnd</Name>
            <ForeColor>Black</ForeColor>
            <BackColor>LightGray</BackColor>
            <FontStyle>Bold</FontStyle>
            <PlainText>true</PlainText>
          </Style>
        </Styles>
      </Scheme>
    </Lexer>
    <TextStrings>
      <Lines>
        <string>Program.Sub.ScreenSU.Start</string>
        <string>gui.SS_Form1..create</string>
        <string>gui.SS_Form1..caption("Process Drops")</string>
        <string>gui.SS_Form1..size(2250,2250)</string>
        <string>gui.SS_Form1..minx(0)</string>
        <string>gui.SS_Form1..miny(0)</string>
        <string>gui.SS_Form1..position(0,0)</string>
        <string>gui.SS_Form1..alwaysontop(False)</string>
        <string>gui.SS_Form1..fontname("Arial")</string>
        <string>gui.SS_Form1..fontsize(8)</string>
        <string>gui.SS_Form1..forecolor(0)</string>
        <string>gui.SS_Form1..fontstyle(,,,,)</string>
        <string>gui.SS_Form1..BackColor(-2147483633)</string>
        <string>gui.SS_Form1..controlbox(True)</string>
        <string>gui.SS_Form1..maxbutton(False)</string>
        <string>gui.SS_Form1..minbutton(False)</string>
        <string>gui.SS_Form1..mousepointer(0)</string>
        <string>gui.SS_Form1..moveable(True)</string>
        <string>gui.SS_Form1..sizeable(False)</string>
        <string>gui.SS_Form1..ShowInTaskBar(True)</string>
        <string>gui.SS_Form1..titlebar(True)</string>
        <string>gui.SS_Form1.lbl_ddlDropBin.create(label,"Select Drop Bin",True,1800,200,1,100,135,True,0,Arial,8,-2147483633,0)</string>
        <string>gui.SS_Form1.lbl_ddlDropBin.defaultvalue("")</string>
        <string>gui.SS_Form1.lbl_ddlDropBin.controlgroup(0)</string>
        <string>gui.SS_Form1.ddlDropBin.create(dropdownlist)</string>
        <string>gui.SS_Form1.ddlDropBin.visible(True)</string>
        <string>gui.SS_Form1.ddlDropBin.size(1800,330)</string>
        <string>gui.SS_Form1.ddlDropBin.zorder(0)</string>
        <string>gui.SS_Form1.ddlDropBin.position(100,335)</string>
        <string>gui.SS_Form1.ddlDropBin.enabled(True)</string>
        <string>gui.SS_Form1.ddlDropBin.fontname("Arial")</string>
        <string>gui.SS_Form1.ddlDropBin.fontsize(8)</string>
        <string>gui.SS_Form1.ddlDropBin.defaultvalue("")</string>
        <string>gui.SS_Form1.ddlDropBin.controlgroup(0)</string>
        <string>gui.SS_Form1.lblPart.create(label,"Part#",True,1800,200,1,100,750,True,0,Arial,8,-2147483633,0)</string>
        <string>gui.SS_Form1.lblPart.defaultvalue("")</string>
        <string>gui.SS_Form1.lblPart.controlgroup(0)</string>
        <string>gui.SS_Form1.cmdOk.create(button)</string>
        <string>gui.SS_Form1.cmdOk.caption("Ok")</string>
        <string>gui.SS_Form1.cmdOk.visible(True)</string>
        <string>gui.SS_Form1.cmdOk.size(1000,360)</string>
        <string>gui.SS_Form1.cmdOk.zorder(0)</string>
        <string>gui.SS_Form1.cmdOk.position(100,950)</string>
        <string>gui.SS_Form1.cmdOk.enabled(True)</string>
        <string>gui.SS_Form1.cmdOk.fontname("Arial")</string>
        <string>gui.SS_Form1.cmdOk.fontsize(8)</string>
        <string>gui.SS_Form1.cmdOk.event(click,cmdok_click)</string>
        <string>gui.SS_Form1.cmdOk.defaultvalue("")</string>
        <string>gui.SS_Form1.cmdOk.controlgroup(0)</string>
        <string>gui.SS_Form1.chkLabels.create(checkbox)</string>
        <string>gui.SS_Form1.chkLabels.caption("Print Labels")</string>
        <string>gui.SS_Form1.chkLabels.visible(True)</string>
        <string>gui.SS_Form1.chkLabels.size(1800,300)</string>
        <string>gui.SS_Form1.chkLabels.zorder(0)</string>
        <string>gui.SS_Form1.chkLabels.position(100,1395)</string>
        <string>gui.SS_Form1.chkLabels.enabled(True)</string>
        <string>gui.SS_Form1.chkLabels.alignment(0)</string>
        <string>gui.SS_Form1.chkLabels.fontname("Arial")</string>
        <string>gui.SS_Form1.chkLabels.fontsize(8)</string>
        <string>gui.SS_Form1.chkLabels.defaultvalue("")</string>
        <string>gui.SS_Form1.chkLabels.controlgroup(0)</string>
        <string />
        <string />
        <string>gui.Ncell_Trumpf_Interface..create</string>
        <string>gui.Ncell_Trumpf_Interface..caption("Ncell / Trumpf Interface to GSS")</string>
        <string>gui.Ncell_Trumpf_Interface..size(7650,7845)</string>
        <string>gui.Ncell_Trumpf_Interface..minx(0)</string>
        <string>gui.Ncell_Trumpf_Interface..miny(0)</string>
        <string>gui.Ncell_Trumpf_Interface..position(0,0)</string>
        <string>gui.Ncell_Trumpf_Interface..event(unload,Unload)</string>
        <string>gui.Ncell_Trumpf_Interface..alwaysontop(False)</string>
        <string>gui.Ncell_Trumpf_Interface..fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface..fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface..forecolor(0)</string>
        <string>gui.Ncell_Trumpf_Interface..fontstyle(,,,,)</string>
        <string>gui.Ncell_Trumpf_Interface..BackColor(-2147483633)</string>
        <string>gui.Ncell_Trumpf_Interface..controlbox(True)</string>
        <string>gui.Ncell_Trumpf_Interface..maxbutton(False)</string>
        <string>gui.Ncell_Trumpf_Interface..minbutton(False)</string>
        <string>gui.Ncell_Trumpf_Interface..mousepointer(0)</string>
        <string>gui.Ncell_Trumpf_Interface..moveable(True)</string>
        <string>gui.Ncell_Trumpf_Interface..sizeable(False)</string>
        <string>gui.Ncell_Trumpf_Interface..ShowInTaskBar(True)</string>
        <string>gui.Ncell_Trumpf_Interface..titlebar(True)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.create(tab)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.tabs(2)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.tabsperrow(2)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.settab(0)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.caption("Trumpf")</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.settab(1)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.caption("Ncell")</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.size(7425,6830)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.position(0,0)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.TabNest.event(click,tabnest_click)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.create(gsflexgrid)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.FixedRows(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.FixedCols(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.size(7035,1600)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.position(50,940)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.event(mousedown,gsfgTimeMouseDown)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.event(posttextmatrix,gsfgTimePostText)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.event(lostfocus,gsfgTimePostText)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTTime.event(listexit,gsfgListExit)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl3.create(label,"Trumpf Nest ID:",True,1065,300,1,50,210,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl3.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl3.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl3.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.create(combobox)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.text("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.size(1815,330)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.position(50,440)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.enabled(False)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.event(click,cmbotnestid_click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl5.create(label,"Time",True,495,300,1,50,760,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl5.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl5.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl5.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.create(gsflexgrid)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.FixedRows(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.FixedCols(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.size(7035,1600)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.position(50,2840)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.event(lostfocus,gsfgLostFocus)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.event(listexit,gsfgListExit)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTMaterial.event(commandclick,gsfgCmd_Click)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.create(gsflexgrid)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.FixedRows(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.FixedCols(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.size(7050,1600)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.position(50,4655)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.event(posttextmatrix,gsfgtdrop_posttextmatrix)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.event(lostfocus,gsfgLostFocus)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.event(cellenter,gsfgtdrop_cellenter)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.event(listexit,gsfgListExit)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgTDrop.event(commandclick,gsfgCmd_Click)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl7.create(label,"Material",True,930,255,1,50,2640,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl7.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl7.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl7.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl8.create(label,"Drop",True,690,255,1,50,4440,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl8.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl8.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl8.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.lblTSheets.create(label,"Total Sheets: ",True,1935,255,1,1400,2640,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lblTSheets.parent("tabnest",0)</string>
        <string>gui.Ncell_Trumpf_Interface.lblTSheets.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lblTSheets.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.create(button)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.caption("Clear")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.size(900,375)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.position(100,6900)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.event(click,cmdclear_click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdClear.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.create(button)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.caption("Post")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.size(900,375)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.position(3175,6900)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.event(click,cmdpost_click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdPost.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.create(button)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.caption("Re-Print")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.size(900,375)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.position(2160,6900)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.event(click,cmdflexsched_click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdFlexSched.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl6.create(label,"Ncell Nest ID:",True,915,255,1,50,210,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl6.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl6.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl6.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.create(combobox)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.text("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.size(1815,330)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.position(50,440)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.event(click,cmbonnestid_click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmboNNestID.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl9.create(label,"Time",True,500,255,1,50,760,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl9.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl9.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl9.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.create(gsflexgrid)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.FixedRows(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.FixedCols(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.size(7140,1600)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.position(50,940)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.event(mousedown,gsfgTimeMouseDown)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.event(posttextmatrix,gsfgTimePostText)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.event(lostfocus,gsfgTimePostText)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNTime.event(listexit,gsfgListExit)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl10.create(label,"Material",True,1000,255,1,95,2745,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl10.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl10.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl10.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.lblNSheets.create(label,"Total Sheets: ",True,1965,255,1,1320,2740,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lblNSheets.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.lblNSheets.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lblNSheets.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.create(gsflexgrid)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.FixedRows(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.FixedCols(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.size(7155,1435)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.position(50,3005)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(posttextmatrix,gsfgtmaterial_posttextmatrix)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(lostfocus,gsfgLostFocus)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(listexit,gsfgListExit)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNMaterial.event(commandclick,gsfgCmd_Click)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl12.create(label,"Drop",True,1000,255,1,50,4440,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl12.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl12.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl12.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.create(gsflexgrid)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.FixedRows(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.FixedCols(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.size(7170,1600)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.position(50,4655)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.event(posttextmatrix,gsfgndrop_posttextmatrix)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.event(lostfocus,gsfgLostFocus)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.event(cellenter,gsfgndrop_cellenter)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.event(listexit,gsfgListExit)</string>
        <string>gui.Ncell_Trumpf_Interface.gsfgNDrop.event(commandclick,gsfgCmd_Click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.create(button)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.caption("Refresh")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.size(900,375)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.position(1145,6900)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.event(click,cmdrefresh_click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdRefresh.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.txtLotMaterial.create(textbox,"",True,1800,300,0,3890,2640,True,0,Arial,7,-2147483643,1)</string>
        <string>gui.Ncell_Trumpf_Interface.txtLotMaterial.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.txtLotMaterial.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.txtLotMaterial.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl11.create(label,"Lot:",True,315,255,1,3560,2670,True,0,Arial,7,-2147483633,0)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl11.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.lbl11.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.lbl11.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.create(button)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.caption("View Qty")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.visible(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.size(1185,315)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.zorder(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.position(5870,2610)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.enabled(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.parent("tabnest",1)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.fontname("Arial")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.fontsize(7)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.event(click,cmdviewlotbin_click)</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.defaultvalue("")</string>
        <string>gui.Ncell_Trumpf_Interface.cmdViewLotBin.controlgroup(0)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.tabstop(True)</string>
        <string>gui.Ncell_Trumpf_Interface.cmboTNestID.tabindex(1)</string>
        <string />
        <string />
        <string>gui.F_LotQtys..create</string>
        <string>gui.F_LotQtys..caption("View Lot Quantities")</string>
        <string>gui.F_LotQtys..size(5790,5475)</string>
        <string>gui.F_LotQtys..minx(0)</string>
        <string>gui.F_LotQtys..miny(0)</string>
        <string>gui.F_LotQtys..position(0,0)</string>
        <string>gui.F_LotQtys..event(unload,f_lotqtys_unload)</string>
        <string>gui.F_LotQtys..alwaysontop(False)</string>
        <string>gui.F_LotQtys..fontname("Arial")</string>
        <string>gui.F_LotQtys..fontsize(8)</string>
        <string>gui.F_LotQtys..forecolor(0)</string>
        <string>gui.F_LotQtys..fontstyle(,,,,)</string>
        <string>gui.F_LotQtys..BackColor(-2147483633)</string>
        <string>gui.F_LotQtys..controlbox(True)</string>
        <string>gui.F_LotQtys..maxbutton(False)</string>
        <string>gui.F_LotQtys..minbutton(False)</string>
        <string>gui.F_LotQtys..mousepointer(0)</string>
        <string>gui.F_LotQtys..moveable(True)</string>
        <string>gui.F_LotQtys..sizeable(False)</string>
        <string>gui.F_LotQtys..ShowInTaskBar(True)</string>
        <string>gui.F_LotQtys..titlebar(True)</string>
        <string>gui.F_LotQtys.gsflexgrid1.create(gsflexgrid)</string>
        <string>gui.F_LotQtys.gsflexgrid1.FixedRows(0)</string>
        <string>gui.F_LotQtys.gsflexgrid1.FixedCols(0)</string>
        <string>gui.F_LotQtys.gsflexgrid1.visible(True)</string>
        <string>gui.F_LotQtys.gsflexgrid1.size(5325,4245)</string>
        <string>gui.F_LotQtys.gsflexgrid1.zorder(0)</string>
        <string>gui.F_LotQtys.gsflexgrid1.position(100,425)</string>
        <string>gui.F_LotQtys.gsflexgrid1.enabled(True)</string>
        <string>gui.F_LotQtys.lblPart.create(label,"Part:",True,480,255,1,200,170,True,0,Arial,8,-2147483633,0)</string>
        <string>gui.F_LotQtys.lblPart.defaultvalue("")</string>
        <string>gui.F_LotQtys.lblPart.controlgroup(0)</string>
        <string>gui.F_LotQtys.lbl2.create(label,"",True,2760,255,1,620,170,True,0,Arial,8,15790320,0)</string>
        <string>gui.F_LotQtys.lbl2.fontstyle(True,False,False,False)</string>
        <string>gui.F_LotQtys.lbl2.defaultvalue("")</string>
        <string>gui.F_LotQtys.lbl2.controlgroup(0)</string>
        <string />
        <string />
        <string>Program.Sub.ScreenSU.End</string>
        <string />
        <string>Program.Sub.Preflight.Start</string>
        <string />
        <string>Variable.UDT.uTime.Define("Job",String,TJOB)</string>
        <string>Variable.UDT.uTime.Define("NestID",String,NESTID)</string>
        <string>Variable.UDT.uTime.Define("Qty",Float,TQTY)</string>
        <string>Variable.UDT.uTime.Define("Time",Float,TTIME)</string>
        <string>Variable.UDT.uTime.Define("Issue",Float,TISSUE)</string>
        <string>Variable.UDT.uTime.Define("Employee",String,TEMPLOYEE)</string>
        <string>Variable.UDT.uTime.Define("ID",Long,ID)</string>
        <string>Variable.UDT.uTime.Define("WC",String)</string>
        <string>Variable.UDT.uMaterial.Define("NestID",String,NESTID)</string>
        <string>Variable.UDT.uMaterial.Define("Material",String,MMATERIAL)</string>
        <string>Variable.UDT.uMaterial.Define("Qty",Float,MQTY)</string>
        <string>Variable.UDT.uMaterial.Define("Lot",String)</string>
        <string>Variable.UDT.uMaterial.Define("ID",Long,ID)</string>
        <string>Variable.UDT.uMaterial.Define("Job",String)</string>
        <string>Variable.UDT.uMaterial.Define("Area",Float,MAREA)</string>
        <string>Variable.UDT.uMaterial.Define("Bin",String)</string>
        <string>Variable.UDT.uMaterial.Define("Style",Long)</string>
        <string>Variable.UDT.uMaterial.Define("LotDDL",String)</string>
        <string>Variable.UDT.uMaterial.Define("Serial",String)</string>
        <string>Variable.UDT.uDrop.Define("NestID",String,NESTID)</string>
        <string>Variable.UDT.uDrop.Define("Material",String,DMATERIAL)</string>
        <string>Variable.UDT.uDrop.Define("Size",String,DSIZE)</string>
        <string>Variable.UDT.uDrop.Define("Lot",String)</string>
        <string>Variable.UDT.uDrop.Define("ID",Long,ID)</string>
        <string>Variable.UDT.uDrop.Define("Job",String,DJOB)</string>
        <string>Variable.UDT.uDrop.Define("Bin",String)</string>
        <string>Variable.UDT.uDrop.Define("Serial",String)</string>
        <string>Variable.UDT.uDrop.Define("Style",Long)</string>
        <string>Variable.UDT.uDrop.Define("LotDDL",String)</string>
        <string>Variable.uGlobal.uDrop.Declare("uDrop")</string>
        <string>Variable.uGlobal.uMaterial.Declare("uMaterial")</string>
        <string>Variable.uGlobal.uTime.Declare("uTime")</string>
        <string>Variable.UDT.uComplete.Define("DMaterial",String,DMATERIAL)</string>
        <string>Variable.UDT.uComplete.Define("DSize",String,DSIZE)</string>
        <string>Variable.UDT.uComplete.Define("Job",String,JOB)</string>
        <string>Variable.UDT.uComplete.Define("MMaterial",String,MMATERIAL)</string>
        <string>Variable.UDT.uComplete.Define("MQty",Float,MQTY)</string>
        <string>Variable.UDT.uComplete.Define("NestID",String,NESTID)</string>
        <string>Variable.UDT.uComplete.Define("Seq",String,SEQUENCE)</string>
        <string>Variable.UDT.uComplete.Define("Suffix",String,SUFFIX)</string>
        <string>Variable.UDT.uComplete.Define("TQty",Float,TQTY)</string>
        <string>Variable.UDT.uComplete.Define("TTime",Float,TTIME)</string>
        <string>Variable.UDT.uComplete.Define("TWorkOrder",String,TJOB)</string>
        <string>Variable.UDT.uComplete.Define("DLot",String,DLOT)</string>
        <string>Variable.UDT.uComplete.Define("MLot",String,MLOT)</string>
        <string>Variable.UDT.uComplete.Define("TEmployee",String,TEMPLOYEE)</string>
        <string>Variable.UDT.uComplete.Define("TIssue",Float,TISSUE)</string>
        <string>Variable.UDT.uComplete.Define("ID",Long,ID)</string>
        <string>Variable.UDT.uComplete.Define("DJob",String,DJob)</string>
        <string>Variable.UDT.uComplete.Define("MJob",String,MJOB)</string>
        <string>Variable.UDT.uComplete.Define("MArea",Float,MAREA)</string>
        <string>Variable.UDT.uComplete.Define("EndTime",String)</string>
        <string>Variable.UDT.uComplete.Define("StartTime",String)</string>
        <string>Variable.UDT.uComplete.Define("MBin",String,MBIN)</string>
        <string>Variable.UDT.uComplete.Define("DBin",String,DBIN)</string>
        <string>Variable.UDT.uComplete.Define("TWC",String)</string>
        <string>Variable.UDT.uComplete.Define("MSerial",String,MSERIAL)</string>
        <string>Variable.UDT.uComplete.Define("DSerial",String,DSERIAL)</string>
        <string>Variable.uGlobal.uComplete.Declare("uComplete")</string>
        <string>Variable.Global.sReadPath.Declare(String)</string>
        <string>Variable.Global.iRow.Declare(Long,-1)</string>
        <string>Variable.Global.iColumn.Declare(Long,-1)</string>
        <string>Variable.Global.sControlName.Declare(String)</string>
        <string>Variable.UDT.uIssue.Define("Material",String)</string>
        <string>Variable.UDT.uIssue.Define("Job",String)</string>
        <string>Variable.UDT.uIssue.Define("Suffix",String)</string>
        <string>Variable.UDT.uIssue.Define("Seq",String)</string>
        <string>Variable.UDT.uIssue.Define("Issue",Float)</string>
        <string>Variable.UDT.uIssue.Define("Lot",String)</string>
        <string>Variable.UDT.uIssue.Define("Qty",Float)</string>
        <string>Variable.UDT.uIssue.Define("Bin",String)</string>
        <string>Variable.UDT.uIssue.Define("Serial",String)</string>
        <string>Variable.uGlobal.uIssue.Declare("uIssue")</string>
        <string>Variable.Global.bRead.Declare(Boolean,False)</string>
        <string>Variable.UDT.uIssueDrop.Define("Material",String,"Material")</string>
        <string>Variable.UDT.uIssueDrop.Define("Lot",String,"Lot")</string>
        <string>Variable.UDT.uIssueDrop.Define("Bin",String,"Bin")</string>
        <string>Variable.UDT.uIssueDrop.Define("Qty",Float,"Qty_On_Label")</string>
        <string>Variable.UDT.uIssueDrop.Define("Job",String,"Job")</string>
        <string>Variable.UDT.uIssueDrop.Define("Suffix",String,"Suffix")</string>
        <string>Variable.UDT.uIssueDrop.Define("Seq",String,"Seq")</string>
        <string>Variable.UDT.uIssueDrop.Define("Size",String,"Size")</string>
        <string>Variable.UDT.uIssueDrop.Define("Serial",String,"Serial")</string>
        <string>Variable.UDT.uIssueDrop.Define("Inv_UM",String,"Inv_UM")</string>
        <string>Variable.UDT.uIssueDrop.Define("User_ID",String,"User_ID")</string>
        <string>Variable.UDT.uIssueDrop.Define("BirunID",Long,"BirunID")</string>
        <string>Variable.UDT.uIssueDrop.Define("Lbl_Create_Date",Date,"Lbl_Create_Date")</string>
        <string>Variable.uGlobal.uIssueDrop.Declare("uIssueDrop")</string>
        <string>Variable.UDT.uIssueJob.Define("Job",String)</string>
        <string>Variable.UDT.uIssueJob.Define("Suffix",String)</string>
        <string>Variable.UDT.uIssueJob.Define("IssueAmt",Float)</string>
        <string>Variable.UDT.uIssueJob.Define("Lot",String)</string>
        <string>Variable.UDT.uIssueJob.Define("Bin",String)</string>
        <string>Variable.UDT.uIssueJob.Define("Material",String)</string>
        <string>Variable.UDT.uIssueJob.Define("Seq",String)</string>
        <string>Variable.UDT.uIssueJob.Define("Serial",String)</string>
        <string>Variable.uGlobal.uIssueJob.Declare("uIssueJob")</string>
        <string>Variable.Global.sTBackup.Declare(String)</string>
        <string>Variable.Global.sNBackup.Declare(String)</string>
        <string>Variable.Global.iPrevDropSize.Declare(String)</string>
        <string>Variable.Global.bCont.Declare(Boolean,False)</string>
        <string>Variable.Global.sDropBin.Declare(String)</string>
        <string>Program.Sub.Preflight.End</string>
        <string />
        <string>Program.Sub.Main.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Main_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sCCC.Declare(String)</string>
        <string />
        <string>F.Intrinsic.String.Build("GLOBAL_{0}",V.Caller.CompanyCode,V.Local.sCCC)</string>
        <string>F.ODBC.Connection!Con.OpenConnection(V.Local.sCCC,"Master","master")</string>
        <string />
        <string />
        <string>'F.ODBC.Connection!Con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)</string>
        <string />
        <string>'sets the first tab as the open tab on startup</string>
        <string>Gui.Ncell_Trumpf_Interface.TabNest.SetTab(0)</string>
        <string>'Gui.Ncell_Trumpf_Interface.TabNest.TabVisible(0,False)</string>
        <string />
        <string />
        <string>'call sub to read where Trumpf and Ncell locations are from Global\\Files\\GSS_TRUMPF.dat and Global\\Files\\Ncell.dat</string>
        <string>'READPATH is to get the export files</string>
        <string>F.Intrinsic.Control.CallSub(Filepath,"DAT","Trumpf")</string>
        <string />
        <string>'call sub to load the Trumpf data</string>
        <string>F.Intrinsic.Control.CallSub(Filelist)</string>
        <string />
        <string>'call sub to read where Ncelll locations are</string>
        <string>F.Intrinsic.Control.CallSub(Filepath,"DAT","Ncell")</string>
        <string />
        <string>'call sub to load the Ncell data</string>
        <string>F.Intrinsic.Control.CallSub(Filelist)</string>
        <string />
        <string>'populate the Trumpf drop down list</string>
        <string>F.Intrinsic.Control.CallSub(Popdropdown)</string>
        <string />
        <string />
        <string>Gui.Ncell_Trumpf_Interface.TabNest.SetTab(1)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface..Show</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Main_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.Main.End</string>
        <string />
        <string>Program.Sub.Unload.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Form1_Unload_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>F.ODBC.Connection!Con.Close</string>
        <string>F.Intrinsic.Control.End</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Form1_Unload_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.End</string>
        <string />
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.Unload.End</string>
        <string />
        <string>Program.Sub.FilePath.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("FilePath_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sFilePath.Declare(String)</string>
        <string>V.Local.sDATFile.Declare(String)</string>
        <string>V.Local.bExists.Declare(Boolean)</string>
        <string>V.Local.sReadPath.Declare(String)</string>
        <string>V.Local.iFor.Declare(Long)</string>
        <string>V.Local.sLine.Declare(String)</string>
        <string>V.Local.sBackup.Declare(String)</string>
        <string>V.Local.sHold.Declare(String)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Args.DAT,=,"Trumpf")</string>
        <string>	F.Intrinsic.String.Build("{0}\GSS_TRUMPF.dat",V.Caller.FilesDir,V.Local.sFilePath)</string>
        <string>F.Intrinsic.Control.ElseIf(V.Args.DAT,=,"Ncell")</string>
        <string>	F.Intrinsic.String.Build("{0}\NCELL.dat",V.Caller.FilesDir,V.Local.sFilePath)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.File.Exists(V.Local.sFilePath,V.Local.bExists)</string>
        <string>F.Intrinsic.Control.If(V.Local.bExists,=,False)</string>
        <string>	F.Intrinsic.UI.Msgbox("File Save Path Not Found.")</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>	F.Intrinsic.File.File2String(V.Local.sFilePath,V.Local.sDATFile)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>F.Intrinsic.String.Split(V.Local.sDATFile,V.Ambient.NewLine,V.Local.sLine)</string>
        <string>F.Intrinsic.Control.For(V.Local.iFor,V.Local.sLine.LBound,V.Local.sLine.UBound,1)</string>
        <string>	F.Intrinsic.String.Split(V.Local.sLine(v.Local.iFor),"::",V.Local.sHold)</string>
        <string>	V.Local.sHold.RedimPreserve(0,1)</string>
        <string>	F.Intrinsic.Control.SelectCase(V.Local.sHold(0))</string>
        <string>	F.Intrinsic.Control.Case("READ")</string>
        <string>		V.Local.sReadPath.Set(V.Local.sHold(1))</string>
        <string>		F.Intrinsic.Control.ExitFor(V.Local.iFor)</string>
        <string>	F.Intrinsic.Control.Case("COMPLETE")</string>
        <string>		V.Local.sReadPath.Set(V.Local.sHold(1))</string>
        <string>		F.Intrinsic.Control.ExitFor(V.Local.iFor)</string>
        <string>	F.Intrinsic.Control.EndSelect</string>
        <string>F.Intrinsic.Control.Next(V.Local.iFor)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Local.sReadPath.right1,&lt;&gt;,"\")</string>
        <string>	F.Intrinsic.String.Concat(V.Local.sReadPath,"\",V.Local.sReadPath)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.String.Concat(V.Local.sReadPath,"Backup",V.Local.sBackup)</string>
        <string>F.Intrinsic.File.Exists(V.Local.sBackup,V.Local.bExists)</string>
        <string>F.Intrinsic.Control.If(V.Local.bExists,=,False)</string>
        <string>	F.Intrinsic.File.CreateDir(V.Local.sBackup)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>'set global backkup for trump and ncell</string>
        <string>F.Intrinsic.Control.If(V.Args.DAT,=,"Trumpf")</string>
        <string>	V.Global.sTBackup.Set(V.Local.sBackup)</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>	V.Global.sNBackup.Set(V.Local.sBackup)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>V.Global.sReadPath.Set(V.Local.sReadPath)</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("FilePath_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.FilePath.End</string>
        <string />
        <string>Program.Sub.FileList.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("FileList_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sBckpPath.Declare(String)</string>
        <string>V.Local.bState.Declare(Boolean)</string>
        <string>V.Local.sFileList.Declare(String)</string>
        <string>V.Local.sBysoftFile.Declare(String)</string>
        <string>V.Local.sAttributes.Declare(String)</string>
        <string>V.Local.iFor.Declare(Long)</string>
        <string>V.Local.iTimer.Declare(Long)</string>
        <string>V.Local.sFileType.Declare(String)</string>
        <string>V.Local.iRet.Declare(Long)</string>
        <string>V.Local.sFullName.Declare(String)</string>
        <string>V.Local.sBackUp.Declare(String)</string>
        <string>V.Local.sMsg.Declare(String)</string>
        <string>V.Local.bContains.Declare(Boolean)</string>
        <string />
        <string>' path to move processed files</string>
        <string>F.Intrinsic.String.Build("{0}Processed\",V.Global.sReadPath,V.Local.sBckpPath)</string>
        <string>F.Intrinsic.File.DirExists(V.Local.sBckpPath,V.Local.bState)</string>
        <string>F.Intrinsic.Control.If(V.Local.bState,=,False)</string>
        <string>	F.Intrinsic.File.CreateDir(V.Local.sBckpPath)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>' check for files in read path</string>
        <string>F.Intrinsic.File.GetFileList(V.Global.sReadPath,0,V.Local.sFileList)</string>
        <string>F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sBysoftFile)</string>
        <string />
        <string>' if no files are found, alert user and exit</string>
        <string>F.Intrinsic.Control.If(V.Local.sBysoftFile.Trim,=,"")</string>
        <string>'	F.Intrinsic.UI.Msgbox("No Files To Load")</string>
        <string>'	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>	F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>' could have multiple feedback files.  move file before reading.</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>	V.Local.bState.Set(True)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iFor,V.Local.sBysoftFile.LBound,V.Local.sBysoftFile.UBound,1)</string>
        <string>		' look for the xml file and make sure it is not locked</string>
        <string>		F.Intrinsic.String.Split(V.Local.sBysoftFile(v.Local.iFor),".",V.Local.sFileType)</string>
        <string />
        <string>		F.Intrinsic.Control.If(V.Local.sFileType(v.Local.sFileType.UBound).UCase,=,"XML")</string>
        <string>			F.Intrinsic.Control.DoUntil(V.Local.bState,=,False)</string>
        <string>				F.Intrinsic.File.IsFileLocked(V.Local.sBysoftFile(v.Local.iFor),V.Local.bState)</string>
        <string>				F.Intrinsic.UI.Sleep(1)</string>
        <string>				F.Intrinsic.Math.Add(V.Local.iTimer,1,V.Local.iTimer)</string>
        <string>				' give the file 10 seconds to be released, then alert user and move to next file.</string>
        <string>				F.Intrinsic.Control.If(V.Local.iTimer,=,11)</string>
        <string>					F.Intrinsic.String.Build("File {0} is in use.{1}Unable to read file.",V.Local.sBysoftFile(v.Local.iFor),V.Ambient.NewLine,V.Local.sMsg)</string>
        <string>					F.Intrinsic.UI.Msgbox(V.Local.sMsg)</string>
        <string>'					f.Intrinsic.Control.CallSub(ss_form1_unload)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>			F.Intrinsic.Control.Loop</string>
        <string />
        <string>			' didn't unload, move file</string>
        <string>			F.Intrinsic.String.Build("{0}{1}",V.Global.sReadPath,V.Local.sBysoftFile(v.Local.iFor),V.Local.sFullName)</string>
        <string />
        <string>			'read xml file</string>
        <string>			F.Intrinsic.Control.CallSub(Readxml,"ERPFILE",V.Local.sFullName)</string>
        <string />
        <string>			'checks to see if the file was read</string>
        <string>			'if it was then move the file to backup</string>
        <string>			F.Intrinsic.Control.If(V.Global.bRead,=,True)</string>
        <string>		</string>
        <string />
        <string>				' append file with processed date and time</string>
        <string>				F.Intrinsic.String.Build("{0}_{1}.bkp",V.Local.sFileType(0),V.Ambient.Now,V.Local.sBackUp)</string>
        <string>				f.Intrinsic.File.MakeFilenameFriendly(v.Local.sBackUp,v.Local.sBackUp)</string>
        <string>				F.Intrinsic.String.Build("{0}{1}",V.Local.sBckpPath,V.Local.sBackUp,V.Local.sBackUp)</string>
        <string>				F.Intrinsic.File.MoveFile(V.Local.sFullName,V.Local.sBackUp,V.Local.iRet)</string>
        <string />
        <string>				' make sure move was successful</string>
        <string>				F.Intrinsic.Control.If(V.Local.iRet,=,0)</string>
        <string>					V.Local.bState.Set(False)</string>
        <string>					' if unable to move the file, alert user and unload</string>
        <string>					F.Intrinsic.UI.Msgbox("Unable to read or move file")</string>
        <string>					F.Intrinsic.Debug.SetLA(V.Local.sBysoftFile(v.Local.iFor))</string>
        <string>					F.Intrinsic.Debug.SetLA(V.Local.sBckpPath)</string>
        <string>					F.Intrinsic.Control.GoTo("NEXT")</string>
        <string>'					f.Intrinsic.Control.ExitFor(v.Local.iFor)</string>
        <string>				F.Intrinsic.Control.Else</string>
        <string>					' make sure a file was found, if not alert user and unload</string>
        <string>					F.Intrinsic.Control.If(V.Local.sBackUp.Trim,=,"")</string>
        <string>						F.Intrinsic.UI.Msgbox("File not found")</string>
        <string>						F.Intrinsic.Control.GoTo("NEXT")</string>
        <string>						'f.Intrinsic.Control.CallSub(ss_form1_unload)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string>	</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>		'its a csv so read ncell</string>
        <string>		F.Intrinsic.Control.Else</string>
        <string />
        <string>			F.Intrinsic.Control.DoUntil(V.Local.bState,=,False)</string>
        <string>				F.Intrinsic.File.IsFileLocked(V.Local.sBysoftFile(v.Local.iFor),V.Local.bState)</string>
        <string>				F.Intrinsic.UI.Sleep(1)</string>
        <string>				F.Intrinsic.Math.Add(V.Local.iTimer,1,V.Local.iTimer)</string>
        <string>				' give the file 10 seconds to be released, then alert user and move to next file.</string>
        <string>				F.Intrinsic.Control.If(V.Local.iTimer,=,11)</string>
        <string>					F.Intrinsic.String.Build("File {0} is in use.{1}Unable to read file.",V.Local.sBysoftFile(v.Local.iFor),V.Ambient.NewLine,V.Local.sMsg)</string>
        <string>					F.Intrinsic.UI.Msgbox(V.Local.sMsg)</string>
        <string>'					f.Intrinsic.Control.CallSub(ss_form1_unload)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>			F.Intrinsic.Control.Loop</string>
        <string />
        <string>			'make sure it is an Export file and not a Commit file</string>
        <string>			F.Intrinsic.String.IsInString(V.Local.sBysoftFile(v.Local.iFor),"Export",True,V.Local.bContains)</string>
        <string>			F.Intrinsic.Control.If(V.Local.bContains,=,True)</string>
        <string>				F.Intrinsic.String.Build("{0}{1}",V.Global.sReadPath,V.Local.sBysoftFile(v.Local.iFor),V.Local.sFullName)</string>
        <string>				'read ncell csv file</string>
        <string>				F.Intrinsic.Control.CallSub(Readncell,"ERPFILE",V.Local.sFullName)</string>
        <string>			</string>
        <string>				' append file with processed date and time</string>
        <string>				F.Intrinsic.String.Build("{0}_{1}.bkp",V.Local.sFileType(0),V.Ambient.Now,V.Local.sBackUp)</string>
        <string>				f.Intrinsic.File.MakeFilenameFriendly(v.Local.sBackUp,v.Local.sBackUp)</string>
        <string>				F.Intrinsic.String.Build("{0}{1}",V.Local.sBckpPath,V.Local.sBackUp,V.Local.sBackUp)</string>
        <string>				F.Intrinsic.File.MoveFile(V.Local.sFullName,V.Local.sBackUp,V.Local.iRet)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string />
        <string>		F.Intrinsic.Control.Label("NEXT")</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iFor)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("FileList_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.FileList.End</string>
        <string />
        <string>Program.Sub.ReadXML.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("ReadXML_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sDoc.Declare(String)</string>
        <string>V.Local.bEOF.Declare(Boolean)</string>
        <string>V.Local.sValue.Declare(String)</string>
        <string>V.Local.sFile.Declare(String)</string>
        <string>V.Local.sNestID.Declare(String)</string>
        <string>V.Local.sJob.Declare(String)</string>
        <string>V.Local.iCountTime.Declare(Long)</string>
        <string>V.Local.iCountMaterial.Declare(Long)</string>
        <string>V.Local.iCountDrop.Declare(Long)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.fTime.Declare(Float)</string>
        <string>V.Local.fRemLength.Declare(Float)</string>
        <string>V.Local.fRemWidth.Declare(Float)</string>
        <string>V.Local.fQty.Declare(Float)</string>
        <string>V.Local.sTemp.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sOrderName.Declare(String)</string>
        <string>V.Local.fRuns.Declare(Float)</string>
        <string>V.Local.sMaterial.Declare(String)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string>V.Local.sSize.Declare(String)</string>
        <string>V.Local.sType.Declare(String)</string>
        <string>V.Local.sBound.Declare(String)</string>
        <string>V.Local.fTotalSheets.Declare(Float)</string>
        <string>V.Local.fDropQty.Declare(Float)</string>
        <string>V.Local.sJobSplit.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.fPartLength.Declare(Float)</string>
        <string>V.Local.fPartWidth.Declare(Float)</string>
        <string>V.Local.fIssueTotal.Declare(Float)</string>
        <string>V.Local.sIssueTotal.Declare(String)</string>
        <string>V.Local.fLength.Declare(Float)</string>
        <string>V.Local.fWidth.Declare(Float)</string>
        <string>V.Local.fArea.Declare(Float)</string>
        <string>V.Local.fTemp.Declare(Float)</string>
        <string>V.Local.fTotalArea.Declare(Float)</string>
        <string>V.Static.iCount.Declare(Long)</string>
        <string>V.Local.iDrop.Declare(Long)</string>
        <string />
        <string>V.uGlobal.uTime.Redim(-1,-1)</string>
        <string>V.uGlobal.uMaterial.Redim(-1,-1)</string>
        <string>V.uGlobal.uDrop.Redim(-1,-1)</string>
        <string>V.uGlobal.uComplete.Redim(-1,-1)</string>
        <string />
        <string>V.uGlobal.uTime.Redim(0,0)</string>
        <string>V.uGlobal.uMaterial.Redim(0,0)</string>
        <string>V.uGlobal.uDrop.Redim(0,0)</string>
        <string>V.uGlobal.uComplete.Redim(0,0)</string>
        <string />
        <string>F.Intrinsic.Math.Add(V.Static.iCount,1,V.Static.iCount)</string>
        <string>F.Intrinsic.String.Build("Trumpf{0}",V.Static.iCount,V.Local.sDoc)</string>
        <string>'V.Local.sDoc.Set("Trumpf")</string>
        <string>'loads the xml document</string>
        <string>F.Global.XML.LoadDocument(V.Local.sDoc,V.Args.ERPFILE,False,False,False,False)</string>
        <string />
        <string>'checks to see what the tag after PPSExport is and runs based on the file.</string>
        <string>F.Global.XML.Query(V.Local.sDoc,"Type","/*/*",False)</string>
        <string>F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Type","nodeName",V.Local.sType)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Local.sType,=,"JobFeedback")</string>
        <string>	'set variable to true so it will process it</string>
        <string>	V.Global.bRead.Set(True)</string>
        <string>	'Reads JobExp#.xml</string>
        <string>	'runs query on xml to grab all of the NestIDs in Jobname attribute of JobFeedback</string>
        <string>	F.Global.XML.Query(V.Local.sDoc,"NestID","//JobFeedback/@Jobname",False)</string>
        <string>	F.Intrinsic.Control.DoUntil(V.Local.bEOF,=,True)</string>
        <string>		'loop through all of the nestids</string>
        <string>		'read the value of Jobname and set it as NestID</string>
        <string>		F.Global.xml.ReadNodeSetValue(V.Local.sDoc,"NestID","text",V.Local.sNestID)</string>
        <string>		'using NestID create a new query to find all of the ManufacturingOrderNames</string>
        <string>		F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder/@ManufacturingOrderName",V.Local.sNestID,V.Local.sSQL)</string>
        <string>		F.Global.XML.Query(V.Local.sDoc,"OrderName",V.Local.sSQL,False)</string>
        <string>		F.Intrinsic.Control.DoUntil(V.Local.bEOF,=,True)</string>
        <string>			'loop through all of the ManufacturingOrderNames and grab the fields inside of each</string>
        <string>			F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"OrderName","text",V.Local.sOrderName)</string>
        <string />
        <string>			'using the ManufacturingOrderName select the information for that single order</string>
        <string>			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/NoOfRuns",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)</string>
        <string>			F.Global.XML.Query(V.Local.sDoc,"Runs",V.Local.sSQL,True)</string>
        <string>			'checks to see if there is a bound</string>
        <string>			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Runs",V.Local.sBound)</string>
        <string>			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>				'gets the number of runs for the jobs, this number will be multiplied by the quantity and time below</string>
        <string>				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Runs","text",V.Local.fRuns)</string>
        <string>				F.Intrinsic.Math.Add(V.Local.fTotalSheets,V.Local.fRuns,V.Local.fTotalSheets)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Global.XML.CloseSet(V.Local.sDoc,"Runs")</string>
        <string />
        <string>			'select Material</string>
        <string>			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/Sheet/@SheetIdentNo",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)</string>
        <string>			F.Global.XML.Query(V.Local.sDoc,"Sheet",V.Local.sSQL,True)</string>
        <string>			'checks to see if there is a bound</string>
        <string>			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Sheet",V.Local.sBound)</string>
        <string>			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>				'gets the sheet name will be used for all material name later</string>
        <string>				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Sheet","text",V.Local.sMaterial)</string>
        <string>				F.Intrinsic.String.Split(V.Local.sMaterial,"_",V.Local.sMaterial)</string>
        <string>				V.Local.sMaterial.RedimPreserve(0,0)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Global.XML.CloseSet(V.Local.sDoc,"Sheet")</string>
        <string />
        <string>			'select Material Length</string>
        <string>			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/Sheet[@SheetIdentNo='{2}']/Dimensions/Length",V.Local.sNestID,V.Local.sOrderName,V.Local.sMaterial,V.Local.sSQL)</string>
        <string>			F.Global.XML.Query(V.Local.sDoc,"MLength",V.Local.sSQL,True)</string>
        <string>			'checks to see if there is a bound</string>
        <string>			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"MLength",V.Local.sBound)</string>
        <string>			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>				'gets the sheet name will be used for all material name later</string>
        <string>				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"MLength","text",V.Local.fLength)</string>
        <string>'				F.Intrinsic.String.Format(V.Local.fLength,"#.0000",V.Local.fLength)</string>
        <string>'				F.Intrinsic.Math.Round(V.Local.fLength,4,V.Local.fLength)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Global.XML.CloseSet(V.Local.sDoc,"MLength")</string>
        <string />
        <string>			'select Material Width</string>
        <string>			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/Sheet[@SheetIdentNo='{2}']/Dimensions/Width",V.Local.sNestID,V.Local.sOrderName,V.Local.sMaterial,V.Local.sSQL)</string>
        <string>			F.Global.XML.Query(V.Local.sDoc,"MWidth",V.Local.sSQL,True)</string>
        <string>			'checks to see if there is a bound</string>
        <string>			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"MWidth",V.Local.sBound)</string>
        <string>			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>				'gets the sheet name will be used for all material name later</string>
        <string>				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"MWidth","text",V.Local.fWidth)</string>
        <string>'				F.Intrinsic.String.Format(V.Local.fWidth,"#.0000",V.Local.fWidth)</string>
        <string>'				F.Intrinsic.Math.Round(V.Local.fWidth,4,V.Local.fWidth)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Global.XML.CloseSet(V.Local.sDoc,"MWidth")</string>
        <string />
        <string>			'select remaining Length</string>
        <string>			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/RemainingSheets/RemainingSheet/Dimensions/Length",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)</string>
        <string>			F.Global.XML.Query(V.Local.sDoc,"RemLength",V.Local.sSQL)</string>
        <string>			V.Local.fRemLength.Set(0)</string>
        <string>			'checks to see if there is a bound</string>
        <string>			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"RemLength",V.Local.sBound)</string>
        <string>			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>				'gets the length of the remaining for that order</string>
        <string>				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"RemLength","text",V.Local.fRemLength)</string>
        <string>				F.Intrinsic.Math.Div(V.Local.fRemLength,25.4,V.Local.fRemLength)</string>
        <string>'				F.Intrinsic.String.Format(V.Local.fRemLength,"#.0000",V.Local.fRemLength)</string>
        <string>'				F.Intrinsic.Math.Round(V.Local.fRemLength,4,V.Local.fRemLength)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Global.XML.CloseSet(V.Local.sDoc,"RemLength")</string>
        <string />
        <string>			'select remaining Width</string>
        <string>			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/RemainingSheets/RemainingSheet/Dimensions/Width",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)</string>
        <string>			F.Global.XML.Query(V.Local.sDoc,"RemWidth",V.Local.sSQL)</string>
        <string>			V.Local.fRemWidth.Set(0)</string>
        <string>			'checks to see if there is a bound</string>
        <string>			F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"RemWidth",V.Local.sBound)</string>
        <string>			F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>				'gets the length of the remaining for that order</string>
        <string>				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"RemWidth","text",V.Local.fRemWidth)</string>
        <string>				F.Intrinsic.Math.Div(V.Local.fRemWidth,25.4,V.Local.fRemWidth)</string>
        <string>'				F.Intrinsic.String.Format(V.Local.fRemWidth,"#.0000",V.Local.fRemWidth)</string>
        <string>'				F.Intrinsic.Math.Round(V.Local.fRemWidth,4,V.Local.fRemWidth)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Global.XML.CloseSet(V.Local.sDoc,"RemWidth")</string>
        <string>			</string>
        <string>			'reset and set drop count this breakts it out of the loop</string>
        <string>			V.Local.iDrop.Set(0)</string>
        <string />
        <string>			'select the jobs within this order and the part number</string>
        <string>			F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part/@OrderNo",V.Local.sNestID,V.Local.sOrderName,V.Local.sSQL)</string>
        <string>			F.Global.XML.Query(V.Local.sDoc,"Job",V.Local.sSQL,False)</string>
        <string>			F.Intrinsic.Control.DoUntil(V.Local.bEOF,=,True)</string>
        <string>				'loop through all of the Jobs on this ManufacturingOrder</string>
        <string>				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Job","text",V.Local.sJob)</string>
        <string>				</string>
        <string>				'PART</string>
        <string>'				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/@PartNo",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)</string>
        <string>'				F.Global.XML.Query(V.Local.sDoc,"Part",V.Local.sSQL,True)</string>
        <string>'				F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Part","text",V.Local.sPart)</string>
        <string>'				F.Global.XML.CloseSet(V.Local.sDoc,"Part")</string>
        <string />
        <string>				'using job get Time and Quantity</string>
        <string>				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/TargetProcessingTimePerPiece",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)</string>
        <string>				F.Global.XML.Query(V.Local.sDoc,"Time",V.Local.sSQL,True)</string>
        <string>				V.Local.fTime.Set(0)</string>
        <string>				'checks to see if there is a bound</string>
        <string>				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Time",V.Local.sBound)</string>
        <string>				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>					'get the time to process per piece time passed in minutes</string>
        <string>					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Time","text",V.Local.fTime)</string>
        <string>					'divide by 60 to get time in hours</string>
        <string>					F.Intrinsic.Math.Div(V.Local.fTime,60,V.Local.fTime)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Global.XML.CloseSet(V.Local.sDoc,"Time")</string>
        <string>				</string>
        <string>				'get the part Length</string>
        <string>				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/PartLength",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)</string>
        <string>				F.Global.XML.Query(V.Local.sDoc,"PartLength",V.Local.sSQL,True)</string>
        <string>				'checks to see if there is a bound</string>
        <string>				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"PartLength",V.Local.sBound)</string>
        <string>				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>					'get the part length for the job</string>
        <string>					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"PartLength","text",V.Local.fPartLength)</string>
        <string>					F.Intrinsic.Math.Div(V.Local.fPartLength,25.4,V.Local.fPartLength)</string>
        <string>'					F.Intrinsic.String.Format(V.Local.fPartLength,"#.0000",V.Local.fPartLength)</string>
        <string>'					F.Intrinsic.Math.Round(V.Local.fPartLength,4,V.Local.fPartLength)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Global.XML.CloseSet(V.Local.sDoc,"PartLength")</string>
        <string />
        <string>				'get the part Width</string>
        <string>				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/PartWidth",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)</string>
        <string>				F.Global.XML.Query(V.Local.sDoc,"PartWidth",V.Local.sSQL,True)</string>
        <string>				'checks to see if there is a bound</string>
        <string>				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"PartWidth",V.Local.sBound)</string>
        <string>				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>					'get the part length for the job</string>
        <string>					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"PartWidth","text",V.Local.fPartWidth)</string>
        <string>					F.Intrinsic.Math.Div(V.Local.fPartWidth,25.4,V.Local.fPartWidth)</string>
        <string>'					F.Intrinsic.String.Format(V.Local.fPartWidth,"#.0000",V.Local.fPartWidth)</string>
        <string>'					F.Intrinsic.Math.Round(V.Local.fPartWidth,4,V.Local.fPartWidth)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Global.XML.CloseSet(V.Local.sDoc,"PartWidth")</string>
        <string>		</string>
        <string>				'get the Quantity</string>
        <string>				F.Intrinsic.String.Build("//JobFeedback[@Jobname='{0}']/ManufacturingOrders/ManufacturingOrder[@ManufacturingOrderName='{1}']/PartsOnSheet/Part[@OrderNo='{2}']/Quantity",V.Local.sNestID,V.Local.sOrderName,V.Local.sJob,V.Local.sSQL)</string>
        <string>				F.Global.XML.Query(V.Local.sDoc,"Quantity",V.Local.sSQL,True)</string>
        <string>				V.Local.fQty.Set(0)</string>
        <string>				'checks to see if there is a bound</string>
        <string>				F.Global.XML.ReadNodeSetBound(V.Local.sDoc,"Quantity",V.Local.sBound)</string>
        <string>				F.Intrinsic.String.Split(V.Local.sBound,"*!*",V.Local.sBound)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sBound(1),&gt;,-1)</string>
        <string>					'get the quantity</string>
        <string>					F.Global.XML.ReadNodeSetValue(V.Local.sDoc,"Quantity","text",V.Local.fQty)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Global.XML.CloseSet(V.Local.sDoc,"Quantity")</string>
        <string />
        <string />
        <string>					'gets the area of the part</string>
        <string>					F.Intrinsic.Math.Mult(V.Local.fLength,V.Local.fWidth,V.Local.fArea)</string>
        <string />
        <string>					'keeps a total of the area</string>
        <string>					F.Intrinsic.Math.Mult(V.Local.fArea,V.Local.fRuns,V.Local.fTemp)</string>
        <string>					F.Intrinsic.Math.Add(V.Local.fTemp,V.Local.fTotalArea,V.Local.fTotalArea)</string>
        <string />
        <string>					'add everything to the udts</string>
        <string>					'check to see if it is already in the udt</string>
        <string>					'seek for job</string>
        <string>					F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uTime!Job,V.Local.sJob,V.Local.sOrdinal)</string>
        <string>					F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")</string>
        <string>						V.uGlobal.uTime.RedimPreserve(0,V.Local.iCountTime)</string>
        <string>						V.uGlobal.uTime(v.Local.iCountTime)!NestID.Set(V.Local.sNestID)</string>
        <string>						V.uGlobal.uTime(v.Local.iCountTime)!Job.Set(V.Local.sJob)</string>
        <string>						'multiply quantity by the amount of runs it did</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fQty,V.Local.fRuns,V.Local.fQty)</string>
        <string>'						F.Intrinsic.String.Format(V.Local.fQty,"#.0000",V.Local.fQty)</string>
        <string>						V.uGlobal.uTime(v.Local.iCountTime)!Qty.Set(V.Local.fQty)</string>
        <string>						'multiply the time by the quantity and run which is already in fqty</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fTime,V.Local.fQty,V.Local.fTime)</string>
        <string>'						F.Intrinsic.String.Format(V.Local.fTime,"#.0000",V.Local.fTime)</string>
        <string>						V.uGlobal.uTime(v.Local.iCountTime)!Time.Set(V.Local.fTime)</string>
        <string>						'add the issue material to employee field to hold it</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fPartLength,V.Local.fPartWidth,V.Local.fIssueTotal)</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fIssueTotal,V.Local.fQty,V.Local.fIssueTotal)</string>
        <string>'						F.Intrinsic.String.Format(V.Local.fIssueTotal,"#.0000",V.Local.fIssueTotal)</string>
        <string>						F.Intrinsic.Math.Round(V.Local.fIssueTotal,4,V.Local.fIssueTotal)</string>
        <string>						V.uGlobal.uTime(v.Local.iCountTime)!Issue.Set(V.Local.fIssueTotal)</string>
        <string>						F.Intrinsic.Math.Add(V.Local.iCountTime,1,V.Local.iCountTime)</string>
        <string>					F.Intrinsic.Control.Else</string>
        <string>						'there is already a job</string>
        <string>						F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>						'should only be one ordinal</string>
        <string>						</string>
        <string>						'calculate the quantity on the job</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fQty,V.Local.fRuns,V.Local.fQty)</string>
        <string />
        <string>						'caculate the time on the job</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fTime,V.Local.fQty,V.Local.fTime)</string>
        <string />
        <string>						'calculate the issue quantity for the job</string>
        <string>						'employee is being used to store the issue material until it has been processed</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fPartLength,V.Local.fPartWidth,V.Local.fIssueTotal)</string>
        <string>						F.Intrinsic.Math.Mult(V.Local.fIssueTotal,V.Local.fQty,V.Local.fIssueTotal)</string>
        <string>						F.Intrinsic.Math.Add(V.Local.fIssueTotal,V.uGlobal.uTime(v.Local.sOrdinal)!Issue,V.Local.fIssueTotal)</string>
        <string>'						F.Intrinsic.String.Format(V.Local.fIssueTotal,"#.0000",V.Local.fIssueTotal)</string>
        <string>						F.Intrinsic.Math.Round(V.Local.fIssueTotal,4,V.Local.fIssueTotal)</string>
        <string>						V.uGlobal.uTime(v.Local.sOrdinal)!Issue.Set(V.Local.fIssueTotal)</string>
        <string />
        <string>						'add the qty to the existing qty				</string>
        <string>						F.Intrinsic.Math.Add(V.Local.fQty,V.uGlobal.uTime(v.Local.sOrdinal)!Qty,V.Local.fQty)</string>
        <string>'						F.Intrinsic.String.Format(V.Local.fQty,"#.0000",V.Local.fQty)</string>
        <string>						V.uGlobal.uTime(v.Local.sOrdinal)!Qty.Set(V.Local.fQty)</string>
        <string />
        <string>						'add the time to the existing time</string>
        <string>						F.Intrinsic.Math.Add(V.Local.fTime,V.uGlobal.uTime(v.Local.sOrdinal)!Time,V.Local.fTime)</string>
        <string>'						F.Intrinsic.String.Format(V.Local.fTime,"#.0000",V.Local.fTime)</string>
        <string>						V.uGlobal.uTime(v.Local.sOrdinal)!Time.Set(V.Local.fTime)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string />
        <string>					'Material udt</string>
        <string>					'total sheets is how many runs in total</string>
        <string>						'display total sheets v.local.fTotalSheets</string>
        <string>'					F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sMaterial,V.uGlobal.uMaterial!Job,V.Local.sJob.Trim,V.Local.sOrdinal)</string>
        <string>'					F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")</string>
        <string>'						'no material found add it</string>
        <string>'						V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iCountMaterial)</string>
        <string>'						V.uGlobal.uMaterial(v.Local.iCountMaterial)!NestID.Set(V.Local.sNestID)</string>
        <string>'						V.uGlobal.uMaterial(v.Local.iCountMaterial)!Material.Set(V.Local.sMaterial)</string>
        <string>''						V.uGlobal.uMaterial(V.Local.iCountMaterial)!Job.Set(V.Local.sJob.Trim)</string>
        <string>'						V.uGlobal.uMaterial(v.Local.iCountMaterial)!Area.Set(V.Local.fArea)</string>
        <string>'						F.Intrinsic.Math.Add(V.Local.iCountMaterial,1,V.Local.iCountMaterial)</string>
        <string>'					F.Intrinsic.Control.EndIf</string>
        <string />
        <string>					'Drop UDT</string>
        <string>					F.Intrinsic.Math.Add(V.Local.iDrop,1,V.Local.iDrop)</string>
        <string>					F.Intrinsic.Control.If(V.Local.iDrop,=,1)</string>
        <string>						F.Intrinsic.Control.If(V.Local.fRemLength,&lt;&gt;,0)</string>
        <string>							F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.fRuns,1)</string>
        <string>								V.uGlobal.uDrop.RedimPreserve(0,V.Local.iCountDrop)</string>
        <string>								V.uGlobal.uDrop(v.Local.iCountDrop)!NestID.set(V.Local.sNestID)</string>
        <string>								V.uGlobal.uDrop(v.Local.iCountDrop)!Material.Set(V.Local.sMaterial)</string>
        <string />
        <string>								F.Intrinsic.String.Build("{0}x{1}",V.Local.fRemLength,V.Local.fRemWidth,V.Local.sSize)</string>
        <string>								V.uGlobal.uDrop(v.Local.iCountDrop)!Size.Set(V.Local.sSize)</string>
        <string>	'							V.uGlobal.uDrop(V.Local.iCountDrop)!Part.Set(V.Local.sPart)</string>
        <string>								F.Intrinsic.Math.Add(V.Local.iCountDrop,1,V.Local.iCountDrop)</string>
        <string>							F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>						F.Intrinsic.Control.EndIf</string>
        <string />
        <string>						'consolidate the same material into one</string>
        <string>						F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sMaterial,V.Local.sOrdinal)</string>
        <string>						F.Intrinsic.Control.If(V.Local.sOrdinal.Trim,=,"")</string>
        <string>							V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iCountMaterial)</string>
        <string>							V.uGlobal.uMaterial(v.Local.iCountMaterial)!NestID.Set(V.Local.sNestID)</string>
        <string>							V.uGlobal.uMaterial(v.Local.iCountMaterial)!Material.Set(V.Local.sMaterial)</string>
        <string>	'						V.uGlobal.uMaterial(V.Local.iCountMaterial)!Job.Set(V.Local.sJob.Trim)</string>
        <string>							V.uGlobal.uMaterial(v.Local.iCountMaterial)!Area.Set(V.Local.fArea)</string>
        <string>							V.uGlobal.uMaterial(v.Local.iCountMaterial)!Qty.Set(V.Local.fRuns)</string>
        <string>							F.Intrinsic.Math.Add(V.Local.iCountMaterial,1,V.Local.iCountMaterial)</string>
        <string>						F.Intrinsic.Control.Else</string>
        <string>							F.Intrinsic.Math.Add(V.uGlobal.uMaterial(v.Local.sOrdinal.Long)!Qty,V.Local.fRuns,V.uGlobal.uMaterial(v.Local.sOrdinal.Long)!Qty)</string>
        <string>						F.Intrinsic.Control.EndIf</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string />
        <string>				F.Global.XML.Next(V.Local.sDoc,"Job",V.Local.bEOF)</string>
        <string>			F.Intrinsic.Control.Loop</string>
        <string>			F.Global.XML.CloseSet(V.Local.sDoc,"Job")</string>
        <string>				</string>
        <string />
        <string>			F.Global.XML.Next(V.Local.sDoc,"OrderName",V.Local.bEOF)</string>
        <string>		F.Intrinsic.Control.Loop</string>
        <string>		F.Global.XML.CloseSet(V.Local.sDoc,"OrderName")</string>
        <string>		F.Global.XML.Next(V.Local.sDoc,"NestID",V.Local.bEOF)</string>
        <string>	F.Intrinsic.Control.Loop</string>
        <string>	F.Global.XML.CloseSet(V.Local.sDoc,"NestID")</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>	V.Global.bRead.Set(False)</string>
        <string>	'close xml</string>
        <string>	F.Global.XML.CloseDocument(V.Local.sDoc)</string>
        <string>	F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>'close type</string>
        <string>F.Global.XML.CloseSet(V.Local.sDoc,"Type")</string>
        <string>'close xml</string>
        <string>F.Global.XML.CloseDocument(V.Local.sDoc)</string>
        <string>''add the total sheets to material qty</string>
        <string>'V.uGlobal.uMaterial!Qty.Set(V.Local.fTotalSheets)</string>
        <string />
        <string>F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uTime!Job,False)</string>
        <string />
        <string>'loop through the time udt to fix all of the time because it was passed in minutes</string>
        <string />
        <string>'adds all the udts into one and adds it to the table</string>
        <string>F.Intrinsic.Control.CallSub(Consolidate,"Type","Load","Area",V.Local.fArea,"TotalArea",V.Local.fTotalArea,"Qty",V.Local.fTotalSheets)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("ReadXML_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.ReadXML.End</string>
        <string />
        <string>Program.Sub.TrumpfBuildstyle.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("TrumpfBuildstyle_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sEmployee.Declare(String)</string>
        <string>V.Local.sLots.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iStyle.Declare(Long)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string>V.Local.iCount2.Declare(Long)</string>
        <string />
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.Cols(4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(2)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.FixedRows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.SetColumnPercentages(".3:.19:.19:.319")</string>
        <string />
        <string>'Trumpf Time buildstyle</string>
        <string>'Col 0 Work Order Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,0,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,0,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(0,0,"Work Order")</string>
        <string />
        <string />
        <string>'Col 0 Work Order Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,0,"Format","Alignment",2)</string>
        <string />
        <string>'Col 1 Qty Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,1,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,1,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(1,0,"Qty")</string>
        <string />
        <string>'Col 1 Qty Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,1,"Format","Alignment",6)</string>
        <string />
        <string>'Col 2 Time Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,2,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,2,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(2,0,"Time")</string>
        <string />
        <string>'Col 2 Time Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,2,"Format","Alignment",6)</string>
        <string />
        <string>'Col 3 Employee Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,3,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(1,3,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.RowHeight(0,400)</string>
        <string>F.Intrinsic.String.Build("Employee{0}Number",V.Ambient.NewLine,V.Local.sEmployee)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.TextMatrix(3,0,V.Local.sEmployee)</string>
        <string />
        <string>'Col 3 Employee Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(2,3,"Format","Alignment",6)</string>
        <string>'employee style 3 so we can lock all cells besides the first later</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.BuildStyle(3,3,"Type","Locked",False)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.ApplyStyle(0,1)</string>
        <string />
        <string />
        <string />
        <string />
        <string>'Trumpf Material Buildstyle</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Cols(8)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(2)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.FixedRows(1)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.SetColumnPercentages(".25:.0:.25:.25:.25:.149:.05:.05")</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.SetColumnPercentages(".249:.0:.205:.205:.205:.075:.03:.03")</string>
        <string />
        <string />
        <string>'Col 0 Material Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,0,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,0,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(0,0,"Material")</string>
        <string />
        <string>''Col 0 Material Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,0,"Type","Locked",True)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,0,"Format","Alignment",2)</string>
        <string />
        <string>'Col 1 Job Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,1,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,1,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(1,0,"Work Order")</string>
        <string />
        <string>''Col 1 Job Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,1,"Type","Dropdownlist",V.Args.JOBS)</string>
        <string />
        <string>'Col 2 Lot Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,2,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,2,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(2,0,"Lot")</string>
        <string />
        <string>''Col 2 Lot Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)</string>
        <string />
        <string>'Col 3 Bin Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,3,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,3,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(3,0,"Bin")</string>
        <string />
        <string>''Col 3 Bin Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,3,"Type","Dropdownlist","")</string>
        <string>''locked until they pick a lot</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,3,"Type","Locked",True)</string>
        <string />
        <string>'Col 4 Serial Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,4,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,4,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,4,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(4,0,"Serial")</string>
        <string />
        <string>'Col 5 Qty Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,5,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,5,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,5,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(5,0,"Qty")</string>
        <string />
        <string>''Col 5 Qty Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,4,"Type","Locked",False)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,4,"Format","Alignment",6)</string>
        <string />
        <string>'Col 6 Add Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,6,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,6,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,6,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(6,0,"+")</string>
        <string />
        <string>''Col 6 Add Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,5,"Color","Fore",V.Color.Green)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,5,"Format","Alignment",4)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,5,"Type","Command","+")</string>
        <string />
        <string>'Col 7 Delete Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,7,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,7,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(1,7,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(7,0,"-")</string>
        <string />
        <string>''Col 7 Delete Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,6,"Color","Fore",V.Color.Red)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,6,"Format","Alignment",4)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(2,6,"Type","Command","-")</string>
        <string />
        <string />
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.ApplyStyle(0,1)</string>
        <string />
        <string>'Trumpf Drop Buildstyle</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.Cols(6)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(2)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.FixedRows(1)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.SetColumnPercentages(".26:.0:.25:.25:.25:.239")</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.SetColumnPercentages(".249:.0:.1875:.1875:.1875:.1875")</string>
        <string />
        <string />
        <string>'Col 0 Material Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,0,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,0,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(0,0,"Material")</string>
        <string />
        <string>''Col 0 Material Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,0,"Type","Locked",True)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,0,"Format","Alignment",2)</string>
        <string />
        <string>'Col 1 Job Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,1,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,1,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(1,0,"Work Order")</string>
        <string />
        <string>''Col 1 Job Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,1,"Type","Dropdownlist",V.Args.JOBS)</string>
        <string />
        <string>'Col 2 Lot Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,2,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,2,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(2,0,"Lot")</string>
        <string />
        <string>''Col 2 Lot Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)</string>
        <string />
        <string>'Col 3 Bin Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,3,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,3,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(3,0,"Bin")</string>
        <string />
        <string>''Col 3 Bin Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,3,"Type","Dropdownlist","")</string>
        <string>''this will be locked until lot is picked</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,3,"Type","Locked",True)</string>
        <string />
        <string>'Col 4 Serial Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,4,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,4,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,4,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(4,0,"Serial")</string>
        <string />
        <string>'Col 5 Size Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,5,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,5,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(1,5,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(5,0,"Size")</string>
        <string />
        <string>''Col 4 Size Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,4,"Type","Locked",True)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(2,4,"Format","Alignment",6)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.ApplyStyle(0,1)</string>
        <string />
        <string>V.Local.iStyle.Set(3)</string>
        <string>'loop through material buildstyle to create new ones as needed for both material and drop</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)</string>
        <string>F.Intrinsic.Debug.Stop</string>
        <string />
        <string>	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,&lt;&gt;,"")</string>
        <string>		F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Style,=,"","OR",V.uGlobal.uMaterial(v.Local.iCount)!Style,=,0)</string>
        <string>			'Material buildstyle lines</string>
        <string>			'Col 0 Material Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)</string>
        <string>			'Col 2 Lot Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)</string>
        <string>			'Col 3 Bin Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")</string>
        <string>			'locked until they pick a lot</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)</string>
        <string>			'Col 4 Serial</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")</string>
        <string>			'locked until they pick a lot</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)</string>
        <string>			'Col 5 Qty Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,5,"Type","Locked",False)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)</string>
        <string>			'Col 6 Add Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,6,"Type","Command","+")</string>
        <string>			'Col 7 Delete Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTMaterial.BuildStyle(V.Local.iStyle,7,"Type","Command","-")</string>
        <string />
        <string>			'Drop buildstyle lines</string>
        <string>			'Col 0 Material Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)</string>
        <string>			'Col 2 Lot Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)</string>
        <string>			'Col 3 Bin Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")</string>
        <string>			'this will be locked until lot is picked</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)</string>
        <string>			'Col 4 Serial</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")</string>
        <string>			'this will be locked until lot is picked</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)</string>
        <string>			'Col 5 Size Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,5,"Type","Locked",True)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)</string>
        <string />
        <string>			'get all of the materials with this material and set its style</string>
        <string>			V.Local.sOrdinal.Redim(0,0)</string>
        <string>			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uMaterial(v.Local.iCount)!Material,V.Local.sOrdinal)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sOrdinal,&lt;&gt;,"")</string>
        <string>				F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>				F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)</string>
        <string>					V.uGlobal.uMaterial(v.Local.sOrdinal(v.Local.iCount2))!Style.Set(V.Local.iStyle)</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iCount2)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>			'add one to the style for the next material type</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iStyle,1,V.Local.iStyle)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("TrumpfBuildstyle_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.TrumpfBuildstyle.End</string>
        <string />
        <string>Program.Sub.TrumpfLoadFG.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("TrumpfLoadFG_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string />
        <string>'load time udt to time flexgrid</string>
        <string>'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uTime!Job,False)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.LoadFromUDT("uGlobal.uTime","Job::0*!*Qty::1*!*Time::2",2)</string>
        <string />
        <string>'load material udt to material flexgrid</string>
        <string>'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uMaterial!Material,0)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTMaterial.LoadFromUDT("uGlobal.uMaterial","Material::0*!*Qty::4",2)</string>
        <string>F.Intrinsic.Math.Add(V.uGlobal.uMaterial.UBound,2,V.Local.iRows)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(V.Local.iRows)</string>
        <string>V.Local.iRows.Set(1)</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(0,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.TextMatrix(5,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Qty)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Style)</string>
        <string>	F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'load drop udt to drop flexgrid</string>
        <string>'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uDrop!Material,0)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgTDrop.LoadFromUDT("uGlobal.uDrop","Material::0*!*Lot::2*!*Size::4",2)</string>
        <string>F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,&lt;&gt;,-1)</string>
        <string>	F.Intrinsic.Math.Add(V.uGlobal.uDrop.UBound,2,V.Local.iRows)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(V.Local.iRows)</string>
        <string>	V.Local.iRows.Set(1)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(0,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Material.Trim)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(5,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Size.Trim)</string>
        <string>		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uDrop(v.Local.iCount)!Material,V.Local.sOrdinal)</string>
        <string>		F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTDrop.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>'F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgTDrop.Rows,1,V.Local.iRows)</string>
        <string>'F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)</string>
        <string>'	Gui.Ncell_Trumpf_Interface.gsfgTDrop.TextMatrix(1,V.Local.iCount,V.uGlobal.uTime!Job)</string>
        <string>'F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.ApplyStyle(1,3)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,=,-1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("TrumpfLoadFG_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.TrumpfLoadFG.End</string>
        <string />
        <string>Program.Sub.Consolidate.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Consolidate_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iUbound.Declare(Long)</string>
        <string>V.Local.sJob.Declare(String)</string>
        <string>V.Local.sSuffix.Declare(String)</string>
        <string>V.Local.sSeq.Declare(String)</string>
        <string>V.Local.sJobSuffix.Declare(String)</string>
        <string>V.Local.sNestID.Declare(String)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sTime.Declare(String)</string>
        <string>V.Local.sRow.Declare(String)</string>
        <string>V.Local.sLine.Declare(String)</string>
        <string>V.Local.fIssued.Declare(Float)</string>
        <string>V.Local.fTotalDropped.Declare(Float)</string>
        <string>V.Local.fDrop.Declare(Float)</string>
        <string>V.Local.fTemp.Declare(Float)</string>
        <string>V.Local.fTotalIssued.Declare(Float)</string>
        <string>V.Local.fAdditional.Declare(Float)</string>
        <string>V.Local.fTotalParts.Declare(Float)</string>
        <string>V.Local.fTemp1.Declare(Float)</string>
        <string />
        <string>V.Local.iUbound.Redim(0,2)</string>
        <string>V.Local.iUbound(0).set(V.uGlobal.uTime.UBound)</string>
        <string>V.Local.iUbound(1).Set(V.uGlobal.uMaterial.UBound)</string>
        <string>V.Local.iUbound(2).Set(V.uGlobal.uDrop.UBound)</string>
        <string>'find the highest ubound</string>
        <string>F.Intrinsic.Variable.ArrayMax(V.Local.iUbound,V.Local.iUbound(0))</string>
        <string>V.Local.iUbound.RedimPreserve(0,0)</string>
        <string>'set all ubounds to highest ubound</string>
        <string>V.uGlobal.uComplete.Redim(-1,-1)</string>
        <string>V.uGlobal.uComplete.Redim(0,0)</string>
        <string>V.uGlobal.uTime.RedimPreserve(0,V.Local.iUbound)</string>
        <string>V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iUbound)</string>
        <string>F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,&lt;&gt;,-1)</string>
        <string>	V.uGlobal.uDrop.RedimPreserve(0,V.Local.iUbound)</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>	V.uGlobal.uDrop.Redim(0,V.Local.iUbound)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>V.uGlobal.uComplete.RedimPreserve(0,V.Local.iUbound)</string>
        <string />
        <string>V.Local.sNestID.set(V.uGlobal.uTime!NestID)</string>
        <string />
        <string>F.Intrinsic.Control.For(V.Local.iCount,0,V.Local.iUbound,1)</string>
        <string>	'add time udt to complete</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!NestID.Set(V.Local.sNestID)</string>
        <string>	'split out job suf seq</string>
        <string>	F.Intrinsic.Control.If(V.Args.Type,=,"Load")</string>
        <string>		V.Local.sjob.Set(V.uGlobal.uTime(v.Local.iCount)!Job)</string>
        <string>		F.Intrinsic.Control.If(V.Local.sJob,&lt;&gt;,"")</string>
        <string>			F.Intrinsic.String.Split(V.Local.sJob,"-",V.Local.sJob)</string>
        <string>			V.Local.sJob.RedimPreserve(0,2)</string>
        <string>			V.Local.sSuffix.Set(V.Local.sJob(1))</string>
        <string>			V.Local.sSeq.Set(V.Local.sjob(2))</string>
        <string>			V.Local.sJob.RedimPreserve(0,0)</string>
        <string>			F.Intrinsic.String.Build("{0}-{1}",V.Local.sJob,V.Local.sSuffix,V.Local.sJobSuffix)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCount)!TWorkOrder.Set(V.Local.sJobSuffix)</string>
        <string>		F.Intrinsic.Control.Else</string>
        <string>			V.Local.sJob.Set("")</string>
        <string>			V.Local.sSuffix.Set("")</string>
        <string>			V.Local.sSeq.Set("")</string>
        <string>			V.Local.sJobSuffix.Set("")</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		V.uGlobal.uComplete(V.Local.iCount)!TWorkOrder.Set(V.uGlobal.uTime(V.Local.iCount)!Job)</string>
        <string>		F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>			F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND TJOB = '{1}' ",V.Local.sNestID.Trim,V.uGlobal.uComplete(V.Local.iCount)!TWorkOrder.Trim,V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>			F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND TJOB = '{1}' ",V.Local.sNestID.Trim,V.uGlobal.uComplete(V.Local.iCount)!TWorkOrder.Trim,V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)</string>
        <string>			V.Local.sJob.Set(V.ODBC.Con!rst.FieldValTrim!JOB)</string>
        <string>			V.Local.sSuffix.Set(V.ODBC.Con!rst.FieldValTrim!SUFFIX)</string>
        <string>			V.Local.sSeq.Set(V.ODBC.Con!rst.FieldValTrim!SEQUENCE)</string>
        <string>		F.Intrinsic.Control.Else</string>
        <string>			V.Local.sJob.Set("")</string>
        <string>			V.Local.sSuffix.Set("")</string>
        <string>			V.Local.sSeq.Set("")</string>
        <string>			V.Local.sJobSuffix.Set("")</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.ODBC.Con!rst.Close</string>
        <string>		V.uGlobal.uComplete(V.Local.iCount)!TWC.Set(V.uGlobal.uTime(V.Local.iCount)!WC)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	V.uGlobal.uComplete(v.Local.iCount)!TQty.Set(V.uGlobal.uTime(v.Local.iCount)!Qty)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!TTime.Set(V.uGlobal.uTime(v.Local.iCount)!Time)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!TEmployee.Set(V.uGlobal.uTime(v.Local.iCount)!Employee)</string>
        <string>	V.uGlobal.uComplete(V.Local.iCount)!TIssue.Set(V.uGlobal.uTime(V.Local.iCount)!Issue)</string>
        <string>	'add material udt to complete</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!MMaterial.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!MJob.Set(V.uGlobal.uMaterial(v.Local.iCount)!Job.Left10)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!MLot.Set(V.uGlobal.uMaterial(v.Local.iCount)!Lot)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!MBin.Set(V.uGlobal.uMaterial(v.Local.iCount)!Bin)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!MSerial.Set(V.uGlobal.uMaterial(v.Local.iCount)!Serial)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!MQty.Set(V.uGlobal.uMaterial(V.Local.iCount)!Qty)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!MArea.Set(V.uGlobal.uMaterial(v.Local.iCount)!Area)</string>
        <string>F.Intrinsic.Debug.Stop</string>
        <string />
        <string>	'change this to get Area based on inventory_mst2 (length*width)</string>
        <string>	F.Intrinsic.String.Build("select Length * Width as MAREA from INVENTORY_MST2 where PART = '{0}'",V.uGlobal.uComplete(v.Local.iCount)!MMaterial.PSQLFriendly,V.Local.sSQL)</string>
        <string>	F.ODBC.Connection!Con.OpenRecordsetRO("rstOrigDims",V.Local.sSQL)</string>
        <string>	F.Intrinsic.Control.If(V.ODBC.Con!rstOrigDims.EOF,&lt;&gt;,True)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.Con!rstOrigDims.FieldValFloat!MAREA,&gt;,V.uGlobal.uComplete(v.Local.iCount)!MArea.Float)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCount)!MArea.Set(V.ODBC.Con!rstOrigDims.FieldValFloat!MAREA)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	F.ODBC.Con!rstOrigDims.Close</string>
        <string />
        <string />
        <string />
        <string>	'add drop udt to complete</string>
        <string>'	F.Intrinsic.Control.If(V.Args.Type,=,"Load")</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Set(V.uGlobal.uDrop(v.Local.iCount)!Material)</string>
        <string>'	F.Intrinsic.Control.ElseIf(V.Args.Type,=,"Save")</string>
        <string>'		F.Intrinsic.String.Build("\{0\}\{1\}",V.uGlobal.uDrop(v.Local.iCount)!Material,V.uGlobal.uDrop(v.Local.iCount)!Size,V.Local.sRet)</string>
        <string>'		V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Set(V.Local.sRet.left20)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!DJob.Set(V.uGlobal.uDrop(v.Local.iCount)!Job)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!DLot.Set(V.uGlobal.uDrop(v.Local.iCount)!Lot)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!DBin.Set(V.uGlobal.uDrop(v.Local.iCount)!Bin)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!DSerial.Set(V.uGlobal.uDrop(v.Local.iCount)!Serial)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!DSize.Set(V.uGlobal.uDrop(v.Local.iCount)!Size)</string>
        <string>	'add additonal detail to lines</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!Job.Set(V.Local.sJob)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!Suffix.Set(V.Local.sSuffix)</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!Seq.Set(V.Local.sSeq)</string>
        <string>	F.Intrinsic.Control.If(V.Args.Type,=,"Load")</string>
        <string>		'gets the total dropped</string>
        <string>		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!DSize,&lt;&gt;,"")</string>
        <string>			F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize,"x",V.Local.fDrop)</string>
        <string>			V.Local.fDrop.RedimPreserve(0,1)</string>
        <string>			F.Intrinsic.Math.Mult(V.Local.fDrop(0),V.Local.fDrop(1),V.Local.fDrop)</string>
        <string>			V.Local.fDrop.RedimPreserve(0,0)</string>
        <string>			F.Intrinsic.Math.Add(V.Local.fTotalDropped,V.Local.fDrop,V.Local.fTotalDropped)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		'get total issued</string>
        <string>		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,&lt;&gt;,0)</string>
        <string>			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTotalIssued,V.Local.fTotalIssued)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	'add id to udt</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!ID.Set(V.Local.iCount)</string>
        <string />
        <string>	'get the total parts</string>
        <string>	F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTotalParts)</string>
        <string />
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Args.Type,=,"Load")</string>
        <string>F.Intrinsic.Debug.Stop</string>
        <string>	V.uGlobal.uComplete!MJob.Set(V.Args.Qty)</string>
        <string>	'calculate how much needs to be added back to issue</string>
        <string>	F.Intrinsic.Math.Add(V.Local.fTotalIssued,V.Local.fTotalDropped,V.Local.fTotalDropped)</string>
        <string>	F.Intrinsic.Math.Mult(V.uGlobal.uComplete!MArea,V.uGlobal.uComplete!MJob,V.Local.fTemp1)</string>
        <string>	F.Intrinsic.Math.Sub(V.Local.fTemp1,V.Local.fTotalDropped,V.Local.fDrop)</string>
        <string>'	F.Intrinsic.Math.Sub(V.Args.TotalArea.Float,V.Local.fTotalDropped,V.Local.fDrop)</string>
        <string>	'add the amount back into the issues</string>
        <string>	V.Local.fTemp1.Set(0)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,&lt;&gt;,"")</string>
        <string>'			F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Args.TotalArea.Float,V.Local.fAdditional)</string>
        <string>'			F.Intrinsic.Math.Mult(V.Local.fAdditional,V.Local.fDrop,V.Local.fAdditional)</string>
        <string>'			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fAdditional,V.Local.fAdditional)</string>
        <string>''			F.Intrinsic.String.Format(V.Local.fAdditional,"#.000",V.Local.fAdditional)</string>
        <string>'			V.uGlobal.uComplete(v.Local.iCount)!TIssue.Set(V.Local.fAdditional)</string>
        <string />
        <string>			F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTemp1)</string>
        <string>			F.Intrinsic.Math.Mult(V.Local.fTemp1,V.Local.fDrop,V.Local.fTemp1)</string>
        <string>			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTemp1,V.uGlobal.uComplete(v.Local.iCount)!TIssue)</string>
        <string>			V.Local.fTemp1.Set(0)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>	</string>
        <string />
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>'load finished udt into the table</string>
        <string>F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>	'delete nestid first</string>
        <string>	F.Intrinsic.String.Build("DELETE FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' ",V.Local.sNestID,V.Local.sSQL)</string>
        <string>	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)</string>
        <string>	F.ODBC.Con!rst.Close</string>
        <string>	'TRUMPF save to trumpf table</string>
        <string>	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst","SELECT * FROM GCG_3744_TRUMPF_SCRN")</string>
        <string>F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>	'get the start and end time before deleting</string>
        <string>	F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE, START_TIME, END_TIME FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND JOB &lt;&gt; '' ORDER BY JOB ASC, SUFFIX ASC ",V.Local.sNestID,V.Local.sSQL)</string>
        <string>	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTime)</string>
        <string>	'delete nestid first</string>
        <string>	F.Intrinsic.String.Build("DELETE FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' ",V.Local.sNestID,V.Local.sSQL)</string>
        <string>	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)</string>
        <string>	F.ODBC.Con!rst.Close</string>
        <string>	'NCELL save to ncell table</string>
        <string>	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst","SELECT * FROM GCG_3744_NCELL_SCRN")</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Variable.SaveUDTToRecordSet("Con","rst","v.uGlobal.uComplete")</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string />
        <string>'if on ncell loop through the nest to readd the start and end time</string>
        <string>F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1,"AND",V.Local.sTime,&lt;&gt;,"")</string>
        <string>	F.Intrinsic.String.Split(V.Local.sTime,"#$#",V.Local.sRow)</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.Local.sRow.LBound,V.Local.sRow.UBound,1)</string>
        <string>		F.Intrinsic.String.Split(V.Local.sRow(v.Local.iCount),"*!*",V.Local.sLine)</string>
        <string>		V.Local.sLine.RedimPreserve(0,4)</string>
        <string>		F.Intrinsic.String.Build("SELECT * FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND JOB = '{1}' AND SUFFIX = '{2}' AND SEQUENCE = '{3}' ",V.Local.sNestID,V.Local.sLine(0).Trim,V.Local.sLine(1).Trim,V.Local.sLine(2).Trim,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)</string>
        <string>		'update the start and start time</string>
        <string>		F.ODBC.Con!rst.Set!START_TIME(V.Local.sLine(3).Trim)</string>
        <string>		F.ODBC.Con!rst.Set!END_TIME(V.Local.sLine(4).Trim)</string>
        <string>		F.ODBC.Con!rst.Update</string>
        <string>		F.ODBC.Con!rst.Close</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>	</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Consolidate_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.Consolidate.End</string>
        <string />
        <string>Program.Sub.PopDropDown.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("PopDropDown_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string />
        <string>'F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>	'trumpf tab so load trumph stuff</string>
        <string>	'delete existing stuff in combo box</string>
        <string>	Gui.Ncell_Trumpf_Interface.cmboTNestID.ClearItems</string>
        <string>	'load new items</string>
        <string>	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","SELECT DISTINCT NESTID FROM GCG_3744_TRUMPF_SCRN WHERE CLOSED &lt;&gt; 'Y' ")</string>
        <string>	F.Intrinsic.Control.DoUntil(V.ODBC.Con!rst.EOF,=,True)</string>
        <string>		Gui.Ncell_Trumpf_Interface.cmboTNestID.AddItem(V.ODBC.Con!rst.FieldValTrim!NESTID)</string>
        <string>		F.ODBC.Con!rst.MoveNext</string>
        <string>	F.Intrinsic.Control.Loop</string>
        <string>	F.ODBC.Con!rst.Close</string>
        <string>'F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>	'Ncell tab so load ncell stuff</string>
        <string>	'delete existing stuff in combo box</string>
        <string>	Gui.Ncell_Trumpf_Interface.cmboNNestID.ClearItems</string>
        <string>	'load new items</string>
        <string>	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst","SELECT DISTINCT NESTID FROM GCG_3744_NCELL_SCRN WHERE CLOSED &lt;&gt; 'Y' ")</string>
        <string>	F.Intrinsic.Control.DoUntil(V.ODBC.Con!rst.EOF,=,True)</string>
        <string>		Gui.Ncell_Trumpf_Interface.cmboNNestID.AddItem(V.ODBC.Con!rst.FieldValTrim!NESTID)</string>
        <string>		F.ODBC.Con!rst.MoveNext</string>
        <string>	F.Intrinsic.Control.Loop</string>
        <string>	F.ODBC.Con!rst.Close</string>
        <string>'F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("PopDropDown_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.PopDropDown.End</string>
        <string />
        <string>program.sub.cmbotnestid_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmbotnestid_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sNestID.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sSheets.Declare(String)</string>
        <string>V.Local.sJobs.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.sTemp.Declare(String)</string>
        <string>V.Local.sLots.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iTemp.Declare(Long)</string>
        <string>V.Local.fTemp.Declare(Float)</string>
        <string />
        <string>F.Intrinsic.UI.InvokeWaitDialog("Loading Nest","Loading")</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)</string>
        <string />
        <string>'Wipe out Ncell flexgrid</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.cmboNNestID.Text("")</string>
        <string />
        <string>V.Local.sNestID.Set(V.Screen.Ncell_Trumpf_Interface!cmboTNestID.Text)</string>
        <string />
        <string>'Load the uTime udt</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Time Table",20)</string>
        <string>F.Intrinsic.String.Build("SELECT NESTID, TJOB, TQTY, TTIME, TEMPLOYEE, TISSUE, ID FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND TJOB &lt;&gt; '' AND CLOSED &lt;&gt; 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uTime",False,100)</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string />
        <string>'Load the uMaterial udt</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Material Table",40)</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"MJOB")</string>
        <string>F.Intrinsic.String.Build("SELECT NESTID, MMATERIAL, MQTY, ID, MAREA, MJOB FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND MMATERIAL &lt;&gt; '' AND CLOSED &lt;&gt; 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uMaterial",False,100)</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"")</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string />
        <string>'Load to Drop udt</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Drops Table",60)</string>
        <string>F.Intrinsic.String.Build("SELECT NESTID, DMATERIAL, DSIZE, ID, DJOB  FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND DMATERIAL &lt;&gt; '' AND CLOSED &lt;&gt; 'Y' ORDER BY ID",V.Local.sNestID,V.Local.sSQL)</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uDrop",False,100)</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string />
        <string>'gather all of the lots and pass to buildstyle</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Lots",80)</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,&lt;&gt;,"")</string>
        <string>		V.Local.sPart.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)</string>
        <string>		F.Intrinsic.String.Build("SELECT DISTINCT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY &gt; 0 ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTemp)</string>
        <string>		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)</string>
        <string>'		F.Intrinsic.Control.If(V.Local.sTemp,&lt;&gt;,"","AND",V.Local.sLots,&lt;&gt;,"")</string>
        <string>'			F.Intrinsic.String.Build("{0}#$#{1}",V.Local.sLots,V.Local.sTemp,V.Local.sLots)</string>
        <string>'		F.Intrinsic.Control.ElseIf(V.Local.sTemp,&lt;&gt;,"")</string>
        <string>'			V.Local.sLots.Set(V.Local.sTemp)</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>		F.Intrinsic.Control.If(V.Local.sTemp,&lt;&gt;,"")</string>
        <string>			F.Intrinsic.String.Replace(V.Local.sTemp,"#$#","*!*",V.Local.sTemp)</string>
        <string>			V.uGlobal.uMaterial(v.Local.iCount)!LotDDL.Set(V.Local.sTemp)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>'F.Intrinsic.String.Replace(V.Local.sLots,"#$#","*!*",V.Local.sLots)</string>
        <string>'remove duplicates</string>
        <string>'F.Intrinsic.String.Split(V.Local.sLots,"*!*",V.Local.sLots)</string>
        <string>'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLots,V.Local.sLots)</string>
        <string>'F.Intrinsic.String.Join(V.Local.sLots,"*!*",V.Local.sLots)</string>
        <string />
        <string>'Gather all the work orders and pass to the buildstyle for the drops</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Work Orders",85)</string>
        <string>'F.Intrinsic.String.Build("SELECT TJOB FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}' AND TJOB &lt;&gt; '' ",V.Local.sNestID,V.Local.sSQL)</string>
        <string>'F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.Replace(V.Local.sJobs,"*!*","",V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.Replace(V.Local.sJobs,"#$#","*!*",V.Local.sJobs)</string>
        <string>''remove duplicates</string>
        <string>'F.Intrinsic.String.Split(V.Local.sJobs,"*!*",V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sJobs,V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.Join(V.Local.sJobs,"*!*",V.Local.sJobs)</string>
        <string />
        <string>F.Intrinsic.String.Build("Total Sheets: {0}",V.uGlobal.uMaterial!Job,V.Local.sSheets)</string>
        <string>Gui.Ncell_Trumpf_Interface.lblTSheets.Caption(V.Local.sSheets)</string>
        <string />
        <string>'set the qty for the sheets</string>
        <string>'F.Intrinsic.String.Build("SELECT MMATERIAL, (TISSUE/MAREA) AS SHEET FROM GCG_3744_TRUMPF_SCRN WHERE NESTID = '{0}'  AND MMATERIAL &lt;&gt; '' ORDER BY ID ASC",V.uGlobal.uMaterial!NestID,V.Local.sSQL)</string>
        <string>'F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstQty",V.Local.sSQL)</string>
        <string>'V.Local.iCount.Set(0)</string>
        <string>'F.Intrinsic.Control.DoUntil(V.ODBC.Con!rstQty.EOF,=,True)</string>
        <string>'	F.Intrinsic.Control.If(V.ODBC.Con!rstQty.FieldValFloat!SHEET,&gt;,V.ODBC.Con!rstQty.FieldValLong!SHEET)</string>
        <string>'		F.Intrinsic.Math.Add(V.ODBC.Con!rstQty.FieldValLong!SHEET,1,V.uGlobal.uMaterial(V.Local.iCount)!Qty)</string>
        <string>'	F.Intrinsic.Control.Else</string>
        <string>'		V.uGlobal.uMaterial(V.Local.iCount)!Qty.Set(V.ODBC.Con!rstQty.FieldValLong!SHEET)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>'	F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iCount)</string>
        <string>'	F.ODBC.Con!rstQty.MoveNext</string>
        <string>'F.Intrinsic.Control.Loop</string>
        <string>'F.ODBC.Con!rstQty.Close</string>
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Buildstyle",90)</string>
        <string>'F.Intrinsic.Control.CallSub(Trumpfbuildstyle,"JOBS",V.Local.sJobs,"LOTS",V.Local.sLots)</string>
        <string>F.Intrinsic.Control.CallSub(Trumpfbuildstyle)</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Information to Grid",100)</string>
        <string>F.Intrinsic.Control.CallSub(Trumpfloadfg)</string>
        <string />
        <string>F.Intrinsic.UI.CloseWaitDialog</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmbotnestid_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>program.sub.cmbotnestid_click.End</string>
        <string />
        <string>program.sub.cmdclear_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdclear_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>V.uGlobal.uTime.Redim(-1,-1)</string>
        <string>V.uGlobal.uMaterial.Redim(-1,-1)</string>
        <string>V.uGlobal.uDrop.Redim(-1,-1)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)</string>
        <string />
        <string>	Gui.Ncell_Trumpf_Interface.cmboTNestID.Text("")</string>
        <string>	Gui.Ncell_Trumpf_Interface.lblTSheets.Caption("Total Sheets: ")</string>
        <string />
        <string>F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>	'ncell flexgrids and cmbo box and lbl reset</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(1)</string>
        <string />
        <string>	Gui.Ncell_Trumpf_Interface.cmboNNestID.Text("")</string>
        <string>	Gui.Ncell_Trumpf_Interface.lblNSheets.Caption("Total Sheets: ")</string>
        <string />
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmdclear_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>program.sub.cmdclear_click.End</string>
        <string />
        <string>program.sub.cmdpost_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdpost_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iPos.Declare(Long)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.iUbound.Declare(Long)</string>
        <string>V.Local.sJob.Declare(String)</string>
        <string>V.Local.sSuffix.Declare(String)</string>
        <string>V.Local.sSeq.Declare(String)</string>
        <string>V.Local.sJobSuffix.Declare(String)</string>
        <string>V.Local.sNestID.Declare(String)</string>
        <string>V.Local.iTotal.Declare(Long)</string>
        <string>V.Local.iSheets.Declare(Long)</string>
        <string>V.Local.sEmployee.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string>V.Local.sRet2.Declare(String)</string>
        <string>V.Local.sLot.Declare(String)</string>
        <string>V.Local.sBin.Declare(String)</string>
        <string>V.Local.iLotBinCount.Declare(Long)</string>
        <string>V.Local.iLotC.Declare(Long)</string>
        <string>V.Local.bCheck.Declare(Boolean)</string>
        <string>V.Local.sRet3.Declare(String)</string>
        <string>V.Local.sSerial.Declare(String)</string>
        <string />
        <string>V.Local.sLot.Redim(0,0)</string>
        <string>V.Local.sBin.Redim(0,0)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface..Visible(false)</string>
        <string>Gui.F_LotQtys..Visible(False)</string>
        <string />
        <string />
        <string>F.Intrinsic.UI.InvokeWaitDialog("Checking to see if values are valid.","Updating")</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!gsfgTTime.Rows,=,1,"OR",V.Screen.Ncell_Trumpf_Interface!gsfgTTime.Rows,=,0)</string>
        <string>		F.Intrinsic.UI.CloseWaitDialog</string>
        <string>		Gui.Ncell_Trumpf_Interface..Show</string>
        <string>		F.Intrinsic.Control.ExitSub</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	'commit changes and save to udt</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTTime.Commit</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Commit</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTDrop.Commit</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Checking Employee",5)</string>
        <string>	F.Intrinsic.Control.CallSub(Gsfgtimeposttext)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgTTime.GetTextMatrix(3,1,V.Local.sEmployee)</string>
        <string>	F.Intrinsic.Control.If(V.Local.sEmployee,=,"")</string>
        <string>		F.Intrinsic.UI.CloseWaitDialog</string>
        <string>		F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")</string>
        <string>		Gui.Ncell_Trumpf_Interface..Show</string>
        <string>		F.Intrinsic.Control.ExitSub</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Updating Employee",10)</string>
        <string>	'setting all employees in time udt</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uTime.LBound,V.uGlobal.uTime.UBound,1)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTTime.GetTextMatrix(3,V.Local.iPos,V.Local.sRet)</string>
        <string>		F.Intrinsic.Control.If(V.Local.sRet,=,"")</string>
        <string>			F.Intrinsic.UI.CloseWaitDialog</string>
        <string>			F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")</string>
        <string>			Gui.Ncell_Trumpf_Interface..Show</string>
        <string>			F.Intrinsic.Control.ExitSub</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		V.uGlobal.uTime(v.Local.iCount)!Employee.Set(V.Local.sRet.Trim)</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Updating Material",15)</string>
        <string>	'setting lot and qty in material udt</string>
        <string>	V.Local.iRows.Set(V.Screen.Ncell_Trumpf_Interface!gsfgTMaterial.Rows)</string>
        <string>	F.Intrinsic.Math.Sub(V.Local.iRows,2,V.Local.iRows)</string>
        <string>	V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iRows)</string>
        <string>'	F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,0,V.Local.iRows,1)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)</string>
        <string>		F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)</string>
        <string>			F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT &lt;&gt; '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)</string>
        <string>				F.ODBC.Con!rstTest.Close</string>
        <string>				F.ODBC.Con!rst.Close</string>
        <string>				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>				F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Material","Warning")</string>
        <string>				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>				F.Intrinsic.Control.ExitSub</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.ODBC.Con!rstTest.Close</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.ODBC.Con!rst.Close</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)</string>
        <string />
        <string>		'sets the lot bin in array so it can be checkd agains the drops</string>
        <string>		V.Local.sLot.RedimPreserve(0,V.Local.iLotBinCount)</string>
        <string>		V.Local.sBin.RedimPreserve(0,V.Local.iLotBinCount)</string>
        <string>		V.Local.sSerial.RedimPreserve(0,V.Local.iLotBinCount)</string>
        <string>		V.Local.sLot(v.Local.iLotBinCount).Set(V.Local.sRet.Trim)</string>
        <string>		V.Local.sBin(v.Local.iLotBinCount).Set(V.Local.sRet2.Trim)</string>
        <string>		V.Local.sSerial(v.Local.iLotBinCount).Set(V.Local.sRet3.Trim)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iLotBinCount,1,V.Local.iLotBinCount)</string>
        <string>		'check for work order</string>
        <string>'		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)</string>
        <string>'		F.Intrinsic.Control.If(V.Local.sRet,=,"")</string>
        <string>'			F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'			F.Intrinsic.UI.Msgbox("Please select a Work Order for Material","Warning")</string>
        <string>'			Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'			F.Intrinsic.Control.ExitSub</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>'		V.uGlobal.uMaterial(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)</string>
        <string>		'set material</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sRet)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Material.Set(V.Local.sRet.Trim)</string>
        <string>		'gets the quantity and adds it to total for later</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgTMaterial.GetTextMatrix(5,V.Local.iPos,V.Local.sRet)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Qty.Set(V.Local.sRet.Trim)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iTotal,V.Local.sRet.Long,V.Local.iTotal)</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLot,V.Local.sLot)</string>
        <string>	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sBin,V.Local.sBin)</string>
        <string>	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sSerial,V.Local.sSerial)</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Updating Drops",20)</string>
        <string>	'setting lot in drop udt</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,&lt;&gt;,-1)</string>
        <string>		F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)</string>
        <string>			F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)</string>
        <string>			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)</string>
        <string>				F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT &lt;&gt; '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>				F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)</string>
        <string>				F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)</string>
        <string>					F.ODBC.Con!rstTest.Close</string>
        <string>					F.ODBC.Con!rst.Close</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Drops","Warning")</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.ODBC.Con!rstTest.Close</string>
        <string>			F.Intrinsic.Control.Else</string>
        <string>				'loop through the lot bin arrays to see if the lot bin are being used as material</string>
        <string>				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)</string>
        <string>					F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)</string>
        <string>						V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)</string>
        <string>						V.Local.bCheck.Set(True)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>				F.Intrinsic.Control.If(V.Local.bCheck,=,False)</string>
        <string>					F.Intrinsic.UI.Msgbox("Drop Lot does not match Material Lot","Warning")</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				V.Local.bCheck.Set(False)</string>
        <string>				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)</string>
        <string>					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)</string>
        <string>					V.Local.bCheck.Set(True)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>				F.Intrinsic.Control.If(V.Local.bCheck,=,False)</string>
        <string>					F.Intrinsic.UI.Msgbox("Drop Bin does not match Material Bin","Warning")</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				V.Local.bCheck.Set(False)</string>
        <string>				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sSerial.LBound,V.Local.sSerial.UBound,1)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sSerial(v.Local.iLotC),=,V.Local.sRet3.Trim)</string>
        <string>					V.uGlobal.uDrop(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)</string>
        <string>					V.Local.bCheck.Set(True)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>				F.Intrinsic.Control.If(V.Local.bCheck,=,False)</string>
        <string>					F.Intrinsic.UI.Msgbox("Drop Serial does not match Material Serial","Warning")</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string />
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.ODBC.Con!rst.Close</string>
        <string />
        <string>			'loop through the lot bin arrays to see if the lot bin are being used as material</string>
        <string>'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)</string>
        <string>'				F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)</string>
        <string>'					V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)</string>
        <string>'				F.Intrinsic.Control.EndIf</string>
        <string>'			F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>	</string>
        <string>'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Lot,=,"")</string>
        <string>'				F.Intrinsic.UI.Msgbox("Please select a valid Lot for Drops","Warning")</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)</string>
        <string>'				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)</string>
        <string>'					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)</string>
        <string>'				F.Intrinsic.Control.EndIf</string>
        <string>'			F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string />
        <string>'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Bin,=,"")</string>
        <string>'				F.Intrinsic.UI.Msgbox("Please select a valid Bin for Drops","Warning")</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgTDrop.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)</string>
        <string>'			F.Intrinsic.Control.If(V.Local.sRet,=,"")</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				F.Intrinsic.UI.Msgbox("Please select a Work Order for Drops","Warning")</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string>'			V.uGlobal.uDrop(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)</string>
        <string>		F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Checking Total Quantity",25)</string>
        <string>	'check to make sure the amount of sheets is correctly entered</string>
        <string>	F.Intrinsic.String.Split(V.Screen.Ncell_Trumpf_Interface!lblTSheets.Caption,":",V.Local.sRet)</string>
        <string>	V.Local.sRet.RedimPreserve(0,1)</string>
        <string>	V.Local.iSheets.Set(V.Local.sRet(1).Long)</string>
        <string>	F.Intrinsic.Control.If(V.Local.iTotal,=,V.Local.iSheets)</string>
        <string>		V.uGlobal.uMaterial!Job.set(V.Local.iSheets)</string>
        <string>'		'We need to check to see if we have enough on hand first</string>
        <string>'		F.Intrinsic.String.Build("SELECT QTY_ONHAND FROM V_INVENTORY_MSTR WHERE PART = '{0}' ",V.uGlobal.uMaterial!Material.Trim,V.Local.sSQL)</string>
        <string>'		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstOnHand",V.Local.sSQL)</string>
        <string>'		F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.EOF,=,False)</string>
        <string>'			'check to see if we have more than we have sheets</string>
        <string>'			F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.FieldValFloat!QTY_ONHAND,&gt;=,V.Local.iSheets)</string>
        <string>'				'We can continue</string>
        <string>'				F.ODBC.Con!rstOnHand.Close</string>
        <string>				F.Intrinsic.Control.CallSub(Consolidate,"Type","Save")</string>
        <string>'			F.Intrinsic.Control.Else</string>
        <string>'				F.ODBC.Con!rstOnHand.Close</string>
        <string>'				'we don't have enough qty on hand to do this job</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				F.Intrinsic.UI.Msgbox("Not enough OnHand to complete this Nest","Warning")</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string>'		F.Intrinsic.Control.Else</string>
        <string>'			F.ODBC.Con!rstOnHand.Close</string>
        <string>'			'we don't have this part in inventory</string>
        <string>'			F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'			F.Intrinsic.UI.Msgbox("No Part found in inventory","Warning")</string>
        <string>'			Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'			F.Intrinsic.Control.ExitSub</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		F.Intrinsic.UI.CloseWaitDialog</string>
        <string>		F.Intrinsic.UI.Msgbox("Material Qty does not match Sheet Total","Warning")</string>
        <string>		Gui.Ncell_Trumpf_Interface..Show</string>
        <string>		F.Intrinsic.Control.ExitSub</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	</string>
        <string>	V.Global.iColumn.Set(-1)</string>
        <string>	V.Global.iRow.Set(-1)</string>
        <string>	V.Global.sControlName.Set("")</string>
        <string />
        <string>	'posting trumpf stuff to gss</string>
        <string>	F.Intrinsic.Control.CallSub(Post)</string>
        <string />
        <string>F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,=,1,"OR",V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,=,0)</string>
        <string>		F.Intrinsic.UI.CloseWaitDialog</string>
        <string>		Gui.Ncell_Trumpf_Interface..Show</string>
        <string>		F.Intrinsic.Control.ExitSub</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	'commit changes and save to udt</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNTime.Commit</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Commit</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Commit</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Checking Employee",5)</string>
        <string>	F.Intrinsic.Control.CallSub(Gsfgtimeposttext)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(3,1,V.Local.sEmployee)</string>
        <string>	F.Intrinsic.Control.If(V.Local.sEmployee,=,"")</string>
        <string>		F.Intrinsic.UI.CloseWaitDialog</string>
        <string>		F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")</string>
        <string>		Gui.Ncell_Trumpf_Interface..Show</string>
        <string>		F.Intrinsic.Control.ExitSub</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Updating Employee",10)</string>
        <string>	'setting all employees in time udt</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uTime.LBound,V.uGlobal.uTime.UBound,1)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(3,V.Local.iPos,V.Local.sRet)</string>
        <string>		F.Intrinsic.Control.If(V.Local.sRet,=,"")</string>
        <string>			F.Intrinsic.UI.CloseWaitDialog</string>
        <string>			F.Intrinsic.UI.Msgbox("Please select a valid Employee","Warning")</string>
        <string>			Gui.Ncell_Trumpf_Interface..Show</string>
        <string>			F.Intrinsic.Control.ExitSub</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		V.uGlobal.uTime(v.Local.iCount)!Employee.Set(V.Local.sRet.Trim)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(4,V.Local.iPos,V.Local.sRet)</string>
        <string>		V.uGlobal.uTime(V.Local.iCount)!WC.Set(V.Local.sRet.Trim)</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Updating Material",15)</string>
        <string>	'setting lot and qty in material udt</string>
        <string>	V.Local.iRows.Set(V.Screen.Ncell_Trumpf_Interface!gsfgNMaterial.Rows)</string>
        <string>	F.Intrinsic.Math.Sub(V.Local.iRows,2,V.Local.iRows)</string>
        <string>	V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iRows)</string>
        <string>'	F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,0,V.Local.iRows,1)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)</string>
        <string>		F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}'  ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)</string>
        <string>			F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT &lt;&gt; '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)</string>
        <string>				F.ODBC.Con!rstTest.Close</string>
        <string>				F.ODBC.Con!rst.Close</string>
        <string>				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>				F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Material","Warning")</string>
        <string>				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>				F.Intrinsic.Control.ExitSub</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.ODBC.Con!rstTest.Close</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.ODBC.Con!rst.Close</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)</string>
        <string />
        <string>		'sets the lot bin in array so it can be checkd agains the drops</string>
        <string>		V.Local.sLot.RedimPreserve(0,V.Local.iLotBinCount)</string>
        <string>		V.Local.sBin.RedimPreserve(0,V.Local.iLotBinCount)</string>
        <string>		V.Local.sSerial.RedimPreserve(0,V.Local.iLotBinCount)</string>
        <string>		V.Local.sLot(v.Local.iLotBinCount).Set(V.Local.sRet.Trim)</string>
        <string>		V.Local.sBin(v.Local.iLotBinCount).Set(V.Local.sRet2.Trim)</string>
        <string>		V.Local.sSerial(v.Local.iLotBinCount).Set(V.Local.sRet3.Trim)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iLotBinCount,1,V.Local.iLotBinCount)</string>
        <string>		'check for work order</string>
        <string>'		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)</string>
        <string>'		F.Intrinsic.Control.If(V.Local.sRet,=,"")</string>
        <string>'			F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'			F.Intrinsic.UI.Msgbox("Please select a Work Order for Material","Warning")</string>
        <string>'			Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'			F.Intrinsic.Control.ExitSub</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>'		V.uGlobal.uMaterial(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)</string>
        <string>		'set material</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(0,V.Local.iPos,V.Local.sRet)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Material.Set(V.Local.sRet.Trim)</string>
        <string>		'gets the quantity and adds it to total for later</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(5,V.Local.iPos,V.Local.sRet)</string>
        <string>		V.uGlobal.uMaterial(v.Local.iCount)!Qty.Set(V.Local.sRet.Trim)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iTotal,V.Local.sRet.Long,V.Local.iTotal)</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLot,V.Local.sLot)</string>
        <string>	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sBin,V.Local.sBin)</string>
        <string>	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sSerial,V.Local.sSerial)</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Updating Drops",20)</string>
        <string>	'setting lot in drop udt</string>
        <string>	V.Local.iRows.Set(V.Screen.Ncell_Trumpf_Interface!gsfgNDrop.Rows)</string>
        <string>	F.Intrinsic.Math.Sub(V.Local.iRows,2,V.Local.iRows)</string>
        <string>	F.Intrinsic.Control.If(V.Local.iRows,=,0)</string>
        <string>		'Check to see if there is a material</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(0,1,V.Local.sRet)</string>
        <string>		F.Intrinsic.Control.If(V.Local.sRet.Trim,&lt;&gt;,"")</string>
        <string>			V.uGlobal.uDrop.Redim(0,V.Local.iRows)</string>
        <string>		F.Intrinsic.Control.Else</string>
        <string>			V.uGlobal.uDrop.Redim(-1,-1)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,&lt;&gt;,-1)</string>
        <string>		F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(2,V.Local.iPos,V.Local.sRet)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(3,V.Local.iPos,V.Local.sRet2)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(4,V.Local.iPos,V.Local.sRet3)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(0,V.Local.iPos,V.Local.sPart)</string>
        <string>			V.uGlobal.uDrop(v.Local.iCount)!Material.Set(V.Local.sPart.Trim)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(5,V.Local.iPos,V.uGlobal.uDrop(v.Local.iCount)!Size)</string>
        <string>			</string>
        <string>			F.Intrinsic.String.Build("SELECT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.Local.sPart.PSQLFriendly,V.Local.sRet.Trim,V.Local.sRet2.Trim,V.Local.sRet3.Trim,V.Local.sSQL)</string>
        <string>			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,True)</string>
        <string>				F.Intrinsic.String.Build("SELECT PART FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT &lt;&gt; '-D' ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>				F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstTest",V.Local.sSQL)</string>
        <string>				F.Intrinsic.Control.If(V.ODBC.Con!rstTest.EOF,=,False)</string>
        <string>					F.ODBC.Con!rstTest.Close</string>
        <string>					F.ODBC.Con!rst.Close</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					F.Intrinsic.UI.Msgbox("Please select a valid Lot/Bin for Drops","Warning")</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.ODBC.Con!rstTest.Close</string>
        <string>			F.Intrinsic.Control.Else</string>
        <string>				'loop through the lot bin arrays to see if the lot bin are being used as material</string>
        <string>				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)</string>
        <string>					F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)</string>
        <string>						V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)</string>
        <string>						V.Local.bCheck.Set(True)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>				F.Intrinsic.Control.If(V.Local.bCheck,=,False)</string>
        <string>					F.Intrinsic.UI.Msgbox("Drop Lot does not match Material Lot","Warning")</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				V.Local.bCheck.Set(False)</string>
        <string>				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)</string>
        <string>					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)</string>
        <string>					V.Local.bCheck.Set(True)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>				F.Intrinsic.Control.If(V.Local.bCheck,=,False)</string>
        <string>					F.Intrinsic.UI.Msgbox("Drop Bin does not match Material Bin","Warning")</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				V.Local.bCheck.Set(False)</string>
        <string>				F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sSerial.LBound,V.Local.sSerial.UBound,1)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sSerial(v.Local.iLotC),=,V.Local.sRet3.Trim)</string>
        <string>					V.uGlobal.uDrop(v.Local.iCount)!Serial.Set(V.Local.sRet3.Trim)</string>
        <string>					V.Local.bCheck.Set(True)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>				F.Intrinsic.Control.If(V.Local.bCheck,=,False)</string>
        <string>					F.Intrinsic.UI.Msgbox("Drop Serial does not match Material Serial","Warning")</string>
        <string>					F.Intrinsic.UI.CloseWaitDialog</string>
        <string>					Gui.Ncell_Trumpf_Interface..Show</string>
        <string>					F.Intrinsic.Control.ExitSub</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string />
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.ODBC.Con!rst.Close</string>
        <string />
        <string>			'loop through the lot bin arrays to see if the lot bin are being used as material</string>
        <string>'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sLot.LBound,V.Local.sLot.UBound,1)</string>
        <string>'				F.Intrinsic.Control.If(V.Local.sLot(v.Local.iLotC),=,V.Local.sRet.Trim)</string>
        <string>'					V.uGlobal.uDrop(v.Local.iCount)!Lot.Set(V.Local.sRet.Trim)</string>
        <string>'				F.Intrinsic.Control.EndIf</string>
        <string>'			F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>	</string>
        <string>'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Lot,=,"")</string>
        <string>'				F.Intrinsic.UI.Msgbox("Please select a valid Lot for Drops","Warning")</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>'			F.Intrinsic.Control.For(V.Local.iLotC,V.Local.sBin.LBound,V.Local.sBin.UBound,1)</string>
        <string>'				F.Intrinsic.Control.If(V.Local.sBin(v.Local.iLotC),=,V.Local.sRet2.Trim)</string>
        <string>'					V.uGlobal.uDrop(v.Local.iCount)!Bin.Set(V.Local.sRet2.Trim)</string>
        <string>'				F.Intrinsic.Control.EndIf</string>
        <string>'			F.Intrinsic.Control.Next(V.Local.iLotC)</string>
        <string>'</string>
        <string>'			F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Bin,=,"")</string>
        <string>'				F.Intrinsic.UI.Msgbox("Please select a valid Bin for Drops","Warning")</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(1,V.Local.iPos,V.Local.sRet)</string>
        <string>'			F.Intrinsic.Control.If(V.Local.sRet,=,"")</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				F.Intrinsic.UI.Msgbox("Please select a Work Order for Drops","Warning")</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string>'			V.uGlobal.uDrop(v.Local.iCount)!Job.Set(V.Local.sRet.Trim)</string>
        <string>		F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Checking Total Quantity",25)</string>
        <string>	'check to make sure the amount of sheets is correctly entered</string>
        <string>	F.Intrinsic.String.Split(V.Screen.Ncell_Trumpf_Interface!lblNSheets.Caption,":",V.Local.sRet)</string>
        <string>	V.Local.sRet.RedimPreserve(0,1)</string>
        <string>	V.Local.iSheets.Set(V.Local.sRet(1).Long)</string>
        <string>	F.Intrinsic.Control.If(V.Local.iTotal,=,V.Local.iSheets)</string>
        <string>		V.uGlobal.uMaterial!Job.Set(V.Local.iSheets)</string>
        <string>'		'We need to check to see if we have enough on hand first</string>
        <string>'		F.Intrinsic.String.Build("SELECT QTY_ONHAND FROM V_INVENTORY_MSTR WHERE PART = '{0}' ",V.uGlobal.uMaterial!Material.Trim,V.Local.sSQL)</string>
        <string>'		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstOnHand",V.Local.sSQL)</string>
        <string>'		F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.EOF,=,False)</string>
        <string>'			'check to see if we have more than we have sheets</string>
        <string>'			F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.FieldValFloat!QTY_ONHAND,&gt;=,V.Local.iSheets)</string>
        <string>'				'We can continue</string>
        <string>'				F.ODBC.Con!rstOnHand.Close</string>
        <string>				F.Intrinsic.Control.CallSub(Consolidate,"Type","Save")</string>
        <string>'			F.Intrinsic.Control.Else</string>
        <string>'				F.ODBC.Con!rstOnHand.Close</string>
        <string>'				'we don't have enough qty on hand to do this job</string>
        <string>'				F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'				F.Intrinsic.UI.Msgbox("Not enough OnHand to complete this Nest","Warning")</string>
        <string>'				Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'				F.Intrinsic.Control.ExitSub</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string>'		F.Intrinsic.Control.Else</string>
        <string>'			F.ODBC.Con!rstOnHand.Close</string>
        <string>'			'we don't have this part in inventory</string>
        <string>'			F.Intrinsic.UI.CloseWaitDialog</string>
        <string>'			F.Intrinsic.UI.Msgbox("No Part found in inventory","Warning")</string>
        <string>'			Gui.Ncell_Trumpf_Interface..Show</string>
        <string>'			F.Intrinsic.Control.ExitSub</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		F.Intrinsic.UI.CloseWaitDialog</string>
        <string>		F.Intrinsic.UI.Msgbox("Material Qty does not match Sheet Total","Warning")</string>
        <string>		Gui.Ncell_Trumpf_Interface..Show</string>
        <string>		F.Intrinsic.Control.ExitSub</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	V.Global.iColumn.Set(-1)</string>
        <string>	V.Global.iRow.Set(-1)</string>
        <string>	V.Global.sControlName.Set("")</string>
        <string />
        <string>	'Post ncell stuff to gss</string>
        <string>	F.Intrinsic.Control.CallSub(Post)</string>
        <string />
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>'Clear the screen to allow for the next</string>
        <string>F.Intrinsic.Control.CallSub(Cmdclear_click)</string>
        <string>'repopulate the drop down because a nest it no longer there.</string>
        <string>F.Intrinsic.Control.CallSub(Popdropdown)</string>
        <string />
        <string />
        <string>Gui.Ncell_Trumpf_Interface.txtLotMaterial.Text("")</string>
        <string>Gui.Ncell_Trumpf_Interface..Show</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmdpost_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>program.sub.cmdpost_click.End</string>
        <string />
        <string>Program.Sub.Post.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Post_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.sLine.Declare(String)</string>
        <string>V.Local.sIssue.Declare(String)</string>
        <string>V.Local.sFile.Declare(String)</string>
        <string>V.Local.sBackup.Declare(String)</string>
        <string>V.Local.sNow.Declare(String)</string>
        <string>V.Local.sUpdateDate.Declare(String)</string>
        <string>V.Local.fComplete.Declare(Float)</string>
        <string>V.Local.dTimeIn.Declare(Date)</string>
        <string>V.Local.sTimeIn.Declare(String)</string>
        <string>V.Local.dTimeOut.Declare(Date)</string>
        <string>V.Local.sTimeOut.Declare(String)</string>
        <string>V.Local.fQty.Declare(Float)</string>
        <string>V.Local.fTime.Declare(Float)</string>
        <string>V.Local.sSeq.Declare(String)</string>
        <string>V.Local.sWC.Declare(String)</string>
        <string>V.Local.sClose.Declare(String)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.fLength.Declare(Float)</string>
        <string>V.Local.fWidth.Declare(Float)</string>
        <string>V.Local.fArea.Declare(Float)</string>
        <string>V.Local.sLot.Declare(String)</string>
        <string>V.Local.sQty.Declare(String)</string>
        <string>V.Local.fPercent.Declare(Float)</string>
        <string>V.Local.fPercentAmt.Declare(Float)</string>
        <string>V.Local.sJob.Declare(String)</string>
        <string>V.Local.sSuffix.Declare(String)</string>
        <string>V.Local.iPos.Declare(Long)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string>V.Local.iIssueCount.Declare(Long)</string>
        <string>V.Local.sBin.Declare(String)</string>
        <string>V.Local.fTemp.Declare(Float)</string>
        <string>V.Local.iCount2.Declare(Long)</string>
        <string>V.Local.iCount3.Declare(Long)</string>
        <string>V.Local.sOrdinal2.Declare(String)</string>
        <string>V.Local.sKey1.Declare(String)</string>
        <string>V.Local.sKey2.Declare(String)</string>
        <string>V.Local.iRetID.Declare(Long)</string>
        <string>V.Local.iTemp.Declare(Long)</string>
        <string>V.Local.bRet.Declare(Boolean)</string>
        <string>V.Local.sPadPart.Declare(String)</string>
        <string>V.Local.sPadLot.Declare(String)</string>
        <string>V.Local.sPadBin.Declare(String)</string>
        <string>V.Local.sHold.Declare(String)</string>
        <string>V.Local.sPadSerial.Declare(String)</string>
        <string>V.Local.iFor.Declare(Long)</string>
        <string>V.Local.sCheck.Declare(String)</string>
        <string>V.Local.iRemain.Declare(Float)</string>
        <string>V.Local.sRecept.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.sRev.Declare(String)</string>
        <string>V.Local.sReceptLine.Declare(String)</string>
        <string>V.Local.sToBin.Declare(String)</string>
        <string>V.Local.iRptID.Declare(Long)</string>
        <string>V.Local.iBirunID.Declare(Long)</string>
        <string>V.Local.iLogId.Declare(Long)</string>
        <string>V.Local.iRet.Declare(Long)</string>
        <string />
        <string>'Material update</string>
        <string>'WIR100 uses</string>
        <string>'Part, Rev, Loc, Qty, Lot, Bin, Heat, Serial, Job, Suffix, Seq</string>
        <string>F.Intrinsic.Ui.ChangeWaitStatus("Writing Material Issue File",30)</string>
        <string />
        <string>V.Local.fPercent.Set(30)</string>
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Writing Issue File",V.Local.fPercent)</string>
        <string>	</string>
        <string>V.uGlobal.uIssue.Redim(-1,-1)</string>
        <string>V.uGlobal.uIssue.Redim(0,0)</string>
        <string>V.uGlobal.uIssueDrop.Redim(-1,-1)</string>
        <string>V.uGlobal.uIssueDrop.Redim(0,0)</string>
        <string>V.uGlobal.uIssueJob.Redim(-1,-1)</string>
        <string>V.uGlobal.uIssueJob.Redim(0,0)</string>
        <string />
        <string />
        <string>'loop through udt complete to get all of the material jobs</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>	'Updating the work centers</string>
        <string>'	F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET PART = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}' AND SEQ = '{3}' ",V.uGlobal.uComplete(V.Local.iCount)!TWC,V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)</string>
        <string>'	F.ODBC.Connection!Con.Execute(V.Local.sSQL)</string>
        <string>'	F.Intrinsic.String.Build("UPDATE APSV3_JBLINES SET SEQRES = '{0}' WHERE JOB = '{1}' AND SFX = '{2}' AND SEQ = '{3}' ",V.uGlobal.uComplete(V.Local.iCount)!TWC,V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)</string>
        <string>'	F.ODBC.Connection!Con.Execute(V.Local.sSQL)</string>
        <string />
        <string>	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!MMaterial,&lt;&gt;,"")</string>
        <string>		'checks to see if the job-suffix lot and material are already in issue</string>
        <string>		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssue!Lot,V.uGlobal.uComplete(v.Local.iCount)!MLot,V.uGlobal.uIssue!Bin,V.uGlobal.uComplete(v.Local.iCount)!MBin,V.uGlobal.uIssue!Serial,V.uGlobal.uComplete(v.Local.iCount)!MSerial,V.uGlobal.uIssue!Material,V.uGlobal.uComplete(v.Local.iCount)!MMaterial,V.Local.sOrdinal)</string>
        <string>		'ordinal is blank so not in issue, add it</string>
        <string>		F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")</string>
        <string>			V.uGlobal.uIssue.RedimPreserve(0,V.Local.iIssueCount)</string>
        <string>	'		V.uGlobal.uIssue(v.Local.iIssueCount)!Job.Set(V.uGlobal.uComplete(v.Local.iCount)!TWorkOrder)</string>
        <string>			V.uGlobal.uIssue(v.Local.iIssueCount)!Material.Set(V.uGlobal.uComplete(v.Local.iCount)!MMaterial)</string>
        <string>			V.uGlobal.uIssue(v.Local.iIssueCount)!Lot.Set(V.uGlobal.uComplete(v.Local.iCount)!MLot)</string>
        <string>			V.uGlobal.uIssue(v.Local.iIssueCount)!Bin.Set(V.uGlobal.uComplete(v.Local.iCount)!MBin)</string>
        <string>			V.uGlobal.uIssue(v.Local.iIssueCount)!Serial.Set(V.uGlobal.uComplete(v.Local.iCount)!MSerial)</string>
        <string>			V.uGlobal.uIssue(v.Local.iIssueCount)!Qty.Set(V.uGlobal.uComplete(v.Local.iCount)!MQty)</string>
        <string>	'		V.uGlobal.uIssue(v.Local.iIssueCount)!Issue.Set(V.uGlobal.uComplete(v.Local.iCount)!TIssue)</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iIssueCount,1,V.Local.iIssueCount)</string>
        <string />
        <string>		'ordinal was foudn so add the qty together</string>
        <string>		F.Intrinsic.Control.Else</string>
        <string>			F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!MQty,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Qty,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Qty)</string>
        <string>	'		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Issue,V.uGlobal.uIssue(v.Local.sOrdinal.Long)!Issue)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'loop through udt ISSUE to get all of the issue amounts on the issue jobs</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssue.LBound,V.uGlobal.uIssue.UBound,1)</string>
        <string>	'get the job and search the table for the area and then multiply by the quantity issued for the job suffix lot</string>
        <string>'	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>'		F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_TRUMPF_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA &lt;&gt; 0 ",V.uGlobal.uIssue(V.Local.iCount)!Material,V.uGlobal.uComplete!NestID,V.Local.sSQL)</string>
        <string>''	F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>'		F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_NCELL_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA &lt;&gt; 0 ",V.uGlobal.uIssue(V.Local.iCount)!Material,V.uGlobal.uComplete!NestID,V.Local.sSQL)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>'	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",v.Local.sSQL)</string>
        <string>'	F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)</string>
        <string>		'there is an area so multiply it by the amount issued qty</string>
        <string>'		F.Intrinsic.Math.Mult(V.uGlobal.uIssue(v.Local.iCount)!Qty,V.ODBC.Con!rst.FieldValFloat!MAREA,V.uGlobal.uIssue(v.Local.iCount)!Issue)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>'	F.ODBC.Con!rst.Close</string>
        <string />
        <string>'they dont want it in square inches, they want it in eaches</string>
        <string>'	V.uGlobal.uIssue(v.Local.iCount)!Issue.Set(V.uGlobal.uIssue(v.Local.iCount)!Qty)</string>
        <string>	F.Intrinsic.Math.Div(V.uGlobal.uIssue(v.Local.iCount)!Qty,V.uGlobal.uMaterial!Job,V.uGlobal.uIssue(v.Local.iCount)!Qty)</string>
        <string>	F.Intrinsic.Math.Round(V.uGlobal.uIssue(v.Local.iCount)!Qty,4,V.uGlobal.uIssue(v.Local.iCount)!Qty)</string>
        <string />
        <string>	'split job-suffix and save it to the udt</string>
        <string>''	F.Intrinsic.String.Split(V.uGlobal.uIssue(v.Local.iCount)!Job,"-",V.Local.sJob)</string>
        <string>'	V.Local.sJob.RedimPreserve(0,1)</string>
        <string>'	V.uGlobal.uIssue(v.Local.iCount)!Job.Set(V.Local.sJob(0).Trim)</string>
        <string>'	V.uGlobal.uIssue(v.Local.iCount)!Suffix.Set(V.Local.sJob(1).Trim)</string>
        <string />
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>V.Local.iIssueCount.Set(0)</string>
        <string>'loop through udt complete and get all of the drops for each lot bin combo</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssueDrop!Lot,V.uGlobal.uComplete(v.Local.iCount)!DLot,V.uGlobal.uIssueDrop!Bin,V.uGlobal.uComplete(v.Local.iCount)!DBin,V.uGlobal.uIssueDrop!Serial,V.uGlobal.uComplete(v.Local.iCount)!DSerial,V.uGlobal.uIssueDrop!Material,V.uGlobal.uComplete(v.Local.iCount)!DMaterial,V.uGlobal.uIssueDrop!Size,V.uGlobal.uComplete(v.Local.iCount)!DSize,V.Local.sOrdinal)</string>
        <string>	F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")</string>
        <string>		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!DMaterial,&lt;&gt;,"")</string>
        <string>			V.uGlobal.uIssueDrop.RedimPreserve(0,V.Local.iIssueCount)</string>
        <string>			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Material.Set(V.uGlobal.uComplete(v.Local.iCount)!DMaterial)</string>
        <string>			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Lot.Set(V.uGlobal.uComplete(v.Local.iCount)!DLot)</string>
        <string>			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Bin.Set(V.uGlobal.uComplete(v.Local.iCount)!DBin)</string>
        <string>			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Serial.Set(V.uGlobal.uComplete(v.Local.iCount)!DSerial)</string>
        <string>			V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Size.Set(V.uGlobal.uComplete(v.Local.iCount)!DSize)</string>
        <string>			F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize.UCase,"X",V.Local.fTemp)</string>
        <string>			V.Local.fTemp.RedimPreserve(0,1)</string>
        <string>			</string>
        <string>			F.Intrinsic.Math.Mult(V.Local.fTemp(0),V.Local.fTemp(1),V.Local.fTemp)</string>
        <string>			V.Local.fTemp.RedimPreserve(0,0)</string>
        <string>			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Material,V.uGlobal.uComplete!MArea,"&gt;::0",V.Local.sOrdinal2)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sOrdinal2,&lt;&gt;,"")</string>
        <string>				F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)</string>
        <string>				F.Intrinsic.Math.Div(V.Local.fTemp,V.uGlobal.uComplete(v.Local.sOrdinal2.Long)!MArea,V.Local.fTemp)</string>
        <string>				F.Intrinsic.Math.Round(V.Local.fTemp,4,V.Local.fTemp)</string>
        <string>				V.uGlobal.uIssueDrop(v.Local.iIssueCount)!Qty.Set(V.Local.fTemp)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iIssueCount,1,V.Local.iIssueCount)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize.UCase,"X",V.Local.fTemp)</string>
        <string>		V.Local.fTemp.RedimPreserve(0,1)</string>
        <string>		F.Intrinsic.Math.Mult(V.Local.fTemp(0),V.Local.fTemp(1),V.Local.fTemp)</string>
        <string>		V.Local.fTemp.RedimPreserve(0,0)</string>
        <string>		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueDrop(v.Local.sOrdinal2.Long)!Material,V.uGlobal.uComplete!MArea,"&gt;::0",V.Local.sOrdinal2)</string>
        <string>		F.Intrinsic.Control.If(V.Local.sOrdinal2,&lt;&gt;,"")</string>
        <string>			F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)</string>
        <string>			F.Intrinsic.Math.Div(V.Local.fTemp,V.uGlobal.uComplete(v.Local.sOrdinal2.Long)!MArea,V.Local.fTemp)</string>
        <string>			F.Intrinsic.Math.Round(V.Local.fTemp,4,V.Local.fTemp)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.Intrinsic.Math.Add(V.uGlobal.uIssueDrop(v.Local.sOrdinal.Long)!Qty,V.Local.fTemp,V.uGlobal.uIssueDrop(v.Local.sOrdinal.Long)!Qty)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>V.Local.iIssueCount.Set(0)</string>
        <string>'get jobs and issue amount</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!Job,&lt;&gt;,"")</string>
        <string>		'for each job, loop the amount of times there are material and set each job's lot bin combos and issue amount</string>
        <string>		F.Intrinsic.Control.For(V.Local.iCount2,V.uGlobal.uIssue.LBound,V.uGlobal.uIssue.UBound,1)</string>
        <string>			'search for the material for the job</string>
        <string>'			F.Intrinsic.String.Build("SELECT SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND PART = '{2}' ",V.uGlobal.uComplete(v.Local.iCount)!Job,V.uGlobal.uComplete(v.Local.iCount)!Suffix,V.uGlobal.uIssue(V.Local.iCount2)!Material,V.Local.sSQL)</string>
        <string>			F.Intrinsic.String.Build("SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND LMO = 'M' ORDER BY SEQ ASC ",V.uGlobal.uComplete(v.Local.iCount)!Job,V.uGlobal.uComplete(v.Local.iCount)!Suffix,V.Local.sSQL)</string>
        <string>			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstSeq",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.Con!rstSEQ.EOF,=,False)</string>
        <string>				V.uGlobal.uIssueJob.RedimPreserve(0,V.Local.iIssueCount)</string>
        <string>				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Job.Set(V.uGlobal.uComplete(v.Local.iCount)!Job)</string>
        <string>				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Suffix.Set(V.uGlobal.uComplete(v.Local.iCount)!Suffix)</string>
        <string>				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Seq.Set(V.ODBC.Con!rstSEQ.FieldValTrim!SEQ)</string>
        <string>				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Lot.Set(V.uGlobal.uIssue(v.Local.iCount2)!Lot)</string>
        <string>				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Bin.Set(V.uGlobal.uIssue(v.Local.iCount2)!Bin)</string>
        <string>				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Serial.Set(V.uGlobal.uIssue(v.Local.iCount2)!Serial)</string>
        <string>				V.uGlobal.uIssueJob(v.Local.iIssueCount)!Material.Set(V.uGlobal.uIssue(v.Local.iCount2)!Material)</string>
        <string>				'multiply the percent of sheet from uissue qty by the total issue amount for the job. Giving us the amount of material issued to the job from this lot bin</string>
        <string>				F.Intrinsic.Math.Mult(V.uGlobal.uIssue(v.Local.iCount2)!Qty,V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)</string>
        <string>				F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Material,V.uGlobal.uComplete!MArea,"&gt;::0",V.Local.sOrdinal2)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sOrdinal2,&lt;&gt;,"")</string>
        <string>					F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)</string>
        <string>					F.Intrinsic.Math.Div(V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt,V.uGlobal.uComplete(v.Local.sOrdinal2.Long)!MArea,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)</string>
        <string>					F.Intrinsic.Math.Round(V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt,4,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>				'see if this lot bin has a drop, if it does then add it to the issueamt</string>
        <string>				F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssueDrop!Lot,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Lot,V.uGlobal.uIssueDrop!Bin,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Bin,V.uGlobal.uIssueDrop!Serial,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Serial,V.uGlobal.uIssueDrop!Material,V.uGlobal.uIssueJob(v.Local.iIssueCount)!Material,V.Local.sOrdinal)</string>
        <string>				F.Intrinsic.Control.If(V.Local.sOrdinal,&lt;&gt;,"")</string>
        <string>					F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>					'loop through the ordinals and add them to the issueamt if they are not already part of a job</string>
        <string>					F.Intrinsic.Control.For(V.Local.iCount3,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)</string>
        <string>						'check to make sure it has not been issued already</string>
        <string>						F.Intrinsic.Control.If(V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Job,=,"")</string>
        <string>							'add the drop quantity to the issue amount</string>
        <string>'								F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt,V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Qty,V.uGlobal.uIssueJob(v.Local.iIssueCount)!IssueAmt)</string>
        <string>							'add job and suffix to drop</string>
        <string>							V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Job.Set(V.uGlobal.uIssueJob(v.Local.iIssueCount)!Job)</string>
        <string>							V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Suffix.Set(V.uGlobal.uIssueJob(v.Local.iIssueCount)!Suffix)</string>
        <string>							V.uGlobal.uIssueDrop(v.Local.sOrdinal(v.Local.iCount3))!Seq.Set(V.uGlobal.uIssueJob(v.Local.iIssueCount)!Seq)</string>
        <string>						F.Intrinsic.Control.EndIf</string>
        <string>					F.Intrinsic.Control.Next(V.Local.iCount3)</string>
        <string>				F.Intrinsic.Control.EndIf</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.ODBC.Con!rstSEQ.Close</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iIssueCount,1,V.Local.iIssueCount)</string>
        <string>		F.Intrinsic.Control.Next(V.Local.iCount2)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'loop through issueJob udt and issue material</string>
        <string>V.Local.sCheck.Set("")</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueJob.LBound,V.uGlobal.uIssueJob.UBound,1)</string>
        <string />
        <string>						'Check on hand to make sure we have enough on hand.</string>
        <string>						F.Intrinsic.String.Build("SELECT QUANTITY FROM V_ITEM_MASTER WHERE PART = '{0}' AND LOT = '{1}' AND BIN = '{2}' AND SERIAL_NUMBER = '{3}' ",V.uGlobal.uIssueJob(v.Local.iCount)!Material.PSQLFriendly,V.uGlobal.uIssueJob(v.Local.iCount)!Lot.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Serial.Trim,V.Local.sSQL)</string>
        <string>						F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstOnHand",V.Local.sSQL)</string>
        <string>						F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.EOF,=,False)</string>
        <string>							'Will use this later to make sure decimals are not left on drop quantities</string>
        <string>'							V.Local.iRemain.Set(V.ODBC.Con!rstOnHand.FieldValFloat!QUANTITY)</string>
        <string>							'check to see if we have more than we have sheets</string>
        <string>							F.Intrinsic.Control.If(V.ODBC.Con!rstOnHand.FieldValFloat!QUANTITY,&lt;,V.uGlobal.uIssueJob(V.Local.iCount)!IssueAmt)</string>
        <string>								'we don't have enough qty on hand to do this job</string>
        <string>								F.Intrinsic.UI.CloseWaitDialog</string>
        <string>								F.Intrinsic.String.Build("Qty Issue: {0} &gt; Qty Onhand: {1}",V.uGlobal.uIssueJob(V.Local.iCount)!IssueAmt,V.ODBC.Con!rstOnHand.FieldValFloat!QUANTITY,V.Local.sSql)</string>
        <string>								F.Intrinsic.UI.Msgbox(V.Local.sSQL,"Warning")</string>
        <string>								F.ODBC.Con!rstOnHand.Close</string>
        <string>								Gui.Ncell_Trumpf_Interface..Show</string>
        <string>								F.Intrinsic.Control.ExitSub</string>
        <string>							F.Intrinsic.Control.Else</string>
        <string>								F.ODBC.Con!rstOnHand.Close</string>
        <string>							F.Intrinsic.Control.EndIf</string>
        <string>						F.Intrinsic.Control.Else</string>
        <string>							F.ODBC.Con!rstOnHand.Close</string>
        <string>							'we don't have this part in inventory</string>
        <string>							F.Intrinsic.UI.CloseWaitDialog</string>
        <string>							F.Intrinsic.UI.Msgbox("No Part found in inventory","Warning")</string>
        <string>							Gui.Ncell_Trumpf_Interface..Show</string>
        <string>							F.Intrinsic.Control.ExitSub</string>
        <string>						F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>						V.Local.fArea.Set(0)</string>
        <string>						F.Intrinsic.String.IsInString(V.Local.sCheck,V.uGlobal.uIssueJob(v.Local.iCount)!Material,True,V.Local.bRet)</string>
        <string>						F.Intrinsic.Control.If(V.Local.bRet,=,False)</string>
        <string>							F.Intrinsic.String.Build("{0},{1}",V.Local.sCheck,V.uGlobal.uIssueJob(v.Local.iCount)!Material,V.Local.sCheck)</string>
        <string>							F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueJob(v.Local.iCount)!Material,V.uGlobal.uComplete!MArea,"&gt;::0",V.Local.sOrdinal2)</string>
        <string>							F.Intrinsic.Control.If(V.Local.sOrdinal2,&lt;&gt;,"")</string>
        <string>								F.Intrinsic.String.Split(V.Local.sOrdinal2,"*!*",V.Local.sOrdinal2)</string>
        <string>								F.Intrinsic.Control.For(V.Local.iFor,V.Local.sOrdinal2.LBound,V.Local.sOrdinal2.UBound,1)</string>
        <string>									'We need to add all of the issue amounts together</string>
        <string>									F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uIssueJob!Material,V.uGlobal.uIssueJob(v.Local.iCount)!Material,V.Local.sOrdinal)</string>
        <string>									F.Intrinsic.Control.If(V.Local.sOrdinal,&lt;&gt;,"")</string>
        <string>										F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>										F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)</string>
        <string>											F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.sOrdinal(v.Local.iCount2))!IssueAmt,V.Local.fArea,V.Local.fArea)</string>
        <string>										F.Intrinsic.Control.Next(V.Local.iCount2)</string>
        <string>									F.Intrinsic.Control.EndIf</string>
        <string>									'We have the total issue amount so lets change it to be the full sheet amount</string>
        <string>									F.Intrinsic.Control.If(V.uGlobal.uIssueJob(v.Local.iCount)!Serial,&lt;&gt;,"")</string>
        <string>										F.Intrinsic.String.Split(V.uGlobal.uIssueJob(v.Local.iCount)!Serial.UCase,"X",V.Local.sPadSerial)</string>
        <string>										F.Intrinsic.Control.If(V.Local.sPadSerial.UBound,&lt;&gt;,0)</string>
        <string>											V.Local.sPadSerial.RedimPreserve(0,1)</string>
        <string>											F.Intrinsic.Math.Mult(V.Local.sPadSerial(0).Float,V.Local.sPadSerial(1).Float,V.Local.fComplete)</string>
        <string>											F.Intrinsic.Math.Div(V.Local.fComplete,V.uGlobal.uComplete(v.Local.sOrdinal2(v.Local.iFor))!MArea,V.Local.fComplete)</string>
        <string>											F.Intrinsic.Math.Sub(V.Local.fComplete,V.Local.fArea,V.Local.fPercent)</string>
        <string>											F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,V.Local.fPercent,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)</string>
        <string>										F.Intrinsic.Control.Else</string>
        <string>											F.Intrinsic.Math.Ceiling(V.Local.fArea,V.Local.fPercent)</string>
        <string>											F.Intrinsic.Math.Sub(V.Local.fPercent,V.Local.fArea,V.Local.fPercent)</string>
        <string>											F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,V.Local.fPercent,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)</string>
        <string>										F.Intrinsic.Control.EndIf</string>
        <string>									F.Intrinsic.Control.Else</string>
        <string>										F.Intrinsic.Math.Ceiling(V.Local.fArea,V.Local.fPercent)</string>
        <string>										F.Intrinsic.Math.Sub(V.Local.fPercent,V.Local.fArea,V.Local.fPercent)</string>
        <string>										F.Intrinsic.Math.Add(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,V.Local.fPercent,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)</string>
        <string>									F.Intrinsic.Control.EndIf</string>
        <string>								F.Intrinsic.Control.Next(V.Local.iFor)</string>
        <string>							F.Intrinsic.Control.EndIf</string>
        <string>						F.Intrinsic.Control.EndIf</string>
        <string>						F.Intrinsic.Math.Round(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,4,V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt)</string>
        <string>						</string>
        <string>					F.Intrinsic.Math.Mult(V.uGlobal.uIssueJob(v.Local.iCount)!IssueAmt,10000,V.Local.sIssue)</string>
        <string>			V.Local.sHold.Set("")</string>
        <string>			F.Intrinsic.String.Build("{0}{1},,,{2},{7},{8},,{9},{3},{4},{5}{6}",V.Local.sHold,V.uGlobal.uIssueJob(v.Local.iCount)!Material.Trim,V.Local.sIssue,V.uGlobal.uIssueJob(v.Local.iCount)!Job.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Seq,"",V.uGlobal.uIssueJob(v.Local.iCount)!Lot.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueJob(v.Local.iCount)!Serial.Trim,V.Local.sHold)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sHold.Left1,&lt;&gt;,",")</string>
        <string>				F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sLine,V.Local.sHold,V.Ambient.NewLine,V.Local.sLine)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>'		F.ODBC.Con!rst.Close</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>V.uGlobal.uIssueDrop.RedimPreserve(0,V.uGlobal.uIssueDrop.UBound)</string>
        <string />
        <string>'loop through drop udt and reverse the issue amount</string>
        <string>F.Intrinsic.Control.If(V.uGlobal.uIssueDrop,&lt;&gt;,-1)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueDrop.LBound,V.uGlobal.uIssueDrop.UBound,1)</string>
        <string>		F.Intrinsic.Control.If(V.uGlobal.uIssueDrop(v.Local.iCount)!Material,&lt;&gt;,"")</string>
        <string>	'	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!DMaterial,&lt;&gt;,"")</string>
        <string>			'split job-suffix and save it to the udt</string>
        <string>	'		F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DJob,"-",V.Local.sJob)</string>
        <string>	'		V.Local.sJob.RedimPreserve(0,1)</string>
        <string>	'		V.Local.sJob.Set(V.Local.sJob(0).Trim)</string>
        <string>	'		V.Local.sSuffix.Set(V.Local.sJob(1).Trim)</string>
        <string />
        <string>			'set the first job and suffix</string>
        <string>	'		V.Local.sJob.Set(V.uGlobal.uComplete!Job)</string>
        <string>	'		V.Local.sSuffix.Set(V.uGlobal.uComplete!Suffix)</string>
        <string />
        <string>	'		F.Intrinsic.String.Build("SELECT SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND PART = '{2}' ",V.Local.sJob.Trim,V.Local.sSuffix.Trim,V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Trim,V.Local.sSQL)</string>
        <string>	'		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstSEQ",V.Local.sSQL)</string>
        <string>	'		F.Intrinsic.Control.If(V.ODBC.Con!rstSEQ.EOF,=,False)</string>
        <string>				'sets the sequence for the material that is being issued.</string>
        <string>	'			V.Local.sSeq.Set(V.ODBC.Con!rstSEQ.FieldVal!SEQ)</string>
        <string />
        <string>	'			F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>	'				F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_TRUMPF_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA &lt;&gt; 0 ",V.uGlobal.uComplete(V.Local.iCount)!DMaterial.Trim,V.uGlobal.uComplete(v.Local.iCount)!NestID.Trim,V.Local.sSQL)</string>
        <string>	'			F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>	'				F.Intrinsic.String.Build("SELECT MAREA FROM GCG_3744_NCELL_SCRN WHERE MMATERIAL = '{0}' AND NESTID = '{1}' AND MAREA &lt;&gt; 0 ",V.uGlobal.uComplete(V.Local.iCount)!DMaterial.Trim,V.uGlobal.uComplete(v.Local.iCount)!NestID.Trim,V.Local.sSQL)</string>
        <string>	'			F.Intrinsic.Control.EndIf</string>
        <string>	'			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstAREA",V.Local.sSQL)</string>
        <string>	'			F.Intrinsic.Control.If(V.ODBC.Con!rstAREA.EOF,=,False)</string>
        <string />
        <string>					'set the issue amount and multiply by 10,000 for decimal reasons</string>
        <string>	''				F.Intrinsic.String.Split(V.uGlobal.uComplete(v.Local.iCount)!DSize,"x",V.Local.fArea)</string>
        <string>	'				V.Local.fArea.RedimPreserve(0,1)</string>
        <string>	'				F.Intrinsic.Math.Mult(V.Local.fArea(0),V.Local.fArea(1),V.Local.fArea)</string>
        <string>	'				V.Local.fArea.RedimPreserve(0,0)</string>
        <string>					'divide area by total area</string>
        <string>	'				F.Intrinsic.Math.Div(V.Local.fArea,V.ODBC.Con!rstAREA.FieldValFloat!MAREA,V.Local.fArea)</string>
        <string>	'				F.Intrinsic.String.Format(V.Local.fArea,"#.000",V.Local.fArea)</string>
        <string>	'				F.Intrinsic.Math.Mult(V.Local.fArea,10000,V.Local.sIssue)</string>
        <string />
        <string>					'set -D to the end of the lot for the drop</string>
        <string>					'if lot is less than 14 characters then add -D	</string>
        <string />
        <string />
        <string>					F.Intrinsic.Control.If(V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Length,&lt;,14)</string>
        <string>						F.Intrinsic.String.Build("{0}-D",V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Trim,V.Local.sLot)</string>
        <string>					F.Intrinsic.Control.Else</string>
        <string>						V.Local.sLot.Set(V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Trim)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string>					'get the link id for the from lot bin</string>
        <string>					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Material," ",20,V.Local.sPadPart)</string>
        <string>					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Lot," ",15,V.Local.sPadLot)</string>
        <string>					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Bin," ",6,V.Local.sPadBin)</string>
        <string>					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Serial," ",30,V.Local.sPadSerial)</string>
        <string>					F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}",V.Local.sPadPart,"  ",V.Local.sPadLot,V.Local.sPadBin,"               ",V.Local.sPadSerial,V.Local.sKey1)</string>
        <string>				F.Global.DocumentControl.GetLinkID(V.Local.sKey1,31,V.Local.iRetID)</string>
        <string>					F.Intrinsic.Control.If(V.Local.iRetID,&lt;&gt;,-1)</string>
        <string>						F.Intrinsic.String.RPad(V.Local.sLot," ",15,V.Local.sLot)</string>
        <string>						F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Size," ",30,V.uGlobal.uIssueDrop(v.Local.iCount)!Size)</string>
        <string>'						F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}",V.uGlobal.uIssueDrop(v.Local.iCount)!Material,"  ",V.Local.sLot,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin,"               ","                              ",V.Local.sKey1)</string>
        <string>						F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}",V.Local.sPadPart,"  ",V.Local.sLot,V.Local.sPadBin,"               ",V.uGlobal.uIssueDrop(v.Local.iCount)!Size,V.Local.sKey2)</string>
        <string>						F.Global.DocumentControl.CreateReference(V.Local.skey2,31,V.Local.iTemp)</string>
        <string>						F.Intrinsic.Control.If(V.Local.iTemp,&lt;&gt;,-1)</string>
        <string>							F.Global.DocumentControl.Copy(V.Local.iRetID,V.Local.iTemp,V.Local.bRet)</string>
        <string>						F.Intrinsic.Control.EndIf</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string />
        <string>					'mult the issue amount by 10,000</string>
        <string>	'				V.Local.sOrdinal.Redim(0,0)</string>
        <string>	'				F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uComplete!MMaterial,V.uGlobal.uIssueDrop(v.Local.iCount)!Material,V.Local.sOrdinal)</string>
        <string>	'				F.Intrinsic.Control.If(V.Local.sOrdinal,&lt;&gt;,"")</string>
        <string>	'					F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>	'					F.Intrinsic.Control.DoUntil(V.Local.iCount3,&gt;,V.Local.sOrdinal.UBound,"OR",V.Local.iCount3,=,-1)</string>
        <string>	'						F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.sOrdinal(v.Local.iCount3).Long)!MArea,&lt;&gt;,0)</string>
        <string>	'							F.Intrinsic.Math.Div(V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,V.uGlobal.uComplete(v.Local.sOrdinal(v.Local.iCount3).Long)!MArea,V.uGlobal.uIssueDrop(v.Local.iCount)!Qty)</string>
        <string>								F.Intrinsic.Math.Round(V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,4,V.uGlobal.uIssueDrop(v.Local.iCount)!Qty)</string>
        <string />
        <string>'								F.Intrinsic.Math.Mult(V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,10000,V.Local.sIssue)</string>
        <string>	'							V.Local.iCount3.Set(-1)</string>
        <string>	'						F.Intrinsic.Control.Else</string>
        <string>	'							F.Intrinsic.Math.Add(V.Local.iCount3,1,V.Local.iCount3)</string>
        <string>	'						F.Intrinsic.Control.EndIf</string>
        <string>	'					F.Intrinsic.Control.Loop</string>
        <string>	'				F.Intrinsic.Control.EndIf</string>
        <string />
        <string>					'get the default BIN for the part</string>
        <string>	'				F.Intrinsic.String.Build("SELECT BIN FROM V_INVENTORY_MSTR WHERE PART = '{0}' ",V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Trim,V.Local.sSQL)</string>
        <string>	'				F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstBIN",V.Local.sSQL)</string>
        <string>	'				F.Intrinsic.Control.If(V.ODBC.Con!rstBIN.EOF,=,False)</string>
        <string>	'					V.Local.sBin.Set(V.ODBC.Con!rstBIN.FieldValTrim!BIN)</string>
        <string>	'				F.Intrinsic.Control.Else</string>
        <string>	'					V.Local.sBin.Set("")</string>
        <string>	'				F.Intrinsic.Control.EndIf</string>
        <string>	'				F.ODBC.Con!rstBIN.Close</string>
        <string>	'				V.Local.sBin.Set(V.uGlobal.uIssue(v.Local.iCount)!Bin.Trim)</string>
        <string />
        <string>					'Part, Rev, Loc, Qty, Lot, Bin, Heat, Serial, Job, Suffix, Seq</string>
        <string>'					F.Intrinsic.String.Build("{0}{1},,,{2}-,{7},{8},,{9},{3},{4},{5}{6}",V.Local.sLine,V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Trim,V.Local.sIssue,V.uGlobal.uIssueDrop(v.Local.iCount)!Job.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Seq.Trim,V.Ambient.NewLine,V.Local.sLot.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim,V.Local.sLine)</string>
        <string>'					V.Local.sHold.Set("")</string>
        <string>'					F.Intrinsic.String.Build("{0}{1},,,{2}-,{7},{8},,{9},{3},{4},{5}{6}","",V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Trim,V.Local.sIssue,V.uGlobal.uIssueDrop(v.Local.iCount)!Job.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Seq.Trim,"",V.Local.sLot.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim,V.Local.sHold)</string>
        <string>'					F.Intrinsic.Control.If(V.Local.sHold.Left1,&lt;&gt;,",")</string>
        <string>'						F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sLine,V.Local.sHold,V.Ambient.NewLine,V.Local.sLine)</string>
        <string>'					F.Intrinsic.Control.EndIf</string>
        <string />
        <string>					'changed by silas, last update 2/2/2017</string>
        <string>					'issue recepts instead</string>
        <string>					F.Intrinsic.String.RPad(V.uGlobal.uIssueDrop(v.Local.iCount)!Material," ",20,V.uGlobal.uIssueDrop(v.Local.iCount)!Material)</string>
        <string>					V.Local.sPart.Set(V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Left17)</string>
        <string>					V.Local.sRev.Set(V.uGlobal.uIssueDrop(v.Local.iCount)!Material.Right3)</string>
        <string>					' Part, Rev, Loc, Qty, Description, Lot,Bin, Hea, Serial, I/R, Drop</string>
        <string>					F.Intrinsic.String.Build("{0},{1},{2},{3},,{4},{5},,{6},{7},{8},,,,",V.Local.sPart.Trim,V.Local.sRev.Trim,"",V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,V.uGlobal.uIssueDrop(v.Local.iCount)!Lot.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim,V.uGlobal.uIssueDrop(v.Local.iCount)!Serial.Trim,"I","N",V.Local.sReceptLine)</string>
        <string>					F.Intrinsic.Control.If(V.Local.sRecept,&lt;&gt;,"")</string>
        <string>						F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sRecept,V.Ambient.NewLine,V.Local.sReceptLine,V.Local.sRecept)</string>
        <string>					F.Intrinsic.Control.Else</string>
        <string>						V.Local.sRecept.Set(V.Local.sReceptLine)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string>					'prompt for destination bin</string>
        <string>					F.Intrinsic.Control.CallSub(Dop_to_bin,"sPart",V.Local.sPart.Trim,"sSer",V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim)</string>
        <string>					F.Intrinsic.Control.If(V.Global.sDropBin.Trim,&lt;&gt;,V.uGlobal.uIssueDrop(v.Local.iCount)!Bin.Trim)</string>
        <string>					F.Intrinsic.Control.AndIf(V.Global.sDropBin.Trim,&lt;&gt;,"")</string>
        <string>						V.Local.sToBin.Set(V.Global.sDropBin.Trim)</string>
        <string>						V.uGlobal.uIssueDrop(V.Local.iCount)!Bin.Set(V.Local.sToBin)</string>
        <string>					F.Intrinsic.Control.EndIf</string>
        <string>					F.Intrinsic.String.Build("{0},{1},{2},{3},,{4},{5},,{6},{7},{8},,,,",V.Local.sPart.Trim,V.Local.sRev.Trim,"",V.uGlobal.uIssueDrop(v.Local.iCount)!Qty,V.Local.sLot.Trim,V.local.sToBin,V.uGlobal.uIssueDrop(v.Local.iCount)!Size.Trim,"R","N",V.Local.sReceptLine)</string>
        <string>					F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sRecept,V.Ambient.NewLine,V.Local.sReceptLine,V.Local.sRecept)</string>
        <string>					</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string>	'			F.ODBC.Con!rstAREA.Close</string>
        <string>	'		F.Intrinsic.Control.EndIf</string>
        <string>	'		F.ODBC.Con!rstSEQ.Close</string>
        <string>	'	F.Intrinsic.Control.EndIf</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Issuing Material and Drops",60)</string>
        <string>F.Intrinsic.Control.If(V.Local.sLine.Trim,&lt;&gt;,"")</string>
        <string>	F.Intrinsic.String.Build("{0}\L{1}{2}MOPEN.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)</string>
        <string>	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sLine.Trim)</string>
        <string>	F.Intrinsic.String.StripCharacters(V.Ambient.Now,V.Local.sNow)</string>
        <string>	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>		F.Intrinsic.String.Build("{0}\MATERIAL-{1}{2}{3}.Bkp",V.Global.sTBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		F.Intrinsic.String.Build("{0}\MATERIAL-{1}{2}{3}.Bkp",V.Global.sNBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.File.String2File(V.Local.sBackup,V.Local.sLine.Trim)</string>
        <string>	F.Intrinsic.String.Build("{0}L{1}{2}MOPEN.txt{0}",V.Ambient.DblQuote,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)</string>
        <string>	F.Intrinsic.Task.LaunchGSSSync("WIR100","-C",V.Local.sFile)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Local.sRecept.Trim,&lt;&gt;,"")</string>
        <string>	F.Intrinsic.String.Build("{0}\{1}StandIss.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Local.sFile)</string>
        <string>	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sRecept)</string>
        <string />
        <string>	F.Intrinsic.String.Build("{0}StandIss.txt",V.Caller.CompanyCode,V.Local.sFile)</string>
        <string>	F.Intrinsic.Task.LaunchGSSSync("WIR104","-C",V.Local.sFile)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Global.BI.GetIDFromName("IV_3744_BintoBinlbl.rpt",V.Local.iRptID)</string>
        <string>F.Global.BI.GetRunID(V.Local.iBIRunID)</string>
        <string>F.Global.BI.StartLogging(V.Local.iBIRunID,V.Local.iRptID,0,"",V.Local.iLogID)</string>
        <string>F.Intrinsic.Variable.UDTMultiFlag(V.uGlobal.uIssueDrop!Material,"")</string>
        <string>F.Intrinsic.Variable.UDTDeleteFlagged(V.uGlobal.uIssueDrop)</string>
        <string>F.Intrinsic.Control.If(V.uGlobal.uIssueDrop.UBound,&lt;&gt;,-1)</string>
        <string>	F.ODBC.Connection!Con.OpenLocalRecordsetRW("rstBTB","GCG_3744_IV_BTB_XFER")</string>
        <string>	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!User_ID,V.Caller.User)</string>
        <string>	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!Lbl_Create_Date,V.Ambient.Date)</string>
        <string>	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!Birunid,V.Local.iBirunID)</string>
        <string>	F.Intrinsic.Variable.UDTSetMemberValue(V.uGlobal.uIssueDrop!Inv_UM,"EA")</string>
        <string>	F.Intrinsic.Variable.SaveUDTToRecordSet("con","rstBTB","V.uGlobal.uIssueDrop")</string>
        <string>	F.ODBC.Con!rstBTB.Close</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.Global.BI.StopLogging(V.Local.iLogId)	</string>
        <string>F.Global.BI.RunReportPreProcessor(V.Local.iBIRunID,V.Local.iLogID,"","","",-1,True,"",-1,"",-1,"","",V.Local.iRet)</string>
        <string />
        <string>'F.Intrinsic.Debug.InvokeDebugger</string>
        <string>'F.Intrinsic.Debug.Stop</string>
        <string />
        <string>'Make sure that Lot/Bin Issued from is consumed</string>
        <string>'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueJob.LBound,V.uGlobal.uIssueJob.UBound,1)</string>
        <string>'	f.Intrinsic.Control.If(v.uGlobal.uIssueJob(v.Local.iCount,=,</string>
        <string>'F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'lets loop through issue job and see if we have anything issued. if we do then close the sequence</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uIssueJob.LBound,V.uGlobal.uIssueJob.UBound,1)</string>
        <string>	F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET FLAG_CLOSED = 'Y' WHERE LMO = 'M' AND JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uIssueJob(V.Local.iCount)!Job.Trim,V.uGlobal.uIssueJob(V.Local.iCount)!Suffix.Trim,V.uGlobal.uIssueJob(V.Local.iCount)!Seq.Trim,V.Local.sSQL)</string>
        <string>	F.ODBC.Connection!Con.Execute(V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>V.Local.sLine.Set("")</string>
        <string />
        <string />
        <string>'job operation upload</string>
        <string>F.Intrinsic.String.Format(V.Ambient.Date,"YYDDMM",V.Local.sUpdateDate)</string>
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Writing Labor File",60)</string>
        <string>F.Intrinsic.Control.If(V.uGlobal.uComplete.UBound,&lt;&gt;,0)</string>
        <string>	F.Intrinsic.Math.Div(25,V.uGlobal.uComplete.UBound,V.Local.fPercentAmt)</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>	V.Local.fPercentAmt.Set(25)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>V.Local.fPercent.Set(60)</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>	F.Intrinsic.Math.Add(V.Local.fPercent,V.Local.fPercentAmt,V.Local.fPercent)</string>
        <string>	F.Intrinsic.UI.ChangeWaitStatus("Writing Labor File",V.Local.fPercent)</string>
        <string>	'make sure to only do ones with info populated</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TWorkOrder,&lt;&gt;,"")</string>
        <string>		'closes the material sequence explicitly.</string>
        <string>'		F.Intrinsic.String.Build("SELECT * FROM JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)</string>
        <string>'		F.ODBC.Connection!Con.OpenLocalRecordsetRW("rstJobOps",V.Local.sSQL)</string>
        <string>'		F.Intrinsic.Control.If(V.ODBC.Con!rstJobOps.EOF,=,False)</string>
        <string>'			'updates the completed date and closes the sequence</string>
        <string>'			F.ODBC.Con!rstJobOps.Set!DATE_COMPLETED(V.Local.sUpdateDate)</string>
        <string>'			F.ODBC.Con!rstJobOps.Set!FLAG_CLOSED("Y")</string>
        <string>'			F.ODBC.Con!rstJobOps.Update</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>'		F.ODBC.Con!rstJobOps.Close</string>
        <string />
        <string>		'deletes the commitment</string>
        <string>'		F.Intrinsic.String.Build("DELETE FROM JOB_COMMITMENTS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job,V.uGlobal.uComplete(V.Local.iCount)!Suffix,V.uGlobal.uComplete(V.Local.iCount)!Seq,V.Local.sSQL)</string>
        <string>'		F.ODBC.Connection!Con.Execute(V.Local.sSQL)</string>
        <string />
        <string />
        <string>		'get work center from sequence</string>
        <string>		F.Intrinsic.String.Build("SELECT PART FROM JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)</string>
        <string>			V.Local.sWC.Set(V.ODBC.Con!rst.FieldValTrim!PART)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.ODBC.Con!rst.Close</string>
        <string />
        <string>		'write labor detail line using JB0455</string>
        <string>		F.Intrinsic.String.Format(V.Ambient.Date,"MMDDYY",V.Local.sUpdateDate)</string>
        <string />
        <string>		F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>			F.Intrinsic.Date.ConvertTString("0100","HH:NN",V.Local.dTimeIn)</string>
        <string />
        <string>			'time will be in seconds</string>
        <string>			F.Intrinsic.Math.Mult(V.uGlobal.uComplete(V.Local.iCount)!TTime,60,V.Local.fTime)</string>
        <string>'			F.Intrinsic.Math.Mult(V.Local.fTime,60,V.Local.fTime)</string>
        <string>			F.Intrinsic.Date.DateAdd("N",V.Local.fTime,V.Local.dTimeIn,V.Local.dTimeOut)</string>
        <string>			F.Intrinsic.String.Format(V.Local.dTimeOut,"HHNN",V.Local.sTimeOut)</string>
        <string>			'if time is still 0100 then change it to 0101 so it has a default minute</string>
        <string>			F.Intrinsic.Control.If(V.Local.sTimeOut,=,"0100")</string>
        <string>				V.Local.sTimeOut.Set("0101")</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			V.Local.sTimeIn.Set("0100")</string>
        <string>		F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>			F.Intrinsic.String.Build("SELECT START_TIME, END_TIME FROM GCG_3744_NCELL_SCRN WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.Local.sSQL)</string>
        <string>			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)</string>
        <string>				V.Local.sTimeIn.Set(V.ODBC.Con!rst.FieldValTrim!START_TIME)</string>
        <string>		V.Local.sTimeOut.Set(V.ODBC.Con!rst.FieldValTrim!END_TIME)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.ODBC.Con!rst.Close</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string />
        <string>		'Multiply qty by 10,000 to upload</string>
        <string>		F.Intrinsic.Math.Mult(V.uGlobal.uComplete(v.Local.iCount)!TQty,10000,V.Local.fQty)</string>
        <string>		V.Local.sQty.Set(V.Local.fQty)</string>
        <string />
        <string>		'checks to see if quantity is complete so that we can set close flag.</string>
        <string>		F.Intrinsic.String.Build("SELECT UNITS_OPEN, UNITS_COMPLETE FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)</string>
        <string>		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)</string>
        <string>		V.Local.sRet.RedimPreserve(0,1)</string>
        <string>'		F.Intrinsic.Math.Add(V.Local.sRet(1).Float,V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.sRet(1))</string>
        <string>'		F.Intrinsic.Control.If(V.Local.sRet(1).Float,&gt;=,V.Local.sRet(0).Float)</string>
        <string>		F.Intrinsic.Math.Sub(V.Local.sRet(0).Float,V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.sRet(0))</string>
        <string>		F.Intrinsic.Control.If(V.Local.sRet(0).Float,&lt;=,0)</string>
        <string>			V.Local.sClose.Set("Y")</string>
        <string>		F.Intrinsic.Control.Else</string>
        <string>			V.Local.sClose.Set("")</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		</string>
        <string>		'create line for upload</string>
        <string>		'date, employee, job, suffix, seq, workcenter, hours, closed, indirect, start time, finish time, rate type, good pieces, scrap, scrap code</string>
        <string>		F.Intrinsic.String.Build("{1}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}{0}{8}{0}{9}{0}{10}{0}{11}{0}{12}{0}{13}{0}{14}{0}{15}{0}{16}{0}{17}",V.Ambient.Tab,V.Local.sLine,V.Local.sUpdateDate.Trim,V.uGlobal.uComplete(v.Local.iCount)!TEmployee.Trim,V.uGlobal.uComplete(v.Local.iCount)!Job.Trim,V.uGlobal.uComplete(v.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(v.Local.iCount)!Seq.Trim,V.Local.sWC.Trim,"0",V.Local.sClose,"D",V.Local.sTimeIn,V.Local.sTimeOut,"R",V.Local.fQty,"0","0",V.Ambient.NewLine,V.Local.sLine)</string>
        <string>'		V.Local.sHold.Set("")</string>
        <string>'		F.Intrinsic.String.Build("{1}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}{0}{8}{0}{9}{0}{10}{0}{11}{0}{12}{0}{13}{0}{14}{0}{15}{0}{16}{0}{17}",V.Ambient.Tab,V.Local.sHold,V.Local.sUpdateDate.Trim,V.uGlobal.uComplete(v.Local.iCount)!TEmployee.Trim,V.uGlobal.uComplete(v.Local.iCount)!Job.Trim,V.uGlobal.uComplete(v.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(v.Local.iCount)!Seq.Trim,V.Local.sWC.Trim,"0",V.Local.sClose,"D",V.Local.sTimeIn,V.Local.sTimeOut,"R",V.Local.fQty,"0","0","",V.Local.sHold)</string>
        <string>'		F.Intrinsic.Control.If(V.Local.sHold.Left1,&lt;&gt;,",")</string>
        <string>'			F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sLine,V.Local.sHold,V.Ambient.NewLine,V.Local.sLine)</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>		'update our table to close and add time in and out</string>
        <string>		F.Intrinsic.String.Build("SELECT START_TIME, END_TIME, POST_DATE, POST_TIME FROM GCG_3744_TRUMPF_SCRN WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' AND NESTID = '{3}' ",V.uGlobal.uComplete(V.Local.iCount)!Job.Trim,V.uGlobal.uComplete(V.Local.iCount)!Suffix.Trim,V.uGlobal.uComplete(V.Local.iCount)!Seq.Trim,V.uGlobal.uComplete(V.Local.iCount)!NestID.Trim,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.OpenLocalRecordsetRW("Update",V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.Con!Update.EOF,=,False)</string>
        <string>			F.ODBC.Con!Update.Set!START_TIME(V.Local.sTimeIn)</string>
        <string>			F.ODBC.Con!Update.Set!END_TIME(V.Local.sTimeOut)</string>
        <string>			F.ODBC.Con!Update.Set!POST_DATE(V.Local.sUpdateDate)</string>
        <string>			F.ODBC.Con!Update.Set!POST_TIME(V.Local.sNow)</string>
        <string>			F.ODBC.Con!Update.Update</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.ODBC.Con!Update.Close</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Updating Labor",90)</string>
        <string>'Load labor details</string>
        <string>F.Intrinsic.Control.If(V.Local.sLine.Trim,&lt;&gt;,"")</string>
        <string>	F.Intrinsic.String.Build("{0}\{1}{2}MOPEN.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)</string>
        <string>	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sLine)</string>
        <string>	F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>		F.Intrinsic.String.Build("{0}\LABOR-{1}{2}{3}.Bkp",V.Global.sTBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		F.Intrinsic.String.Build("{0}\LABOR-{1}{2}{3}.Bkp",V.Global.sNBackup,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sNow,V.Local.sBackup)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.File.String2File(V.Local.sBackup,V.Local.sLine)</string>
        <string>	F.Intrinsic.String.Build("{0}{1}{2}MOPEN.txt{0}",V.Ambient.DblQuote,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)</string>
        <string>	F.Intrinsic.Task.LaunchGSSSync("JB0455","-C",V.Local.sFile)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string />
        <string />
        <string>'update all closed flags to closed</string>
        <string>F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>	F.Intrinsic.String.Build("UPDATE GCG_3744_TRUMPF_SCRN SET CLOSED = 'Y' WHERE NESTID = '{0}' ",V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>	F.Intrinsic.String.Build("UPDATE GCG_3744_NCELL_SCRN SET CLOSED = 'Y' WHERE NESTID = '{0}' ",V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.ODBC.Connection!Con.Execute(V.Local.sSQL)</string>
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Creating Flex Schedule",90)</string>
        <string>F.Intrinsic.Control.CallSub(Flexschedule)</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Printing Flex Schedule",100)</string>
        <string>F.Intrinsic.UI.CloseWaitDialog</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Post_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.Post.End</string>
        <string />
        <string>Program.Sub.ReadNcell.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("ReadNcell_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sRow.Declare(String)</string>
        <string>V.Local.sLine.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.sNestID.Declare(String)</string>
        <string>V.Local.sTotalSheets.Declare(String)</string>
        <string>V.Local.iTimeCount.Declare(Long)</string>
        <string>V.Local.iMaterialCount.Declare(Long)</string>
        <string>V.Local.iDropCount.Declare(Long)</string>
        <string>V.Local.sLot.Declare(String)</string>
        <string>V.Local.sLotSplit.Declare(String)</string>
        <string>V.Local.iLotCount.Declare(Long)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.sJob.Declare(String)</string>
        <string>V.local.iPLot.Declare(Long)</string>
        <string>V.Local.iDLot.Declare(Long)</string>
        <string>V.Local.sPLot.Declare(String)</string>
        <string>V.local.sDLot.Declare(String)</string>
        <string>V.Local.sStartTime.Declare(String)</string>
        <string>V.Local.sEndTime.Declare(String)</string>
        <string>V.Local.dStartTime.Declare(Date)</string>
        <string>V.Local.dEndTime.Declare(Date)</string>
        <string>V.Local.fHours.Declare(Float)</string>
        <string>V.Local.sSize.Declare(String)</string>
        <string>V.Local.iCompleteCount.Declare(Long)</string>
        <string>V.Local.fLength.Declare(Float)</string>
        <string>V.Local.fWidth.Declare(Float)</string>
        <string>V.Local.fQty.Declare(Float)</string>
        <string>V.Local.fTotalArea.Declare(Float)</string>
        <string>V.Local.sSheetAlloc.Declare(String)</string>
        <string>V.Local.fIssue.Declare(Float)</string>
        <string>V.Local.fArea.Declare(Float)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string>V.Local.sMatSplit.Declare(String)</string>
        <string />
        <string />
        <string>'reset udts for ncell</string>
        <string>V.uGlobal.uTime.Redim(-1,-1)</string>
        <string>V.uGlobal.uMaterial.Redim(-1,-1)</string>
        <string>V.uGlobal.uDrop.Redim(-1,-1)</string>
        <string>V.uGlobal.uTime.Redim(0,0)</string>
        <string>V.uGlobal.uMaterial.Redim(0,0)</string>
        <string>V.uGlobal.uDrop.Redim(0,0)</string>
        <string />
        <string />
        <string />
        <string>'read csv to string to split</string>
        <string>F.Intrinsic.File.File2String(V.Args.ERPFILE,V.Local.sRow)</string>
        <string>'split for each line</string>
        <string>F.Intrinsic.String.Split(V.Local.sRow,V.Ambient.NewLine,V.Local.sRow)</string>
        <string />
        <string>'loop though all rows</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.Local.sRow.LBound,V.Local.sRow.UBound,1)</string>
        <string>	F.Intrinsic.String.SplitCSV(V.Local.sRow(v.Local.iCount),V.Local.sLine)</string>
        <string>	V.Local.sLine.RedimPreserve(0,14)</string>
        <string>	</string>
        <string>	'select statement</string>
        <string>	F.Intrinsic.Control.SelectCase(V.Local.sLine(0))</string>
        <string />
        <string>		'Case N</string>
        <string>		'N, NestID, TotalSheets</string>
        <string>		F.Intrinsic.Control.Case("N")</string>
        <string>			</string>
        <string>			'check to see if this is the first run or not</string>
        <string>			F.Intrinsic.Control.If(V.Local.sNestID,=,"")</string>
        <string>				V.Local.sNestID.Set(V.Local.sLine(1))</string>
        <string>			F.Intrinsic.Control.Else</string>
        <string>				F.Intrinsic.Control.CallSub(Ncellcombine,"TotalArea",V.Local.fTotalArea,"Area",V.Local.fArea,"Qty",V.Local.fQty)</string>
        <string>				V.Local.sNestID.Set(V.Local.sLine(1))</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>	</string>
        <string>			'set qty and make sure its not 0</string>
        <string>			F.Intrinsic.Control.If(V.Local.sLine(2).Long,&gt;,0)</string>
        <string>				V.Local.fQty.Set(V.Local.sLine(2).Float)</string>
        <string>			F.Intrinsic.Control.Else</string>
        <string>				V.Local.fQty.Set(1.00)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>			'reset reused variables for next nestid</string>
        <string>			V.Local.iMaterialCount.Set(0)</string>
        <string>			V.Local.iDropCount.Set(0)</string>
        <string>			V.Local.sPLot.Set("")</string>
        <string>			V.Local.iPLot.Set(0)</string>
        <string>			V.Local.sJob.Set("")</string>
        <string>			V.Local.sJob.Redim(0,1)</string>
        <string>			V.Local.fHours.Set(0)</string>
        <string>			V.Local.sStartTime.Set("")</string>
        <string>			V.Local.sEndTime.Set("")</string>
        <string>			V.Local.sSize.Set("")</string>
        <string>			V.uGlobal.uTime.Redim(-1,-1)</string>
        <string>			V.uGlobal.uMaterial.Redim(-1,-1)</string>
        <string>			V.uGlobal.uDrop.Redim(-1,-1)</string>
        <string>			V.uGlobal.uComplete.Redim(-1,-1)</string>
        <string>			V.uGlobal.uTime.Redim(0,0)</string>
        <string>			V.uGlobal.uMaterial.Redim(0,0)</string>
        <string>			V.uGlobal.uDrop.Redim(0,0)</string>
        <string>			V.uGlobal.uComplete.Redim(0,0)</string>
        <string>			V.Local.iCompleteCount.Set(0)</string>
        <string>			V.Local.fTotalArea.Set(0)</string>
        <string />
        <string>			V.uGlobal.uComplete!MJob.Set(V.Local.fQty)</string>
        <string>			</string>
        <string>			</string>
        <string />
        <string>		'Case M</string>
        <string>		'M, Material, WC, SheetID, SheetQty, SheetX, SheetY, SheetUsedX, SheetUsedY, Lot</string>
        <string>		F.Intrinsic.Control.Case("M")</string>
        <string />
        <string>			'calculate the total area for the material</string>
        <string>'			F.Intrinsic.Math.Evaluate("[v.local.sLine(4).long]*[v.local.sLine(5).float]*[v.local.sLine(6).float]+[v.local.fTotalArea]",V.Local.fTotalArea)</string>
        <string>			F.Unofficial.Script.Eval("[v.local.sline(4).long]*[v.local.sline(5).float]*[v.local.sline(6).float]+[v.local.ftotalarea]",V.Local.fTotalArea)</string>
        <string>			'sets the area for the part</string>
        <string>			F.Intrinsic.Math.Mult(V.Local.sLine(5).Float,V.Local.sLine(6).Float,V.Local.fArea)</string>
        <string />
        <string>			'if P Lot has not been set yet set it</string>
        <string>'			F.Intrinsic.Control.If(V.Local.sPLot,=,"")</string>
        <string>'				F.Intrinsic.String.Split(V.Local.sLine(9),"+",V.Local.sPLot)</string>
        <string>'			</string>
        <string>'				'if plot count is less than the plot ubound then add it to the line</string>
        <string>'				F.Intrinsic.Control.DoUntil(V.Local.iPLot,&gt;,V.Local.sPLot.UBound)</string>
        <string>'					V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iPLot)</string>
        <string>'					V.uGlobal.uMaterial(v.Local.iPLot)!NestID.Set(V.Local.sNestID)</string>
        <string>'					F.Intrinsic.String.Replace(V.Local.sPLot(v.Local.iPLot),"PO:","",V.Local.sPLot(v.Local.iPLot))</string>
        <string>'					V.uGlobal.uMaterial(v.Local.iPLot)!Lot.Set(V.Local.sPLot(v.Local.iPLot).Left6)</string>
        <string>'					F.Intrinsic.Math.Add(V.Local.iPLot,1,V.Local.iPLot)</string>
        <string>'					</string>
        <string>'				F.Intrinsic.Control.Loop</string>
        <string>'			</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>			'check to make sure that the ubound of material is not already greater then our count because of the lots above</string>
        <string>'			F.Intrinsic.Control.If(V.uGlobal.uMaterial.UBound,&lt;,V.Local.iMaterialCount)</string>
        <string>'				V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iMaterialCount)</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>			'check to see if material already in udt</string>
        <string>			F.Intrinsic.String.Split(V.Local.sLine(1).Trim,"_",V.Local.sMatSplit)</string>
        <string>			V.Local.sMatSplit.RedimPreserve(0,0)</string>
        <string>			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sMatSplit.Trim,V.Local.sOrdinal)</string>
        <string>			'if material not in udt then set it, if it is then dont set it</string>
        <string>			F.Intrinsic.Control.If(V.Local.sOrdinal,=,"")</string>
        <string>				V.uGlobal.uMaterial.RedimPreserve(0,V.Local.iMaterialCount)</string>
        <string>				V.uGlobal.uMaterial(v.Local.iMaterialCount)!NestID.Set(V.Local.sNestID)</string>
        <string>'				F.Intrinsic.String.Split(V.Local.sLine(1).Trim,"_",V.Local.sMatSplit)</string>
        <string>'				V.Local.sMatSplit.RedimPreserve(0,0)</string>
        <string>'				V.uGlobal.uMaterial(v.Local.iMaterialCount)!Material.Set(V.Local.sLine(1).Trim)</string>
        <string>				V.uGlobal.uMaterial(v.Local.iMaterialCount)!Material.Set(V.Local.sMatSplit.Trim)</string>
        <string>				V.uGlobal.uMaterial(v.Local.iMaterialCount)!Area.Set(V.Local.fArea)</string>
        <string>				V.uGlobal.uMaterial(V.Local.iMaterialCount)!Qty.Set(V.Local.sLine(4).Trim)</string>
        <string>				F.Intrinsic.Math.Add(V.Local.iMaterialCount,1,V.Local.iMaterialCount)</string>
        <string>			F.Intrinsic.Control.Else</string>
        <string>				'We have the material in the udt so lets add the qty together and set it</string>
        <string>				F.Intrinsic.Math.Add(V.uGlobal.uMaterial(v.Local.sOrdinal)!Qty,V.Local.sLine(4).Float,V.uGlobal.uMaterial(v.Local.sOrdinal)!Qty)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>				</string>
        <string />
        <string>		'Case P</string>
        <string>		'P, PartStart, PartEnd, PartStartDate, PartEndDate, PartTimeHr, Material, Part, PartOrder, Seq, WC, FinQty, PartShtAlloc, Lot,</string>
        <string>		F.Intrinsic.Control.Case("P")</string>
        <string />
        <string>			V.uGlobal.uComplete.RedimPreserve(0,V.Local.iCompleteCount)</string>
        <string>			</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!NestID.Set(V.Local.sNestID)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!TWorkOrder.Set(V.Local.sLine(8))</string>
        <string>			F.Intrinsic.String.Split(V.Local.sLine(8),"-",V.Local.sJob)</string>
        <string>			V.Local.sJob.RedimPreserve(0,1)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!Job.Set(V.Local.sJob(0))</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!Suffix.Set(V.Local.sJob(1))</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!Seq.Set(V.Local.sLine(9))</string>
        <string>			</string>
        <string>			'formatting start and end times</string>
        <string>'			F.Intrinsic.Date.ConvertTString(V.Local.sLine(1),"HH:NN.SS",V.Local.dStartTime)</string>
        <string>'			F.Intrinsic.Date.ConvertTString(V.Local.sLine(2),"HH:NN.SS",V.Local.dEndTime)</string>
        <string>			V.Local.dStartTime.Set(V.Local.sLine(1).TimeComp)</string>
        <string>			V.Local.dEndTime.Set(V.Local.sLine(2).TimeComp)</string>
        <string>'			F.Intrinsic.Date.DateDiff("N",V.Local.dStartTime,V.Local.dEndTime,V.Local.fHours)</string>
        <string>'			F.Intrinsic.Math.Div(V.Local.fHours,60,V.Local.fHours)</string>
        <string>'			F.Intrinsic.Math.Round(V.Local.fHours,2,V.Local.fHours)</string>
        <string>			V.Local.fHours.Set(V.Local.sLine(5))</string>
        <string />
        <string>			F.Intrinsic.String.Format(V.Local.dStartTime,"HHNN",V.Local.sStartTime)</string>
        <string>			F.Intrinsic.String.Format(V.Local.dEndTime,"HHNN",V.Local.sEndTime)</string>
        <string>		</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!StartTime.Set(V.Local.sStartTime)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!EndTime.Set(V.Local.sEndTime)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!TTime.Set(V.Local.fHours.String)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!TQty.Set(V.Local.sLine(11))</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!TEmployee.Set(V.Local.sLine(10).Right5)</string>
        <string />
        <string>			'calculate how much area was used on each job to find the issue amount</string>
        <string>			F.Intrinsic.String.Split(V.Local.sLine(12),".",V.Local.sSheetAlloc)</string>
        <string>			V.Local.sSheetAlloc.RedimPreserve(0,1)</string>
        <string />
        <string>			'multiplies the full number by the area and then adds the portion of the full area that was used to get the full issue amount</string>
        <string>'			F.Intrinsic.Math.Evaluate("([V.Local.sLine(12).Float]/[V.Local.fQty])*[V.Local.fTotalArea]",V.Local.fIssue)</string>
        <string>			F.Intrinsic.Math.Div(V.Local.sLine(12).Float,V.Local.fQty,V.Local.fIssue)</string>
        <string>			F.Intrinsic.Math.Mult(V.Local.fIssue,V.Local.fTotalArea,V.Local.fIssue)</string>
        <string>'			F.Intrinsic.String.Format(V.Local.fIssue,"#.0000",V.Local.fIssue)</string>
        <string>			V.uGlobal.uComplete(v.Local.iCompleteCount)!TIssue.Set(V.Local.fIssue)</string>
        <string />
        <string>			F.Intrinsic.Math.Add(V.Local.iCompleteCount,1,V.Local.iCompleteCount)</string>
        <string>			</string>
        <string />
        <string>		'Case D</string>
        <string>		'D, Drop, Material, WC, SheetID, SheetQty, SheetX, SheetY, Lot</string>
        <string>		F.Intrinsic.Control.Case("D")</string>
        <string />
        <string>			V.uGlobal.uDrop.RedimPreserve(0,V.Local.iDropCount)</string>
        <string>			V.uGlobal.uDrop(v.Local.iDropCount)!NestID.Set(V.Local.sNestID)</string>
        <string>'			V.uGlobal.uDrop(v.Local.iDropCount)!Material.Set(V.Local.sLine(1))</string>
        <string>			F.Intrinsic.String.Split(V.Local.sLine(1).Trim,"_",V.Local.sMatSplit)</string>
        <string>			V.Local.sMatSplit.RedimPreserve(0,0)</string>
        <string>			V.uGlobal.uDrop(v.Local.iDropCount)!Material.Set(V.Local.sMatSplit.Trim)</string>
        <string>			F.Intrinsic.Math.Round(V.Local.sLine(5),2,V.Local.fLength)</string>
        <string>			F.Intrinsic.Math.Round(V.Local.sLine(6),2,V.Local.fWidth)</string>
        <string>			F.Intrinsic.String.Build("{0}x{1}",V.Local.fLength,V.Local.fWidth,V.Local.sSize)</string>
        <string>			V.uGlobal.uDrop(v.Local.iDropCount)!Size.Set(V.Local.sSize)</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iDropCount,1,V.Local.iDropCount)</string>
        <string />
        <string>	F.Intrinsic.Control.EndSelect</string>
        <string />
        <string />
        <string />
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'completed but still need to finish the last one</string>
        <string>F.Intrinsic.Control.CallSub(Ncellcombine,"TotalArea",V.Local.fTotalArea,"Area",V.Local.fArea,"Qty",V.Local.fQty)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("ReadNcell_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.ReadNcell.End</string>
        <string />
        <string>Program.Sub.NcellCombine.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("NcellCombine_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iUbound.Declare(Long)</string>
        <string>V.Local.sNestID.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.fDrop.Declare(Float)</string>
        <string>V.Local.fTotalDrop.Declare(Float)</string>
        <string>V.Local.fTotalIssue.Declare(Float)</string>
        <string>V.Local.fAdditional.Declare(Float)</string>
        <string>V.Local.fTotalParts.Declare(Float)</string>
        <string>V.Local.fTemp.Declare(Float)</string>
        <string />
        <string>V.Local.iUbound.Redim(0,2)</string>
        <string>V.Local.iUbound(0).set(V.uGlobal.uComplete.UBound)</string>
        <string>V.Local.iUbound(1).Set(V.uGlobal.uMaterial.UBound)</string>
        <string>V.Local.iUbound(2).Set(V.uGlobal.uDrop.UBound)</string>
        <string />
        <string>F.Intrinsic.Variable.ArrayMax(V.Local.iUbound,V.Local.iUbound(0))</string>
        <string>V.Local.iUbound.RedimPreserve(0,0)</string>
        <string>V.uGlobal.uComplete.RedimPreserve(0,V.Local.iUbound)</string>
        <string />
        <string>V.Local.sNestID.Set(V.uGlobal.uComplete!NestID)</string>
        <string>F.Intrinsic.Control.DoUntil(V.Local.iCount,&gt;,V.Local.iUbound)</string>
        <string />
        <string>	F.Intrinsic.Control.If(V.Local.iCount,&lt;=,V.uGlobal.uMaterial.UBound)</string>
        <string>		'setting information to complete from material</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!NestID.Set(V.Local.sNestID)</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!MMaterial.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material)</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!MLot.Set(V.uGlobal.uMaterial(v.Local.iCount)!Lot)</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!MArea.Set(V.uGlobal.uMaterial(v.Local.iCount)!Area)</string>
        <string>		V.uGlobal.uComplete(V.Local.iCount)!MQty.Set(V.uGlobal.uMaterial(V.Local.iCount)!Qty)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	F.Intrinsic.Control.If(V.Local.iCount,&lt;=,V.uGlobal.uDrop.UBound)</string>
        <string>		'setting information to complete from drop</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!NestID.Set(V.Local.sNestID)</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!DMaterial.Set(V.uGlobal.uDrop(v.Local.iCount)!Material)</string>
        <string>		V.uGlobal.uComplete(v.Local.iCount)!DSize.Set(V.uGlobal.uDrop(v.Local.iCount)!Size)</string>
        <string>		'find out the total drop size</string>
        <string>		F.Intrinsic.String.Split(V.uGlobal.uDrop(v.Local.iCount)!Size,"x",V.Local.fDrop)</string>
        <string>		V.Local.fDrop.RedimPreserve(0,1)</string>
        <string>		F.Intrinsic.Math.Mult(V.Local.fDrop(0),V.Local.fDrop(1),V.Local.fDrop)</string>
        <string>		V.Local.fDrop.RedimPreserve(0,0)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.fTotalDrop,V.Local.fDrop,V.Local.fTotalDrop)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	</string>
        <string>	'add the parts to get the total count of parts made</string>
        <string>	F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTotalParts)</string>
        <string />
        <string>	'add all of the issue together if there is one</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,&lt;&gt;,0)</string>
        <string>		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTotalIssue,V.Local.fTotalIssue)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	'add id to udt</string>
        <string>	V.uGlobal.uComplete(v.Local.iCount)!ID.Set(V.Local.iCount)</string>
        <string />
        <string>	F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iCount)</string>
        <string>F.Intrinsic.Control.Loop</string>
        <string />
        <string>'find out the amount of waste</string>
        <string>F.Intrinsic.Math.Add(V.Local.fTotalIssue,V.Local.fTotalDrop,V.Local.fTotalDrop)</string>
        <string>F.Intrinsic.Math.Sub(V.Args.TotalArea.Float,V.Local.fTotalDrop,V.Local.fTotalDrop)</string>
        <string />
        <string>'loop through the combined udt again to issue the percentage of waste to each job</string>
        <string>'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>'	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,&lt;&gt;,"")</string>
        <string>'		F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Args.TotalArea.Float,V.Local.fAdditional)</string>
        <string>'		F.Intrinsic.Math.Mult(V.Local.fAdditional,V.Local.fTotalDrop,V.Local.fAdditional)</string>
        <string>'		F.Intrinsic.String.Format(V.Local.fAdditional,"#.0000",V.Local.fAdditional)</string>
        <string>'		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fAdditional,V.Local.fAdditional)</string>
        <string>'		V.uGlobal.uComplete(v.Local.iCount)!TIssue.Set(V.Local.fAdditional)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>'F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'Took this out to see if this will issue the correct amount.</string>
        <string>'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>'	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!TIssue,&lt;&gt;,"")</string>
        <string>'		F.Intrinsic.Math.Div(V.uGlobal.uComplete(v.Local.iCount)!TQty,V.Local.fTotalParts,V.Local.fTemp)</string>
        <string>'		F.Intrinsic.Math.Mult(V.Local.fTemp,V.Local.fTotalDrop,V.Local.fTemp)</string>
        <string>'		F.Intrinsic.Math.Add(V.uGlobal.uComplete(v.Local.iCount)!TIssue,V.Local.fTemp,V.uGlobal.uComplete(v.Local.iCount)!TIssue)</string>
        <string>'		V.Local.fTemp.Set(0)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>'F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'add the completed udt to the table</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!StartTime,"START_TIME")</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!EndTime,"END_TIME")</string>
        <string />
        <string>'delete nestid first</string>
        <string>F.Intrinsic.String.Build("DELETE FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' ",V.Local.sNestID,V.Local.sSQL)</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSQL)</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string>'NCELL save to ncell table</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst","SELECT * FROM GCG_3744_NCELL_SCRN")</string>
        <string />
        <string>F.Intrinsic.Variable.SaveUDTToRecordSet("Con","rst","v.uGlobal.uComplete")</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string />
        <string>'take away the references for other uses</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!StartTime,"")</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uComplete!EndTime,"")</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("NcellCombine_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.NcellCombine.End</string>
        <string />
        <string>Program.Sub.NcellBuildstyle.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("NcellBuildstyle_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sEmployee.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iCount2.Declare(Long)</string>
        <string>V.Local.iStyle.Declare(Long)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string>V.Local.sWC.Declare(String)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.Cols(5)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(2)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.FixedRows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.SetColumnPercentages(".3:.19:.19:.319:.0")</string>
        <string />
        <string>'Ncell Time buildstyle</string>
        <string>'Col 0 Work Order Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,0,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,0,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(0,0,"Work Order")</string>
        <string />
        <string />
        <string>'Col 0 Work Order Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,0,"Format","Alignment",2)</string>
        <string />
        <string>'Col 1 Qty Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,1,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,1,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(1,0,"Qty")</string>
        <string />
        <string>'Col 1 Qty Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,1,"Format","Alignment",6)</string>
        <string />
        <string>'Col 2 Time Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,2,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,2,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(2,0,"Time")</string>
        <string />
        <string>'Col 2 Time Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,2,"Format","Alignment",6)</string>
        <string />
        <string>'Col 3 Employee Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,3,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,3,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.RowHeight(0,400)</string>
        <string>F.Intrinsic.String.Build("Employee{0}Number",V.Ambient.NewLine,V.Local.sEmployee)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(3,0,V.Local.sEmployee)</string>
        <string />
        <string>'Col 3 Employee Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,3,"Format","Alignment",6)</string>
        <string>'employee style 3 to lock all other cells besides the first</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(3,3,"Type","Locked",False)</string>
        <string />
        <string>'Col 4 Work Center</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,4,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,4,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(1,4,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,0,"WC")</string>
        <string />
        <string>'Col 4 Work Center Line</string>
        <string>F.ODBC.Connection!Con.ExecuteAndReturn("SELECT WORKCENTER FROM V_WORKGROUP_LINE WHERE WORKGROUP = '*LAS' ",V.Local.sWC)</string>
        <string>F.Intrinsic.String.Replace(V.Local.sWC,"*!*","",V.Local.sWC)</string>
        <string>F.Intrinsic.String.Replace(V.Local.sWC,"#$#","*!*",V.Local.sWC)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,4,"Type","DropDownList",V.Local.sWC)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,4,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(2,4,"Format","Alignment",6)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.BuildStyle(3,4,"Type","DropDownList",V.Local.sWC)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.ApplyStyle(0,1)</string>
        <string />
        <string>'Ncell Material Buildstyle</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Cols(8)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(2)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.FixedRows(1)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.SetColumnPercentages(".25:.0:.25:.25:.25:.149:.05:.05")</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.SetColumnPercentages(".249:.0:.205:.205:.205:.075:.03:.03")</string>
        <string />
        <string />
        <string />
        <string>'Col 0 Material Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,0,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,0,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(0,0,"Material")</string>
        <string />
        <string>''Col 0 Material Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,0,"Type","Locked",True)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,0,"Format","Alignment",2)</string>
        <string />
        <string>'Col 1 Job Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,1,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,1,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(1,0,"WC")</string>
        <string />
        <string>''Col 1 Job Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,1,"Type","Dropdownlist",V.Local.sWC)</string>
        <string />
        <string>'Col 2 Lot Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,2,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,2,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(2,0,"Lot")</string>
        <string />
        <string>''Col 2 Lot Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)</string>
        <string />
        <string>'Col 3 Bin Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,3,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,3,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(3,0,"Bin")</string>
        <string />
        <string />
        <string>''Col 3 Bin Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,3,"Type","Dropdownlist","")</string>
        <string>''this will be locked until a lot is picked</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,3,"Type","Locked",True)</string>
        <string />
        <string>'Col 4 Serial Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,4,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,4,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,4,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(4,0,"Dimensions")</string>
        <string />
        <string>'Col 5 Qty Header</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,5,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,5,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,5,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(5,0,"Qty")</string>
        <string />
        <string>''Col 4 Qty Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,4,"Type","Locked",False)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,4,"Format","Alignment",6)</string>
        <string />
        <string>'Col 6 Add Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,6,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,6,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,6,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(6,0,"+")</string>
        <string />
        <string>''Col 5 Add Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Color","Fore",V.Color.Green)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Format","Alignment",4)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Type","Command","+")</string>
        <string />
        <string>'Col 7 Delete Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,7,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,7,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(1,7,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(7,0,"-")</string>
        <string />
        <string>''Col 6 Delete Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,6,"Color","Fore",V.Color.Red)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,6,"Format","Alignment",4)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,6,"Type","Command","-")</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.ApplyStyle(0,1)</string>
        <string />
        <string>'Ncell Drop Buildstyle</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.Cols(8)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(2)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.FixedRows(1)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.SetColumnPercentages(".249:.0:.1875:.1875:.1875:.1875")</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.SetColumnPercentages(".249:.0:.205:.125:.205:.155:.03:.03")</string>
        <string />
        <string>'Col 0 Material Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,0,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,0,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(0,0,"Material")</string>
        <string />
        <string>''Col 0 Material Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Type","Locked",True)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Format","Alignment",2)</string>
        <string />
        <string>'Col 1 Job Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,1,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,1,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,1,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(1,0,"Work Order")</string>
        <string />
        <string>''Col 1 Job Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,1,"Type","Dropdownlist",V.Args.JOBS)</string>
        <string />
        <string>'Col 2 Lot Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,2,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,2,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,2,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(2,0,"Lot")</string>
        <string />
        <string>''Col 2 Lot Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,2,"Type","Dropdownlist",V.Args.LOTS)</string>
        <string />
        <string>'Col 3 Bin Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,3,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,3,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,3,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(3,0,"Bin")</string>
        <string />
        <string>''Col 3 Bin Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Dropdownlist","")</string>
        <string>''this will be locked until a lot is picked</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Locked",True)</string>
        <string />
        <string>'Col 4 Bin Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,4,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,4,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,4,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(4,0,"Dimensions")</string>
        <string />
        <string>'Col 5 Size Header</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,5,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,5,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,5,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(5,0,"Size")</string>
        <string />
        <string>'Col 6 Add Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,6,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,6,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,6,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(6,0,"+")</string>
        <string />
        <string>'Col 7 Delete Header</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,7,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,7,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(1,7,"Fontstyle","Bold",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(7,0,"-")</string>
        <string />
        <string>''Col 4 Size Line</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Type","Locked",True)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Format","Alignment",6)</string>
        <string />
        <string>'Drop buildstyle lines</string>
        <string>'Col 0 Material Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Type","Locked",True)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,0,"Format","Alignment",2)</string>
        <string>'Col 2 Lot Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,2,"Type","Dropdownlist","")</string>
        <string>'Col 3 Bin Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Dropdownlist","")</string>
        <string>'this will be locked until lot is picked</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,3,"Type","Locked",True)</string>
        <string>'Col 4 Serial Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Type","Dropdownlist","")</string>
        <string>'this will be locked until lot is picked</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,4,"Type","Locked",True)</string>
        <string>'Col 5 Size Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,5,"Format","Alignment",6)</string>
        <string>'Col 6 Add Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,6,"Color","Fore",V.Color.Green)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,6,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,6,"Type","Command","+")</string>
        <string>'Col 7 Delete Line</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,7,"Color","Fore",V.Color.Red)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,7,"Format","Alignment",4)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(2,7,"Type","Command","-")</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(0,1)</string>
        <string />
        <string>V.Local.iStyle.Set(3)</string>
        <string />
        <string>'loop through material buildstyle to create new ones as needed for both material and drop</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,&lt;&gt;,"")</string>
        <string>		F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Style,=,"","OR",V.uGlobal.uMaterial(v.Local.iCount)!Style,=,0)</string>
        <string>			'Material buildstyle lines</string>
        <string>			'Col 0 Material Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)</string>
        <string>			'Col 2 Lot Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)</string>
        <string>			'Col 3 Bin Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")</string>
        <string>			'locked until they pick a lot</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)</string>
        <string>			'Col 4 Serial Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")</string>
        <string>			'locked until they pick a lot</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)</string>
        <string>			'Col 5 Qty Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,5,"Type","Locked",False)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(2,5,"Format","Alignment",6)</string>
        <string>			'Col 6 Add Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,6,"Type","Command","+")</string>
        <string>			'Col 7 Delete Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNMaterial.BuildStyle(V.Local.iStyle,7,"Type","Command","-")</string>
        <string />
        <string>			'Drop buildstyle lines</string>
        <string>			'Col 0 Material Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)</string>
        <string>			'Col 2 Lot Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uMaterial(v.Local.iCount)!LotDDL)</string>
        <string>			'Col 3 Bin Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")</string>
        <string>			'this will be locked until lot is picked</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)</string>
        <string>			'Col 4 Serial Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")</string>
        <string>			'this will be locked until lot is picked</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)</string>
        <string>			'Col 5 Size Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)</string>
        <string>			'Col 6 Add Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Type","Command","+")</string>
        <string>			'Col 7 Delete Line</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Type","Command","-")</string>
        <string />
        <string>			'get all of the materials with this material and set its style</string>
        <string>			V.Local.sOrdinal.Redim(0,0)</string>
        <string>			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uMaterial(v.Local.iCount)!Material,V.Local.sOrdinal)</string>
        <string>			F.Intrinsic.Control.If(V.Local.sOrdinal,&lt;&gt;,"")</string>
        <string>				F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>				F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)</string>
        <string>					V.uGlobal.uMaterial(v.Local.sOrdinal(v.Local.iCount2))!Style.Set(V.Local.iStyle)</string>
        <string>				F.Intrinsic.Control.Next(V.Local.iCount2)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string />
        <string>			'add one to the style for the next material type</string>
        <string>			F.Intrinsic.Math.Add(V.Local.iStyle,1,V.Local.iStyle)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'V.Local.iStyle.Set(3)</string>
        <string>''loop through Drop buildstyle to create new ones as needed</string>
        <string>'F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)</string>
        <string>'	F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Material,&lt;&gt;,"")</string>
        <string>'		F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Style,=,"","OR",V.uGlobal.uDrop(v.Local.iCount)!Style,=,0)</string>
        <string>'			'Drop buildstyle lines</string>
        <string>'			'Col 0 Material Line</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Type","Locked",True)</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,0,"Format","Alignment",2)</string>
        <string>'			'Col 2 Lot Line</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,2,"Type","Dropdownlist",V.uGlobal.uDrop(v.Local.iCount)!LotDDL)</string>
        <string>'			'Col 3 Bin Line</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Dropdownlist","")</string>
        <string>'			'this will be locked until lot is picked</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,3,"Type","Locked",True)</string>
        <string>'			'Col 4 Serial Line</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Dropdownlist","")</string>
        <string>'			'this will be locked until lot is picked</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,4,"Type","Locked",True)</string>
        <string>'			'Col 5 Size Line</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,5,"Format","Alignment",6)</string>
        <string>'			'Col 6 Add Line</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Color","Fore",V.Color.Green)</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Format","Alignment",4)</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,6,"Type","Command","+")</string>
        <string>'			'Col 7 Delete Line</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Color","Fore",V.Color.Red)</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Format","Alignment",4)</string>
        <string>'			Gui.Ncell_Trumpf_Interface.gsfgNDrop.BuildStyle(V.Local.iStyle,7,"Type","Command","-")</string>
        <string>'</string>
        <string>'</string>
        <string>'</string>
        <string>'			'get all of the materials with this material and set its style</string>
        <string>'			V.Local.sOrdinal.Redim(0,0)</string>
        <string>'			F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uDrop!Material,V.uGlobal.uDrop(v.Local.iCount)!Material,V.Local.sOrdinal)</string>
        <string>'			F.Intrinsic.Control.If(V.Local.sOrdinal,&lt;&gt;,"")</string>
        <string>'				F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>'				F.Intrinsic.Control.For(V.Local.iCount2,V.Local.sOrdinal.LBound,V.Local.sOrdinal.UBound,1)</string>
        <string>'					V.uGlobal.uDrop(v.Local.sOrdinal(v.Local.iCount2))!Style.Set(V.Local.iStyle)</string>
        <string>'				F.Intrinsic.Control.Next(V.Local.iCount2)</string>
        <string>'			F.Intrinsic.Control.EndIf</string>
        <string>'</string>
        <string>'			'add one to the style for the next material type</string>
        <string>'			F.Intrinsic.Math.Add(V.Local.iStyle,1,V.Local.iStyle)</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>'F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("NcellBuildstyle_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.NcellBuildstyle.End</string>
        <string />
        <string>Program.Sub.NcellLoadFG.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("NcellLoadFG_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string>V.Local.sWC.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string />
        <string>'load time udt to time flexgrid</string>
        <string>'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uTime!Job,False)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.LoadFromUDT("uGlobal.uTime","Job::0*!*Qty::1*!*Time::2",2)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.ApplyStyle(1,3)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(3,1,V.uGlobal.uTime!Employee)</string>
        <string>V.Global.iRow.Set(1)</string>
        <string>V.Global.iColumn.Set(3)</string>
        <string>V.Global.sControlName.Set("gsfgNTime")</string>
        <string>F.Intrinsic.Control.CallSub(Gsfgtimeposttext)</string>
        <string>'loop through time and set the first work center as the default for all</string>
        <string>F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,1,V.Local.iRows)</string>
        <string>'F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)</string>
        <string>'	F.Intrinsic.Control.If(V.Local.sWC,=,"")</string>
        <string>		F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQUENCE FROM GCG_3744_NCELL_SCRN WHERE TJOB = '{0}' AND NESTID = '{1}' ",V.uGlobal.uTime!Job,V.uGlobal.uTime!NestID,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstJob",V.Local.sSQL)</string>
        <string>		F.Intrinsic.Control.If(V.ODBC.Con!rstJob.EOF,=,False)</string>
        <string>			F.Intrinsic.String.Build("SELECT TOP 1 SAR FROM APSV3_UBDETAIL WHERE JOB = '{0}' AND SFX = '{1}' AND SEQ = '{2}' ORDER BY BNO ASC ",V.ODBC.Con!rstJob.FieldValTrim!JOB,V.ODBC.Con!rstJob.FieldValTrim!SUFFIX,V.ODBC.Con!rstJob.FieldValTrim!SEQUENCE,V.Local.sSQL)</string>
        <string>			F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstWC",V.Local.sSQL)</string>
        <string>			F.Intrinsic.Control.If(V.ODBC.Con!rstWC.EOF,=,False)</string>
        <string>				V.Local.sWC.Set(V.ODBC.Con!rstWC.FieldValTrim!SAR)</string>
        <string>			F.Intrinsic.Control.EndIf</string>
        <string>			F.ODBC.Con!rstWC.Close</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.ODBC.Con!rstJob.Close</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,V.Local.iCount,V.Local.sWC.Trim)</string>
        <string>'	F.Intrinsic.Control.Else</string>
        <string>'		Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,1,V.Local.sWC.Trim)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'load material udt to material flexgrid</string>
        <string>'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uMaterial!Material,0)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.LoadFromUDT("uGlobal.uMaterial","Material::0*!*Qty::4",2)</string>
        <string>F.Intrinsic.Math.Add(V.uGlobal.uMaterial.UBound,2,V.Local.iRows)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(V.Local.iRows)</string>
        <string>V.Local.iRows.Set(1)</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(0,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(5,V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Qty)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.iCount)!Style)</string>
        <string>	F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNMaterial.TextMatrix(1,1,V.uGlobal.uTime!Job)</string>
        <string />
        <string>'load drop udt to drop flexgrid</string>
        <string>'F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uDrop!Material,0)</string>
        <string>'Gui.Ncell_Trumpf_Interface.gsfgNDrop.LoadFromUDT("uGlobal.uDrop","Material::0*!*Lot::2*!*Size::4",2)</string>
        <string>F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,&lt;&gt;,-1)</string>
        <string>	F.Intrinsic.Math.Add(V.uGlobal.uDrop.UBound,2,V.Local.iRows)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(V.Local.iRows)</string>
        <string>	V.Local.iRows.Set(1)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(0,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Material.Trim)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(5,V.Local.iRows,V.uGlobal.uDrop(v.Local.iCount)!Size.Trim)</string>
        <string>		F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.uGlobal.uDrop(v.Local.iCount)!Material,V.Local.sOrdinal)</string>
        <string>		F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>'F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNDrop.Rows,1,V.Local.iRows)</string>
        <string>'F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)</string>
        <string>'	Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(1,V.Local.iCount,V.uGlobal.uTime!Job)</string>
        <string>'F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.ApplyStyle(1,3)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.uGlobal.uDrop.UBound,=,-1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(2)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(1,2)</string>
        <string>F.Intrinsic.Control.endif</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("NcellLoadFG_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.NcellLoadFG.End</string>
        <string />
        <string>program.sub.cmbonnestid_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmbonnestid_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sNestID.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sSheets.Declare(String)</string>
        <string>V.Local.sLots.Declare(String)</string>
        <string>V.Local.sJobs.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.sTemp.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string />
        <string>F.Intrinsic.UI.InvokeWaitDialog("Loading Nest","Loading")</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNTime.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNMaterial.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgNDrop.Rows(1)</string>
        <string />
        <string>'Wipe out Trumpf flexgrid</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTTime.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTMaterial.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.gsfgTDrop.Rows(1)</string>
        <string>Gui.Ncell_Trumpf_Interface.cmboTNestID.Text("")</string>
        <string />
        <string>V.Local.sNestID.Set(V.Screen.Ncell_Trumpf_Interface!cmboNNestID.Text)</string>
        <string />
        <string>'Load the uTime udt</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Time Table",20)</string>
        <string>F.Intrinsic.String.Build("SELECT NESTID, TJOB, TQTY, TTIME, TEMPLOYEE, TISSUE ,ID FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND TJOB &lt;&gt; '' AND CLOSED &lt;&gt; 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uTime",False,100)</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string />
        <string>'Load the uMaterial udt</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Material Table",40)</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"MJOB")</string>
        <string>F.Intrinsic.String.Build("SELECT NESTID, MMATERIAL, MQTY, MJOB, ID, MAREA FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND MMATERIAL &lt;&gt; '' AND CLOSED &lt;&gt; 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uMaterial",False,100)</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string>F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uMaterial!Job,"")</string>
        <string />
        <string>'Load to Drop udt</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Drops Table",60)</string>
        <string>F.Intrinsic.String.Build("SELECT NESTID, DMATERIAL, DSIZE, ID, DJOB FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND DMATERIAL &lt;&gt; '' AND CLOSED &lt;&gt; 'Y' ORDER BY ID ASC",V.Local.sNestID,V.Local.sSQL)</string>
        <string>F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)</string>
        <string>F.Intrinsic.Variable.LoadUDTFromRecordset("Con","rst","uGlobal.uDrop",False,100)</string>
        <string>F.ODBC.Con!rst.Close</string>
        <string />
        <string>'gather the lots and pass it to the buildstyle</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Lots",80)</string>
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uMaterial.LBound,V.uGlobal.uMaterial.UBound,1)</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uMaterial(v.Local.iCount)!Material,&lt;&gt;,"")</string>
        <string>		V.Local.sPart.Set(V.uGlobal.uMaterial(v.Local.iCount)!Material.Trim)</string>
        <string>		F.Intrinsic.String.Build("SELECT DISTINCT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY &gt; 0 ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTemp)</string>
        <string>		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)</string>
        <string>'		F.Intrinsic.Control.If(V.Local.sTemp,&lt;&gt;,"","AND",V.Local.sLots,&lt;&gt;,"")</string>
        <string>'			F.Intrinsic.String.Build("{0}#$#{1}",V.Local.sLots,V.Local.sTemp,V.Local.sLots)</string>
        <string>'		F.Intrinsic.Control.ElseIf(V.Local.sTemp,&lt;&gt;,"")</string>
        <string>'			V.Local.sLots.Set(V.Local.sTemp)</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string>		F.Intrinsic.Control.If(V.Local.sTemp,&lt;&gt;,"")</string>
        <string>			F.Intrinsic.String.Replace(V.Local.sTemp,"#$#","*!*",V.Local.sTemp)</string>
        <string>			V.uGlobal.uMaterial(v.Local.iCount)!LotDDL.Set(V.Local.sTemp)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uDrop.LBound,V.uGlobal.uDrop.UBound,1)</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uDrop(v.Local.iCount)!Material,&lt;&gt;,"")</string>
        <string>		V.Local.sPart.Set(V.uGlobal.uDrop(v.Local.iCount)!Material.Trim)</string>
        <string>		F.Intrinsic.String.Build("SELECT DISTINCT LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY &gt; 0 ",V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTemp)</string>
        <string>		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)</string>
        <string>		F.Intrinsic.Control.If(V.Local.sTemp,&lt;&gt;,"")</string>
        <string>			F.Intrinsic.String.Replace(V.Local.sTemp,"#$#","*!*",V.Local.sTemp)</string>
        <string>			V.uGlobal.uDrop(v.Local.iCount)!LotDDL.Set(V.Local.sTemp)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>'F.Intrinsic.String.Replace(V.Local.sLots,"#$#","*!*",V.Local.sLots)</string>
        <string>'remove duplicates</string>
        <string>'F.Intrinsic.String.Split(V.Local.sLots,"*!*",V.Local.sLots)</string>
        <string>'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sLots,V.Local.sLots)</string>
        <string>'F.Intrinsic.String.Join(V.Local.sLots,"*!*",V.Local.sLots)</string>
        <string />
        <string>'gather all the work orders and pass to the buildstyle for the drops</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Work Orders",85)</string>
        <string>'F.Intrinsic.String.Build("SELECT TJOB FROM GCG_3744_NCELL_SCRN WHERE NESTID = '{0}' AND TJOB &lt;&gt; '' ",V.Local.sNestID,V.Local.sSQL)</string>
        <string>'F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.Replace(V.Local.sJobs,"*!*","",V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.Replace(V.Local.sJobs,"#$#","*!*",V.Local.sJobs)</string>
        <string>''remove duplicates</string>
        <string>'F.Intrinsic.String.Split(V.Local.sJobs,"*!*",V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sJobs,V.Local.sJobs)</string>
        <string>'F.Intrinsic.String.Join(V.Local.sJobs,"*!*",V.Local.sJobs)</string>
        <string />
        <string>'F.Intrinsic.String.Build("Total Sheets: {0}",V.uGlobal.uMaterial!Qty,V.Local.sSheets)</string>
        <string>F.Intrinsic.String.Build("Total Sheets: {0}",V.uGlobal.uMaterial!Job,V.Local.sSheets)</string>
        <string>Gui.Ncell_Trumpf_Interface.lblNSheets.Caption(V.Local.sSheets)</string>
        <string />
        <string>'set the qty for the sheets</string>
        <string>'F.Intrinsic.String.Build("SELECT MJOB, MMATERIAL, (TISSUE/MAREA) AS SHEET FROM GCG_3744_NELL_SCRN WHERE NESTID = '{0}' AND MJOB &lt;&gt; '' ORDER BY ID ASC",V.uGlobal.uMaterial!NestID,V.Local.sSQL)</string>
        <string>'F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstQty",V.Local.sSQL)</string>
        <string>'V.Local.iCount.Set(0)</string>
        <string>'F.Intrinsic.Control.DoUntil(V.ODBC.Con!rstQty.EOF,=,True)</string>
        <string>'	F.Intrinsic.Control.If(V.ODBC.Con!rstQty.FieldValFloat!SHEET,&gt;,V.ODBC.Con!rstQty.FieldValLong!SHEET)</string>
        <string>'		F.Intrinsic.Math.Add(V.ODBC.Con!rstQty.FieldValLong!SHEET,1,V.uGlobal.uMaterial(V.Local.iCount)!Qty)</string>
        <string>'	F.Intrinsic.Control.Else</string>
        <string>'		V.uGlobal.uMaterial(V.Local.iCount)!Qty.Set(V.ODBC.Con!rstQty.FieldValLong!SHEET)</string>
        <string>'	F.Intrinsic.Control.EndIf</string>
        <string>'	F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iCount)</string>
        <string>'	F.ODBC.Con!rstQty.MoveNext</string>
        <string>'F.Intrinsic.Control.Loop</string>
        <string>'F.ODBC.Con!rstQty.Close</string>
        <string />
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Buildstyle",90)</string>
        <string>'F.Intrinsic.Control.CallSub(Ncellbuildstyle,"LOTS",V.Local.sLots,"JOBS",V.Local.sJobs)</string>
        <string>F.Intrinsic.Control.CallSub(Ncellbuildstyle)</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Loading Information to Grid",100)</string>
        <string>F.Intrinsic.Control.CallSub(Ncellloadfg)</string>
        <string>F.Intrinsic.UI.CloseWaitDialog</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmbonnestid_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>program.sub.cmbonnestid_click.End</string>
        <string />
        <string>program.sub.tabnest_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("tabnest_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'changed the tab so repopulate the nest dropdown</string>
        <string>'F.Intrinsic.Control.CallSub(Popdropdown)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("tabnest_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>program.sub.tabnest_click.End</string>
        <string />
        <string>Program.Sub.gsfgTimePostText.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgTimePostText_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sEmployee.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string />
        <string>'Time grid employee column</string>
        <string>F.Intrinsic.Control.If(V.Global.iRow,=,1,"AND",V.Global.iColumn,=,3)</string>
        <string />
        <string>	Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].Commit</string>
        <string>	'get the entered employee</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].GetTextMatrix(3,1,V.Local.sEmployee)</string>
        <string>	'check to make sure this is a legit employee</string>
        <string>	F.Intrinsic.String.Build("SELECT EMPLOYEE FROM V_EMPLOYEE_MSTR WHERE EMPLOYEE = '{0}' ",V.Local.sEmployee.Trim,V.Local.sSQL)</string>
        <string>	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)</string>
        <string>	F.Intrinsic.Control.If(V.Local.sRet,&lt;&gt;,"")</string>
        <string>		'this is a legit employee so loop through the table and add name to all rows and lock the other cells besides the first</string>
        <string>		F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface![v.Global.sControlName].Rows,1,V.Local.iRows)</string>
        <string>		F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].TextMatrix(3,V.Local.iCount,V.Local.sEmployee.Trim)</string>
        <string>		F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		'no employee found, notify and clear the cells</string>
        <string>		F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface![v.Global.sControlName].Rows,1,V.Local.iRows)</string>
        <string>		F.Intrinsic.Control.For(V.Local.iCount,1,V.Local.iRows,1)</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Global.sControlName].TextMatrix(3,V.Local.iCount,"")</string>
        <string>		F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>		</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgTimePostText_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.gsfgTimePostText.End</string>
        <string />
        <string>Program.Sub.FlexSchedule.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("FlexSchedule_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.sScheduleNumber.Declare(String)</string>
        <string>V.Local.iIncrement.Declare(Long)</string>
        <string>V.Local.sIncrement.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.sJob.Declare(String)</string>
        <string>V.Local.sSuffix.Declare(String)</string>
        <string>V.Local.sSeq.Declare(String)</string>
        <string>V.Local.sWorkCenter.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.sLine.Declare(String)</string>
        <string>V.Local.sFiller.Declare(String)</string>
        <string>V.Local.sFileName.Declare(String)</string>
        <string>V.Local.sFiller2.Declare(String)</string>
        <string>V.Local.sMJob.Declare(String)</string>
        <string>V.Local.sMSuffix.Declare(String)</string>
        <string>V.Local.sMSeq.Declare(String)</string>
        <string>V.Local.sPrint.Declare(String)</string>
        <string />
        <string />
        <string>'uploading flex schedule</string>
        <string />
        <string>'get the highest schedule number if null then set it to 1</string>
        <string>'F.ODBC.Connection!Con.ExecuteAndReturn("SELECT IF(MAX(SCHEDULE) IS NOT NULL,MAX(SCHEDULE),1) FROM V_JOB_CT_FLX_SCHD ",V.Local.sRet)</string>
        <string>'F.Intrinsic.String.Replace(V.Local.sRet,"*!*","",V.Local.sScheduleNumber)</string>
        <string>'add one to the highest number</string>
        <string>'F.Intrinsic.Math.Add(V.Local.sScheduleNumber.Long,1,V.Local.sScheduleNumber)</string>
        <string>f.ODBC.Connection!Con.GetID("V_JOB_CT_FLX_SCHD","SCHEDULE",TRUE,V.Local.sScheduleNumber)</string>
        <string>F.Intrinsic.String.Format(V.Local.sScheduleNumber,"000000",V.Local.sScheduleNumber)</string>
        <string />
        <string>F.Intrinsic.Control.For(V.Local.iCount,V.uGlobal.uComplete.LBound,V.uGlobal.uComplete.UBound,1)</string>
        <string>	F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!Job,&lt;&gt;,"")</string>
        <string>		'Add increment</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iIncrement,1,V.Local.iIncrement)</string>
        <string>		F.Intrinsic.String.Format(V.Local.iIncrement,"000000",V.Local.sIncrement)</string>
        <string />
        <string>		V.Local.sJob.Set(V.uGlobal.uComplete(v.Local.iCount)!Job)</string>
        <string>		V.Local.sSuffix.Set(V.uGlobal.uComplete(v.Local.iCount)!Suffix)</string>
        <string>		V.Local.sMJob.Set(V.uGlobal.uComplete(v.Local.iCount)!Job)</string>
        <string>		V.Local.sMSuffix.Set(V.uGlobal.uComplete(v.Local.iCount)!Suffix)</string>
        <string>		V.Local.sSeq.Set(V.uGlobal.uComplete(V.Local.iCount)!Seq)</string>
        <string />
        <string>'		V.Local.sPart.Set(V.uGlobal.uComplete!MMaterial)</string>
        <string>		'if mmaterial is not blank then set it, if it is blank thens set it to the default mmaterial because there is only one material.</string>
        <string>'		F.Intrinsic.Control.If(V.uGlobal.uComplete(v.Local.iCount)!MMaterial,&lt;&gt;,"")</string>
        <string>'			V.Local.sPart.Set(V.uGlobal.uComplete(v.Local.iCount)!MMaterial)</string>
        <string>'		F.Intrinsic.Control.Else</string>
        <string>'			V.Local.sPart.Set(V.uGlobal.uComplete(v.Local.iCount)!MMaterial)</string>
        <string>'		F.Intrinsic.Control.EndIf</string>
        <string />
        <string>		'search for the material sequence</string>
        <string>		F.Intrinsic.String.Build("SELECT SEQ, PART FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ &lt; '{2}' ORDER BY SEQ ASC",V.Local.sMJob.Trim,V.Local.sMSuffix.Trim,V.Local.sSeq,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sMSeq)</string>
        <string>'		F.Intrinsic.String.Replace(V.Local.sMSeq,"*!*","",V.Local.sMSeq)</string>
        <string>		F.Intrinsic.String.Split(V.Local.sMSeq,"*!*",V.Local.sMSeq)</string>
        <string>		V.Local.sMSeq.RedimPreserve(0,1)</string>
        <string>		V.Local.sPart.Set(V.Local.sMSeq(1))</string>
        <string>		V.Local.sMSeq.RedimPreserve(0,0)</string>
        <string />
        <string>		'search for the work center, part and sequence</string>
        <string>		F.Intrinsic.String.Build("SELECT TOP 1 SEQ, PART AS WC FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ &gt; '{2}' AND LMO = 'L' ORDER BY SEQ ASC",V.Local.sJob.Trim,V.Local.sSuffix.Trim,V.Local.sSeq.Trim,V.Local.sSQL)</string>
        <string>		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWorkCenter)</string>
        <string>		F.Intrinsic.String.Split(V.Local.sWorkCenter,"*!*",V.Local.sWorkCenter)</string>
        <string>		V.Local.sWorkCenter.RedimPreserve(0,1)</string>
        <string>		V.Local.sSeq.Set(V.Local.sWorkCenter(0))</string>
        <string>		V.Local.sWorkCenter.Set(V.Local.sWorkCenter(1))</string>
        <string />
        <string>		'if wc is not BO then exit</string>
        <string>		F.Intrinsic.Control.If(V.Local.sWorkCenter.Left2,&lt;&gt;,"BO")</string>
        <string>			F.Intrinsic.Control.ExitSub</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string />
        <string>		V.Local.sFiller.Set("000000999999")</string>
        <string>		V.Local.sFiller2.Set("000000999999")</string>
        <string>		'padd all of the paramaters to fit into the file</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sScheduleNumber," ",9,V.Local.sScheduleNumber)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sIncrement," ",6,V.Local.sIncrement)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sMJob," ",6,V.Local.sMJob)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sMSuffix," ",3,V.Local.sMSuffix)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sMSeq," ",11,V.Local.sMSeq)</string>
        <string>		</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sJob," ",6,V.Local.sJob)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sSuffix," ",3,V.Local.sSuffix)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sSeq," ",6,V.Local.sSeq)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sFiller," ",37,V.Local.sFiller)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sWorkCenter," ",4,V.Local.sWorkCenter)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sPart," ",25,V.Local.sPart)</string>
        <string>		F.Intrinsic.String.RPad(V.Local.sFiller2," ",12,V.Local.sFiller2)</string>
        <string>		F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}",V.Local.sLine,V.Local.sScheduleNumber,V.Local.sIncrement,V.Local.sMJob,V.Local.sMSuffix,V.Local.sMSeq,V.Local.sJob,V.Local.sSuffix,V.Local.sSeq,V.Local.sFiller,V.Local.sWorkCenter,V.Local.sPart,V.Local.sFiller2,V.Ambient.NewLine,V.Local.sLine)</string>
        <string />
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>'SCHED.txt that is read by UPLSCHED</string>
        <string>F.Intrinsic.String.Build("{0}\SCHED.TXT",V.Caller.FilesDir,V.Local.sFileName)</string>
        <string />
        <string>F.Intrinsic.File.String2File(V.Local.sFileName,V.Local.sLine)</string>
        <string>'uploads schedule in append and screenless mode</string>
        <string>F.Global.General.CallWrapperSync(6000,"50!*!NS")</string>
        <string />
        <string>F.Intrinsic.String.Left(V.Local.sScheduleNumber,6,V.Local.sScheduleNumber)</string>
        <string>'adds the flexid to the table for later use</string>
        <string>F.Intrinsic.Control.If(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,0)</string>
        <string>	F.Intrinsic.String.Build("UPDATE GCG_3744_TRUMPF_SCRN SET FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.ElseIf(V.Screen.Ncell_Trumpf_Interface!TabNest.Tab,=,1)</string>
        <string>	F.Intrinsic.String.Build("UPDATE GCG_3744_NCELL_SCRN SET FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.uGlobal.uComplete!NestID.Trim,V.Local.sSQL)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.ODBC.Connection!Con.Execute(V.Local.sSQL)</string>
        <string />
        <string>'Print flex schedule</string>
        <string>F.Intrinsic.String.Build("000000!*!999999!*!{0}!*!000!*!{0}!*!000!*!Y!*!Y",V.Local.sScheduleNumber,V.Local.sPrint)</string>
        <string>F.Global.General.CallWrapperSync(900300,V.Local.sPrint)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("FlexSchedule_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.FlexSchedule.End</string>
        <string />
        <string>Program.Sub.gsfgTimeMouseDown.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgTimeMouseDown_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'Time grid Employee column</string>
        <string>F.Intrinsic.Control.If(V.Args.MouseCol,=,3,"AND",V.Args.MouseRow,=,1)</string>
        <string>	V.Global.iRow.Set(V.Args.MouseRow)</string>
        <string>	V.Global.iColumn.Set(V.Args.MouseCol)</string>
        <string>	V.Global.sControlName.Set(V.Args.ControlName)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgTimeMouseDown_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.gsfgTimeMouseDown.End</string>
        <string />
        <string>program.sub.cmdflexsched_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdflexsched_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.iWidth.Declare(Long)</string>
        <string>V.Local.sColumn.Declare(String)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.sParam.Declare(String)</string>
        <string />
        <string>F.Intrinsic.String.Split("1000*!*1500","*!*",V.Local.iWidth)</string>
        <string>F.Intrinsic.String.Split("Nest ID*!*Schedule Number","*!*",V.Local.sColumn)</string>
        <string />
        <string>'create browser for all closed nestid's that show their flexid's so they can be reprinted</string>
        <string>F.Intrinsic.UI.Browser("Flex Schedule Browser","Con","SELECT NESTID, FLEXID FROM GCG_3744_TRUMPF_SCRN WHERE CLOSED = 'Y' UNION SELECT NESTID, FLEXID FROM GCG_3744_NCELL_SCRN WHERE CLOSED = 'Y' ORDER BY NESTID ASC",V.Local.sColumn,V.Local.iWidth,V.Local.sRet)</string>
        <string>F.Intrinsic.Control.If(V.Local.sRet,&lt;&gt;,"***CANCEL***")</string>
        <string>	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)</string>
        <string>	V.Local.sRet.RedimPreserve(0,1)</string>
        <string>	F.Intrinsic.String.Build("V000000!*!999999!*!{0}!*!000!*!{0}!*!000!*!Y!*!Y",V.Local.sRet(1),V.Local.sParam)</string>
        <string>	F.Global.General.CallWrapperSync(900300,V.Local.sParam)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmdflexsched_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>program.sub.cmdflexsched_click.End</string>
        <string />
        <string>Program.Sub.gsfgLostFocus.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgLostFocus_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Commit</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgLostFocus_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.gsfgLostFocus.End</string>
        <string />
        <string>program.sub.cmdrefresh_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdrefresh_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'refresh is clicked so reset everyting and load in new files</string>
        <string>Gui.Ncell_Trumpf_Interface..Visible(false)</string>
        <string>F.Intrinsic.UI.InvokeWaitDialog("Refeshing Data","Refreshing")</string>
        <string />
        <string>'resetting screen</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Clearing screen",15)</string>
        <string>Gui.Ncell_Trumpf_Interface.TabNest.SetTab(0)</string>
        <string>F.Intrinsic.Control.CallSub(Cmdclear_click)</string>
        <string>Gui.Ncell_Trumpf_Interface.TabNest.SetTab(1)</string>
        <string>F.Intrinsic.Control.CallSub(Cmdclear_click)</string>
        <string>Gui.Ncell_Trumpf_Interface.TabNest.SetTab(0)</string>
        <string />
        <string>'reading file path</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Reading Trumpf File Path",30)</string>
        <string>F.Intrinsic.Control.CallSub(Filepath,"DAT","Trumpf")</string>
        <string />
        <string>'reading file list</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Reading File List for Trumpf",45)</string>
        <string>F.Intrinsic.Control.CallSub(Filelist)</string>
        <string />
        <string>'reading file path ncell</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Reading Ncell File Path",60)</string>
        <string>F.Intrinsic.Control.CallSub(Filepath,"DAT","Ncell")</string>
        <string />
        <string>'reading file list</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Reading File List from Ncell",75)</string>
        <string>F.Intrinsic.Control.CallSub(Filelist)</string>
        <string />
        <string>'populating drop down</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Populating Drop Down List",90)</string>
        <string>F.Intrinsic.Control.CallSub(Popdropdown)</string>
        <string />
        <string />
        <string>'close wait dialog</string>
        <string>F.Intrinsic.UI.ChangeWaitStatus("Done",100)</string>
        <string>F.Intrinsic.UI.CloseWaitDialog</string>
        <string>Gui.Ncell_Trumpf_Interface..Show</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmdrefresh_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>program.sub.cmdrefresh_click.End</string>
        <string />
        <string>Program.Sub.gsfgCmd_Click.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgCmd_Click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iPos.Declare(Long)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string />
        <string>'if + was pressed then add a new row under the last row</string>
        <string>F.Intrinsic.Control.If(V.Args.Key,&gt;,0,"AND",V.Args.Column,=,6)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sRet)</string>
        <string>	F.Intrinsic.Control.If(V.Local.sRet.Trim,&lt;&gt;,"")</string>
        <string>		F.Intrinsic.Math.Add(V.Screen.Ncell_Trumpf_Interface![v.Args.ControlName].Rows,1,V.Local.iRows)</string>
        <string>		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Rows(V.Local.iRows)</string>
        <string>		F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)</string>
        <string>		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sRet)</string>
        <string>		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,V.Local.iRows,V.Local.sRet.Trim)</string>
        <string>	F.Intrinsic.Control.Else</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(0,1,V.Local.sRet)</string>
        <string>		Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,1,V.Local.sRet.Trim)</string>
        <string>		V.Local.iRows.Set(V.Args.Key)</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string />
        <string>	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sRet.Trim,V.Local.sOrdinal)</string>
        <string>	F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].ApplyStyle(V.Local.iRows,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)</string>
        <string />
        <string>'if - was pressed then delete the pressed row</string>
        <string>F.Intrinsic.Control.ElseIf(V.Args.Key,&gt;,0,"AND",V.Args.Column,=,7)</string>
        <string />
        <string>	F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface![v.Args.ControlName].Rows,1,V.Local.iRows)</string>
        <string>	F.Intrinsic.Control.If(V.Local.iRows,&lt;=,1)</string>
        <string>		'don't exit if it is drop, we just need to clear the row instead</string>
        <string>		F.Intrinsic.Control.If(V.Args.ControlName,=,"GSFGNDROP")</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(0,1,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(2,1,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(3,1,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(4,1,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.TextMatrix(5,1,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.gsfgNDrop.ApplyStyle(1,2)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>		F.Intrinsic.Control.ExitSub</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,V.Args.Key,V.Local.iRows,1)</string>
        <string>		F.Intrinsic.Math.Add(V.Local.iCount,1,V.Local.iPos)</string>
        <string>		'if the next position is within the row count then get the infor and put it in the new location</string>
        <string>		F.Intrinsic.Control.If(V.Local.iPos,=&lt;,V.Local.iRows)</string>
        <string>			'replaces the Material</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,V.Local.iCount,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Local.iPos,V.Local.sRet)</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(0,V.local.iCount,V.Local.sRet.Trim)</string>
        <string>'			'replaces the Work Order</string>
        <string>'			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(1,V.Local.iCount,"")</string>
        <string>'			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(1,V.Local.iPos,V.Local.sRet)</string>
        <string>'			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(1,V.local.iCount,V.Local.sRet.Trim)</string>
        <string>			'replaces the Lot</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(2,V.Local.iCount,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(2,V.Local.iPos,V.Local.sRet)</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(2,V.local.iCount,V.Local.sRet.Trim)</string>
        <string>			'replaces the Bin</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(3,V.Local.iCount,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(3,V.Local.iPos,V.Local.sRet)</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(3,V.local.iCount,V.Local.sRet.Trim)</string>
        <string>			'replace the Serial</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.Local.iCount,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(4,V.Local.iPos,V.Local.sRet)</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.local.iCount,V.Local.sRet.Trim)</string>
        <string>			'replaces quantity</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(5,V.Local.iCount,"")</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(5,V.Local.iPos,V.Local.sRet)</string>
        <string>			Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(5,V.Local.iCount,V.Local.sRet.Trim)</string>
        <string>		F.Intrinsic.Control.EndIf</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Rows(V.Local.iRows)</string>
        <string>	</string>
        <string />
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgCmd_Click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Program.Sub.gsfgCmd_Click.End</string>
        <string />
        <string>Program.Sub.gsfgListExit.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgListExit_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sSQL.Declare(String)</string>
        <string>V.Local.sLot.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.sBin.Declare(String)</string>
        <string>V.Local.sOrdinal.Declare(String)</string>
        <string>V.Local.iCount.Declare(Long)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string>V.Local.sSerial.Declare(String)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Args.ControlName,&lt;&gt;,"GSFGNTIME")</string>
        <string>F.Intrinsic.Control.If(V.Args.Column,=,2)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(3,V.Args.Key,"")</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.Args.Key,"")</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Commit</string>
        <string>	'get the lot</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(V.Args.Column,V.Args.Key,V.Local.sLot)</string>
        <string>	Gui.Ncell_Trumpf_Interface.txtLotMaterial.Text(V.Local.sLot)</string>
        <string>	</string>
        <string>	'get the part</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sPart)</string>
        <string>	V.Local.sPart.Set(V.Local.sPart.Trim)</string>
        <string>	Gui.F_LotQtys.lbl2.Caption(V.Local.sPart)</string>
        <string>	'create the sql</string>
        <string>	F.Intrinsic.String.Build("SELECT BIN FROM V_ITEM_MASTER WHERE LOT = '{0}' AND PART = '{1}' and bin &lt;&gt; '' ",V.Local.sLot.Trim,V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>	'use the select statement</string>
        <string>	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sBin)</string>
        <string>	F.Intrinsic.String.Replace(V.Local.sBin,"*!*","",V.Local.sBin)</string>
        <string>	F.Intrinsic.String.Replace(V.Local.sBin,"#$#","*!*",V.Local.sBin)</string>
        <string>	'get the original style for the material</string>
        <string>	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sPart,V.Local.sOrdinal)</string>
        <string>	F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,3,"Type","DropDownList",V.Local.sBin)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,3,"Type","Locked",False)</string>
        <string>	'F.Intrinsic.Control.If(V.Local.sBin.Trim,&lt;&gt;,"")</string>
        <string>	'	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GSGOverrideProperty(3,V.Args.Key,"Type",V.Local.sBin.Trim,"dropdownlist")</string>
        <string>	'	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GSGOverrideProperty(3,V.Args.Key,"Type","dropdownlist","test*!*thing")</string>
        <string>	'F.Intrinsic.Control.EndIf</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].ApplyStyle(V.Args.Key,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)</string>
        <string>F.Intrinsic.Control.ElseIf(V.Args.Column,=,3)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].TextMatrix(4,V.Args.Key,"")</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].Commit</string>
        <string>	'get the lot</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(2,V.Args.Key,V.Local.sLot)</string>
        <string>	Gui.Ncell_Trumpf_Interface.txtLotMaterial.Text(V.Local.sLot)</string>
        <string>	'get the Bin</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(V.Args.Column,V.Args.Key,V.Local.sBin)</string>
        <string>	'get the part</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].GetTextMatrix(0,V.Args.Key,V.Local.sPart)</string>
        <string>	V.Local.sPart.Set(V.Local.sPart.Trim)</string>
        <string>	Gui.F_LotQtys.lbl2.Caption(V.Local.sPart)</string>
        <string>	'create the sql</string>
        <string>	F.Intrinsic.String.Build("SELECT SERIAL_NUMBER FROM V_ITEM_MASTER WHERE LOT = '{0}' AND BIN = '{1}' AND PART = '{2}' and bin &lt;&gt; '' ",V.Local.sLot.Trim,V.Local.sBin.Trim,V.Local.sPart.PSQLFriendly,V.Local.sSQL)</string>
        <string>	'use the select statement</string>
        <string>	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSerial)</string>
        <string>	F.Intrinsic.String.Replace(V.Local.sSerial,"*!*","",V.Local.sSerial)</string>
        <string>	F.Intrinsic.String.Replace(V.Local.sSerial,"#$#","*!*",V.Local.sSerial)</string>
        <string>	'get the original style for the material</string>
        <string>	F.Intrinsic.Variable.UDTMultiSeek(V.uGlobal.uMaterial!Material,V.Local.sPart,V.Local.sOrdinal)</string>
        <string>	F.Intrinsic.String.Split(V.Local.sOrdinal,"*!*",V.Local.sOrdinal)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,4,"Type","DropDownList",V.Local.sSerial)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].BuildStyle(V.uGlobal.uMaterial(v.Local.sOrdinal)!Style,4,"Type","Locked",False)</string>
        <string>	Gui.Ncell_Trumpf_Interface.[v.Args.ControlName].ApplyStyle(V.Args.Key,V.uGlobal.uMaterial(v.Local.sOrdinal)!Style)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Else</string>
        <string>	F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNTime.Rows,1,V.Local.iRows)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNTime.Commit</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNTime.GetTextMatrix(4,1,V.Local.sSQL)</string>
        <string>	F.Intrinsic.Control.For(V.Local.iCount,2,V.Local.iRows,1)</string>
        <string>		Gui.Ncell_Trumpf_Interface.gsfgNTime.TextMatrix(4,V.Local.iCount,V.Local.sSQL.Trim)</string>
        <string>	F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgListExit_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(Unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string />
        <string>Program.Sub.gsfgListExit.End</string>
        <string />
        <string>program.sub.f_lotqtys_unload.start</string>
        <string />
        <string>Gui.F_LotQtys..Visible(false)</string>
        <string />
        <string>program.sub.f_lotqtys_unload.End</string>
        <string />
        <string>program.sub.cmdviewlotbin_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdviewlotbin_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sSql.Declare(String)</string>
        <string>V.Local.sTemp.Declare(String)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string>V.Local.bExist.Declare(Boolean)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string />
        <string />
        <string />
        <string>F.Intrinsic.Control.If(V.Screen.F_LotQtys.Visible,=,False)</string>
        <string>	Gui.F_LotQtys..BindTo(V.Screen.Ncell_Trumpf_Interface.HWnd,500,100)</string>
        <string>	Gui.F_LotQtys..Visible(True)</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>V.Local.sTemp.Set(V.Screen.F_LotQtys.Caption)</string>
        <string>Gui.F_LotQtys..Caption("Loading...")</string>
        <string>F.Intrinsic.Control.CallSub(Bslotqtysgrid)</string>
        <string />
        <string>'Load Lot records for Selected part</string>
        <string>V.Local.sPart.Set(V.Screen.F_LotQtys!lbl2.Caption)</string>
        <string>F.Intrinsic.String.Build("select Bin,Lot,Serial_Number,Quantity from v_ITEM_MASTER where Part = '{0}' and LOT = '{1}'",V.Local.sPart.PSQLFriendly,V.Screen.Ncell_Trumpf_Interface!txtLotMaterial.Text,V.Local.sSql)</string>
        <string>F.ODBC.Connection!Con.OpenRecordsetRO("rstLotQty",V.Local.sSql)</string>
        <string>F.Intrinsic.Control.If(V.ODBC.Con!rstLotQty.EOF,&lt;&gt;,True)</string>
        <string>	Gui.F_LotQtys.gsflexgrid1.LoadRecordset("con!rstLotQty",1,False)</string>
        <string>	F.Intrinsic.Math.Sub(V.Screen.F_LotQtys!gsflexgrid1.Rows,1,V.Local.iRows)</string>
        <string>	'Delete Blank Row</string>
        <string>	Gui.F_LotQtys.gsflexgrid1.Rows(V.Local.iRows)</string>
        <string />
        <string>F.Intrinsic.Control.Else</string>
        <string>	'Display Message No records next to Part Caption on Label</string>
        <string>	F.Intrinsic.String.Build("{0}---No Records Found!",V.Screen.F_LotQtys!lbl2.Caption,V.Local.sSql)</string>
        <string>	Gui.F_LotQtys.lbl2.Caption(V.Local.sSql)</string>
        <string />
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.ODBC.Con!rstLotQty.Close</string>
        <string />
        <string>Gui.F_LotQtys..Caption(V.Local.sTemp)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmdviewlotbin_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>program.sub.cmdviewlotbin_click.End</string>
        <string />
        <string>Program.Sub.BSLotQtysGrid.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("BSLotQtysGrid_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>'buildstyle for View of Lot Quantity Grid</string>
        <string>Gui.F_LotQtys.gsflexgrid1.Cols(4)</string>
        <string>Gui.F_LotQtys.gsflexgrid1.Rows(1)</string>
        <string>Gui.F_LotQtys.gsflexgrid1.Rows(2)</string>
        <string>Gui.F_LotQtys.gsflexgrid1.FixedRows(1)</string>
        <string />
        <string>Gui.F_LotQtys.gsflexgrid1.TextMatrix(0,0,"Bin")</string>
        <string>Gui.F_LotQtys.gsflexgrid1.TextMatrix(1,0,"Lot")</string>
        <string>Gui.F_LotQtys.gsflexgrid1.TextMatrix(2,0,"Dimensions")</string>
        <string>Gui.F_LotQtys.gsflexgrid1.TextMatrix(3,0,"Qty Onhand")</string>
        <string />
        <string>Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,0,"Type","Locked",True)</string>
        <string>Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,1,"Type","Locked",True)</string>
        <string>Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,2,"Type","Locked",True)</string>
        <string>Gui.F_LotQtys.gsflexgrid1.BuildStyle(1,3,"Type","Locked",True)</string>
        <string />
        <string>Gui.F_LotQtys.gsflexgrid1.SetColumnPercentages(".15:.25:.40:.20")</string>
        <string>Gui.F_LotQtys.gsflexgrid1.ApplyStyle(1,1)</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("BSLotQtysGrid_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.BSLotQtysGrid.End</string>
        <string />
        <string>program.sub.gsfgtmaterial_posttextmatrix.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgtmaterial_posttextmatrix_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'Update custom table with override of actual sheets used. Ncell uses more material to nest sometimes that what the Actual machine finishes.</string>
        <string>V.Local.iQty.Declare(Long)</string>
        <string>V.Local.i.Declare(Long)</string>
        <string>V.Local.sret.Declare(String)</string>
        <string>V.Local.iRows.Declare(Long)</string>
        <string />
        <string>F.Intrinsic.Math.Sub(V.Screen.Ncell_Trumpf_Interface!gsfgNMaterial.Rows,1,V.Local.iRows)</string>
        <string />
        <string>F.Intrinsic.Control.For(V.Local.i,1,V.Local.iRows,1)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNMaterial.GetTextMatrix(5,V.Local.i,V.Local.sret)</string>
        <string>	F.Intrinsic.Math.Add(V.Local.iQty,V.Local.sret.Long,V.Local.iQty)</string>
        <string>F.Intrinsic.Control.Next(V.Local.i)</string>
        <string />
        <string>F.Intrinsic.String.Build("Total Sheets: {0}",V.Local.iQty,V.Local.sret)</string>
        <string>Gui.Ncell_Trumpf_Interface.lblNSheets.Caption(V.Local.sret)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgtmaterial_posttextmatrix_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>program.sub.gsfgtmaterial_posttextmatrix.End</string>
        <string />
        <string>program.sub.gsfgtmaterial_cellenter.start</string>
        <string />
        <string>program.sub.gsfgtmaterial_cellenter.End</string>
        <string />
        <string>program.sub.gsfgndrop_cellenter.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgndrop_cellenter_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Args.column,=,5)</string>
        <string>	'Set this when they enter cell so I can grab it on post text matrix to update</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(5,V.Args.key,V.Global.iPrevDropSize.Trim)</string>
        <string />
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgndrop_cellenter_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>program.sub.gsfgndrop_cellenter.End</string>
        <string />
        <string>program.sub.gsfgndrop_posttextmatrix.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("gsfgndrop_posttextmatrix_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sRet.Declare(String)</string>
        <string>V.Local.sSql.Declare(String)</string>
        <string />
        <string>F.Intrinsic.Control.If(V.Args.column,=,5)</string>
        <string>	Gui.Ncell_Trumpf_Interface.gsfgNDrop.GetTextMatrix(5,V.Args.key,V.Local.sRet)</string>
        <string />
        <string>	F.Intrinsic.String.Build("Select * from GCG_3744_NCELL_SCRN where NESTID = '{0}' and ltrim(rtrim(DSIZE)) = '{1}'",V.Screen.Ncell_Trumpf_Interface!cmboNNestID.Text,V.Global.iPrevDropSize.Trim,V.Local.sSql)</string>
        <string>	F.ODBC.Connection!Con.OpenRecordsetRW("rstDropSize",V.Local.sSql)</string>
        <string>	F.Intrinsic.Control.If(V.ODBC.Con!rstDropSize.EOF,&lt;&gt;,True)</string>
        <string>		F.ODBC.Con!rstDropSize.Set!DSIZE(V.Local.sRet.Trim)</string>
        <string>		F.ODBC.Con!rstDropSize.Update</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	F.ODBC.Con!rstDropSize.Close</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("gsfgndrop_posttextmatrix_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>program.sub.gsfgndrop_posttextmatrix.End</string>
        <string />
        <string>Program.Sub.Dop_To_Bin.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("Dop_To_Bin_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sBin.Declare(String)</string>
        <string>V.Local.sPart.Declare(String)</string>
        <string>V.Local.sSql.Declare(String)</string>
        <string>V.Local.sBinMaster.Declare(String)</string>
        <string />
        <string>Gui.SS_Form1.ddlDropBin.ClearItems</string>
        <string />
        <string>'load drop down with bin selection and show screen.</string>
        <string>V.Local.sSql.Set("select * from BIN_MASTER where UPPER(BIN_DESCRIPTION) like '%CROP%' ")</string>
        <string>F.ODBC.Connection!Con.OpenRecordsetRO("rstBin",V.Local.sSql)</string>
        <string>F.Intrinsic.Control.If(V.ODBC.Con!rstBin.EOF,&lt;&gt;,True)</string>
        <string>	F.Intrinsic.Control.DoUntil(V.ODBC.Con!rstBin.EOF,=,True)</string>
        <string>		Gui.SS_Form1.ddlDropBin.AddItem(V.ODBC.Con!rstBin.FieldValTrim!BIN)</string>
        <string>	</string>
        <string>	F.ODBC.Con!rstBin.MoveNext</string>
        <string>	F.Intrinsic.Control.Loop</string>
        <string />
        <string>F.Intrinsic.Control.EndIf</string>
        <string>F.ODBC.Con!rstBin.Close</string>
        <string />
        <string>F.Intrinsic.String.Build("{0} - {1}",V.args.sPart,V.Args.sSer,V.Local.sPart)</string>
        <string>Gui.SS_Form1.lblpart.Caption(V.Local.sPart)</string>
        <string>Gui.SS_Form1..Show</string>
        <string>V.Global.bCont.Set(False)</string>
        <string />
        <string>F.Intrinsic.Control.DoUntil(V.global.bcont,=,True)</string>
        <string>	F.Intrinsic.UI.Sleep(.25)</string>
        <string>F.Intrinsic.Control.Loop</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("Dop_To_Bin_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>Program.Sub.Dop_To_Bin.End</string>
        <string />
        <string>program.sub.cmdok_click.start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdok_click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>Gui.SS_Form1..Enabled(False)</string>
        <string />
        <string>V.Global.sDropBin.Set(V.Screen.SS_Form1!ddlDropBin.Text)</string>
        <string />
        <string>V.Global.bCont.Set(True)</string>
        <string />
        <string />
        <string>Gui.SS_Form1..Visible(false)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string />
        <string>F.Intrinsic.Control.Label("cmdok_click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_3744_NCELL_TRUMPF_INTERFACE.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>program.sub.cmdok_click.End</string>
        <string />
        <string>Program.Sub.Comments.Start</string>
        <string>${$0$}$$}$Strider$}$2/1/2016 3:59:30 PM$}$False</string>
        <string>${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$Program will be a GAB user interface to let users modify Trumpf and NCell Exported data before uploading it to Global Shop. Each Nesting export will have a separate tab on the screen to see current exports to be imported as well as a history view of past imported data from both NCell and Trumpf nesting exports.</string>
        <string>Program.Sub.Comments.End</string>
        <string />
        <string>Program.Sub.ScreenSS.Start</string>
        <string>SS_Form1{{CAPTION::Select Bin</string>
        <string>SS_Form1.CTRL{{NAME::ddlDropBin\\TYPE::4\\CAPTION::Select Drop Bin\\GROUP::-1\\BROWSER::0\\SIZE::1</string>
        <string>SS_Form1.CTRL{{NAME::lblPart\\TYPE::1\\CAPTION::Part#\\GROUP::-1\\BROWSER::0\\SIZE::1</string>
        <string>SS_Form1.CTRL{{NAME::cmdOk\\TYPE::5\\CAPTION::Ok\\GROUP::-1\\BROWSER::0\\SIZE::1</string>
        <string>SS_Form1.CTRL{{NAME::chkLabels\\TYPE::9\\CAPTION::Print Labels\\VALUE::1\\GROUP::-1\\BROWSER::0\\SIZE::1</string>
        <string />
        <string>Program.Sub.ScreenSS.End</string>
        <string />
        <string />
      </Lines>
    </TextStrings>
  </TextSource>
  <Scrolling>
    <WindowOriginY>4432</WindowOriginY>
  </Scrolling>
  <Outlining>
    <AllowOutlining>true</AllowOutlining>
    <ImageSize>8</ImageSize>
    <Ranges>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>0</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>353</Y>
        </EndPoint>
        <Text>Program.Sub.ScreenSU</Text>
        <DisplayText>Program.Sub.ScreenSU</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>355</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>459</Y>
        </EndPoint>
        <Text>Program.Sub.Preflight</Text>
        <DisplayText>Program.Sub.Preflight</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>461</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>510</Y>
        </EndPoint>
        <Text>Program.Sub.Main</Text>
        <DisplayText>Program.Sub.Main</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>512</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>531</Y>
        </EndPoint>
        <Text>Program.Sub.Unload</Text>
        <DisplayText>Program.Sub.Unload</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>533</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>604</Y>
        </EndPoint>
        <Text>Program.Sub.FilePath</Text>
        <DisplayText>Program.Sub.FilePath</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>606</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>743</Y>
        </EndPoint>
        <Text>Program.Sub.FileList</Text>
        <DisplayText>Program.Sub.FileList</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>745</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1135</Y>
        </EndPoint>
        <Text>Program.Sub.ReadXML</Text>
        <DisplayText>Program.Sub.ReadXML</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1137</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1436</Y>
        </EndPoint>
        <Text>Program.Sub.TrumpfBuildstyle</Text>
        <DisplayText>Program.Sub.TrumpfBuildstyle</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1438</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1501</Y>
        </EndPoint>
        <Text>Program.Sub.TrumpfLoadFG</Text>
        <DisplayText>Program.Sub.TrumpfLoadFG</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1503</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1733</Y>
        </EndPoint>
        <Text>Program.Sub.Consolidate</Text>
        <DisplayText>Program.Sub.Consolidate</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1735</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1775</Y>
        </EndPoint>
        <Text>Program.Sub.PopDropDown</Text>
        <DisplayText>Program.Sub.PopDropDown</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1777</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1901</Y>
        </EndPoint>
        <Text>program.sub.cmbotnestid_click</Text>
        <DisplayText>program.sub.cmbotnestid_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1903</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>1942</Y>
        </EndPoint>
        <Text>program.sub.cmdclear_click</Text>
        <DisplayText>program.sub.cmdclear_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>1944</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>2516</Y>
        </EndPoint>
        <Text>program.sub.cmdpost_click</Text>
        <DisplayText>program.sub.cmdpost_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>2518</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3174</Y>
        </EndPoint>
        <Text>Program.Sub.Post</Text>
        <DisplayText>Program.Sub.Post</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3176</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3418</Y>
        </EndPoint>
        <Text>Program.Sub.ReadNcell</Text>
        <DisplayText>Program.Sub.ReadNcell</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3420</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3536</Y>
        </EndPoint>
        <Text>Program.Sub.NcellCombine</Text>
        <DisplayText>Program.Sub.NcellCombine</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3538</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>3939</Y>
        </EndPoint>
        <Text>Program.Sub.NcellBuildstyle</Text>
        <DisplayText>Program.Sub.NcellBuildstyle</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>3941</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4034</Y>
        </EndPoint>
        <Text>Program.Sub.NcellLoadFG</Text>
        <DisplayText>Program.Sub.NcellLoadFG</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4036</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4170</Y>
        </EndPoint>
        <Text>program.sub.cmbonnestid_click</Text>
        <DisplayText>program.sub.cmbonnestid_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4172</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4190</Y>
        </EndPoint>
        <Text>program.sub.tabnest_click</Text>
        <DisplayText>program.sub.tabnest_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4192</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4237</Y>
        </EndPoint>
        <Text>Program.Sub.gsfgTimePostText</Text>
        <DisplayText>Program.Sub.gsfgTimePostText</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4239</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4368</Y>
        </EndPoint>
        <Text>Program.Sub.FlexSchedule</Text>
        <DisplayText>Program.Sub.FlexSchedule</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4370</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4392</Y>
        </EndPoint>
        <Text>Program.Sub.gsfgTimeMouseDown</Text>
        <DisplayText>Program.Sub.gsfgTimeMouseDown</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4394</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4427</Y>
        </EndPoint>
        <Text>program.sub.cmdflexsched_click</Text>
        <DisplayText>program.sub.cmdflexsched_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4429</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4446</Y>
        </EndPoint>
        <Text>Program.Sub.gsfgLostFocus</Text>
        <DisplayText>Program.Sub.gsfgLostFocus</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4448</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4501</Y>
        </EndPoint>
        <Text>program.sub.cmdrefresh_click</Text>
        <DisplayText>program.sub.cmdrefresh_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4503</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4593</Y>
        </EndPoint>
        <Text>Program.Sub.gsfgCmd_Click</Text>
        <DisplayText>Program.Sub.gsfgCmd_Click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4595</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4683</Y>
        </EndPoint>
        <Text>Program.Sub.gsfgListExit</Text>
        <DisplayText>Program.Sub.gsfgListExit</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4685</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4689</Y>
        </EndPoint>
        <Text>program.sub.f_lotqtys_unload</Text>
        <DisplayText>program.sub.f_lotqtys_unload</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4691</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4742</Y>
        </EndPoint>
        <Text>program.sub.cmdviewlotbin_click</Text>
        <DisplayText>program.sub.cmdviewlotbin_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4744</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4778</Y>
        </EndPoint>
        <Text>Program.Sub.BSLotQtysGrid</Text>
        <DisplayText>Program.Sub.BSLotQtysGrid</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4780</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4811</Y>
        </EndPoint>
        <Text>program.sub.gsfgtmaterial_posttextmatrix</Text>
        <DisplayText>program.sub.gsfgtmaterial_posttextmatrix</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4813</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4815</Y>
        </EndPoint>
        <Text>program.sub.gsfgtmaterial_cellenter</Text>
        <DisplayText>program.sub.gsfgtmaterial_cellenter</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4817</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4839</Y>
        </EndPoint>
        <Text>program.sub.gsfgndrop_cellenter</Text>
        <DisplayText>program.sub.gsfgndrop_cellenter</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4841</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4869</Y>
        </EndPoint>
        <Text>program.sub.gsfgndrop_posttextmatrix</Text>
        <DisplayText>program.sub.gsfgndrop_posttextmatrix</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4871</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4914</Y>
        </EndPoint>
        <Text>Program.Sub.Dop_To_Bin</Text>
        <DisplayText>Program.Sub.Dop_To_Bin</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4916</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4940</Y>
        </EndPoint>
        <Text>program.sub.cmdok_click</Text>
        <DisplayText>program.sub.cmdok_click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4942</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4945</Y>
        </EndPoint>
        <Text>Program.Sub.Comments</Text>
        <DisplayText>Program.Sub.Comments</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>4947</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>4954</Y>
        </EndPoint>
        <Text>Program.Sub.ScreenSS</Text>
        <DisplayText>Program.Sub.ScreenSS</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
    </Ranges>
  </Outlining>
  <HyperText />
  <Spelling />
  <Braces />
</SyntaxEdit>